// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/getsynq/dwhsupport/scrapper (interfaces: Scrapper)
//
// Generated by this command:
//
//	mockgen -typed -package=scrapper -destination=scrapper/mocks.go github.com/getsynq/dwhsupport/scrapper Scrapper
//

// Package scrapper is a generated GoMock package.
package scrapper

import (
	context "context"
	reflect "reflect"
	time "time"

	sqldialect "github.com/getsynq/dwhsupport/sqldialect"
	gomock "go.uber.org/mock/gomock"
)

// MockScrapper is a mock of Scrapper interface.
type MockScrapper struct {
	ctrl     *gomock.Controller
	recorder *MockScrapperMockRecorder
	isgomock struct{}
}

// MockScrapperMockRecorder is the mock recorder for MockScrapper.
type MockScrapperMockRecorder struct {
	mock *MockScrapper
}

// NewMockScrapper creates a new mock instance.
func NewMockScrapper(ctrl *gomock.Controller) *MockScrapper {
	mock := &MockScrapper{ctrl: ctrl}
	mock.recorder = &MockScrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScrapper) EXPECT() *MockScrapperMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockScrapper) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockScrapperMockRecorder) Close() *MockScrapperCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockScrapper)(nil).Close))
	return &MockScrapperCloseCall{Call: call}
}

// MockScrapperCloseCall wrap *gomock.Call
type MockScrapperCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScrapperCloseCall) Return(arg0 error) *MockScrapperCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScrapperCloseCall) Do(f func() error) *MockScrapperCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScrapperCloseCall) DoAndReturn(f func() error) *MockScrapperCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DialectType mocks base method.
func (m *MockScrapper) DialectType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialectType")
	ret0, _ := ret[0].(string)
	return ret0
}

// DialectType indicates an expected call of DialectType.
func (mr *MockScrapperMockRecorder) DialectType() *MockScrapperDialectTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialectType", reflect.TypeOf((*MockScrapper)(nil).DialectType))
	return &MockScrapperDialectTypeCall{Call: call}
}

// MockScrapperDialectTypeCall wrap *gomock.Call
type MockScrapperDialectTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScrapperDialectTypeCall) Return(arg0 string) *MockScrapperDialectTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScrapperDialectTypeCall) Do(f func() string) *MockScrapperDialectTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScrapperDialectTypeCall) DoAndReturn(f func() string) *MockScrapperDialectTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsPermissionError mocks base method.
func (m *MockScrapper) IsPermissionError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPermissionError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPermissionError indicates an expected call of IsPermissionError.
func (mr *MockScrapperMockRecorder) IsPermissionError(err any) *MockScrapperIsPermissionErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPermissionError", reflect.TypeOf((*MockScrapper)(nil).IsPermissionError), err)
	return &MockScrapperIsPermissionErrorCall{Call: call}
}

// MockScrapperIsPermissionErrorCall wrap *gomock.Call
type MockScrapperIsPermissionErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScrapperIsPermissionErrorCall) Return(arg0 bool) *MockScrapperIsPermissionErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScrapperIsPermissionErrorCall) Do(f func(error) bool) *MockScrapperIsPermissionErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScrapperIsPermissionErrorCall) DoAndReturn(f func(error) bool) *MockScrapperIsPermissionErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryCatalog mocks base method.
func (m *MockScrapper) QueryCatalog(ctx context.Context) ([]*CatalogColumnRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCatalog", ctx)
	ret0, _ := ret[0].([]*CatalogColumnRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCatalog indicates an expected call of QueryCatalog.
func (mr *MockScrapperMockRecorder) QueryCatalog(ctx any) *MockScrapperQueryCatalogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCatalog", reflect.TypeOf((*MockScrapper)(nil).QueryCatalog), ctx)
	return &MockScrapperQueryCatalogCall{Call: call}
}

// MockScrapperQueryCatalogCall wrap *gomock.Call
type MockScrapperQueryCatalogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScrapperQueryCatalogCall) Return(arg0 []*CatalogColumnRow, arg1 error) *MockScrapperQueryCatalogCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScrapperQueryCatalogCall) Do(f func(context.Context) ([]*CatalogColumnRow, error)) *MockScrapperQueryCatalogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScrapperQueryCatalogCall) DoAndReturn(f func(context.Context) ([]*CatalogColumnRow, error)) *MockScrapperQueryCatalogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryCustomMetrics mocks base method.
func (m *MockScrapper) QueryCustomMetrics(ctx context.Context, sql string, args ...any) ([]*CustomMetricsRow, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryCustomMetrics", varargs...)
	ret0, _ := ret[0].([]*CustomMetricsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCustomMetrics indicates an expected call of QueryCustomMetrics.
func (mr *MockScrapperMockRecorder) QueryCustomMetrics(ctx, sql any, args ...any) *MockScrapperQueryCustomMetricsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCustomMetrics", reflect.TypeOf((*MockScrapper)(nil).QueryCustomMetrics), varargs...)
	return &MockScrapperQueryCustomMetricsCall{Call: call}
}

// MockScrapperQueryCustomMetricsCall wrap *gomock.Call
type MockScrapperQueryCustomMetricsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScrapperQueryCustomMetricsCall) Return(arg0 []*CustomMetricsRow, arg1 error) *MockScrapperQueryCustomMetricsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScrapperQueryCustomMetricsCall) Do(f func(context.Context, string, ...any) ([]*CustomMetricsRow, error)) *MockScrapperQueryCustomMetricsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScrapperQueryCustomMetricsCall) DoAndReturn(f func(context.Context, string, ...any) ([]*CustomMetricsRow, error)) *MockScrapperQueryCustomMetricsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryDatabases mocks base method.
func (m *MockScrapper) QueryDatabases(ctx context.Context) ([]*DatabaseRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDatabases", ctx)
	ret0, _ := ret[0].([]*DatabaseRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDatabases indicates an expected call of QueryDatabases.
func (mr *MockScrapperMockRecorder) QueryDatabases(ctx any) *MockScrapperQueryDatabasesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDatabases", reflect.TypeOf((*MockScrapper)(nil).QueryDatabases), ctx)
	return &MockScrapperQueryDatabasesCall{Call: call}
}

// MockScrapperQueryDatabasesCall wrap *gomock.Call
type MockScrapperQueryDatabasesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScrapperQueryDatabasesCall) Return(arg0 []*DatabaseRow, arg1 error) *MockScrapperQueryDatabasesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScrapperQueryDatabasesCall) Do(f func(context.Context) ([]*DatabaseRow, error)) *MockScrapperQueryDatabasesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScrapperQueryDatabasesCall) DoAndReturn(f func(context.Context) ([]*DatabaseRow, error)) *MockScrapperQueryDatabasesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QuerySegments mocks base method.
func (m *MockScrapper) QuerySegments(ctx context.Context, sql string, args ...any) ([]*SegmentRow, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuerySegments", varargs...)
	ret0, _ := ret[0].([]*SegmentRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySegments indicates an expected call of QuerySegments.
func (mr *MockScrapperMockRecorder) QuerySegments(ctx, sql any, args ...any) *MockScrapperQuerySegmentsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySegments", reflect.TypeOf((*MockScrapper)(nil).QuerySegments), varargs...)
	return &MockScrapperQuerySegmentsCall{Call: call}
}

// MockScrapperQuerySegmentsCall wrap *gomock.Call
type MockScrapperQuerySegmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScrapperQuerySegmentsCall) Return(arg0 []*SegmentRow, arg1 error) *MockScrapperQuerySegmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScrapperQuerySegmentsCall) Do(f func(context.Context, string, ...any) ([]*SegmentRow, error)) *MockScrapperQuerySegmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScrapperQuerySegmentsCall) DoAndReturn(f func(context.Context, string, ...any) ([]*SegmentRow, error)) *MockScrapperQuerySegmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QuerySqlDefinitions mocks base method.
func (m *MockScrapper) QuerySqlDefinitions(ctx context.Context) ([]*SqlDefinitionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySqlDefinitions", ctx)
	ret0, _ := ret[0].([]*SqlDefinitionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySqlDefinitions indicates an expected call of QuerySqlDefinitions.
func (mr *MockScrapperMockRecorder) QuerySqlDefinitions(ctx any) *MockScrapperQuerySqlDefinitionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySqlDefinitions", reflect.TypeOf((*MockScrapper)(nil).QuerySqlDefinitions), ctx)
	return &MockScrapperQuerySqlDefinitionsCall{Call: call}
}

// MockScrapperQuerySqlDefinitionsCall wrap *gomock.Call
type MockScrapperQuerySqlDefinitionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScrapperQuerySqlDefinitionsCall) Return(arg0 []*SqlDefinitionRow, arg1 error) *MockScrapperQuerySqlDefinitionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScrapperQuerySqlDefinitionsCall) Do(f func(context.Context) ([]*SqlDefinitionRow, error)) *MockScrapperQuerySqlDefinitionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScrapperQuerySqlDefinitionsCall) DoAndReturn(f func(context.Context) ([]*SqlDefinitionRow, error)) *MockScrapperQuerySqlDefinitionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryTableMetrics mocks base method.
func (m *MockScrapper) QueryTableMetrics(ctx context.Context, lastMetricsFetchTime time.Time) ([]*TableMetricsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTableMetrics", ctx, lastMetricsFetchTime)
	ret0, _ := ret[0].([]*TableMetricsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTableMetrics indicates an expected call of QueryTableMetrics.
func (mr *MockScrapperMockRecorder) QueryTableMetrics(ctx, lastMetricsFetchTime any) *MockScrapperQueryTableMetricsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTableMetrics", reflect.TypeOf((*MockScrapper)(nil).QueryTableMetrics), ctx, lastMetricsFetchTime)
	return &MockScrapperQueryTableMetricsCall{Call: call}
}

// MockScrapperQueryTableMetricsCall wrap *gomock.Call
type MockScrapperQueryTableMetricsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScrapperQueryTableMetricsCall) Return(arg0 []*TableMetricsRow, arg1 error) *MockScrapperQueryTableMetricsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScrapperQueryTableMetricsCall) Do(f func(context.Context, time.Time) ([]*TableMetricsRow, error)) *MockScrapperQueryTableMetricsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScrapperQueryTableMetricsCall) DoAndReturn(f func(context.Context, time.Time) ([]*TableMetricsRow, error)) *MockScrapperQueryTableMetricsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryTables mocks base method.
func (m *MockScrapper) QueryTables(ctx context.Context) ([]*TableRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTables", ctx)
	ret0, _ := ret[0].([]*TableRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTables indicates an expected call of QueryTables.
func (mr *MockScrapperMockRecorder) QueryTables(ctx any) *MockScrapperQueryTablesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTables", reflect.TypeOf((*MockScrapper)(nil).QueryTables), ctx)
	return &MockScrapperQueryTablesCall{Call: call}
}

// MockScrapperQueryTablesCall wrap *gomock.Call
type MockScrapperQueryTablesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScrapperQueryTablesCall) Return(arg0 []*TableRow, arg1 error) *MockScrapperQueryTablesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScrapperQueryTablesCall) Do(f func(context.Context) ([]*TableRow, error)) *MockScrapperQueryTablesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScrapperQueryTablesCall) DoAndReturn(f func(context.Context) ([]*TableRow, error)) *MockScrapperQueryTablesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SqlDialect mocks base method.
func (m *MockScrapper) SqlDialect() sqldialect.Dialect {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SqlDialect")
	ret0, _ := ret[0].(sqldialect.Dialect)
	return ret0
}

// SqlDialect indicates an expected call of SqlDialect.
func (mr *MockScrapperMockRecorder) SqlDialect() *MockScrapperSqlDialectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SqlDialect", reflect.TypeOf((*MockScrapper)(nil).SqlDialect))
	return &MockScrapperSqlDialectCall{Call: call}
}

// MockScrapperSqlDialectCall wrap *gomock.Call
type MockScrapperSqlDialectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScrapperSqlDialectCall) Return(arg0 sqldialect.Dialect) *MockScrapperSqlDialectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScrapperSqlDialectCall) Do(f func() sqldialect.Dialect) *MockScrapperSqlDialectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScrapperSqlDialectCall) DoAndReturn(f func() sqldialect.Dialect) *MockScrapperSqlDialectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateConfiguration mocks base method.
func (m *MockScrapper) ValidateConfiguration(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfiguration", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateConfiguration indicates an expected call of ValidateConfiguration.
func (mr *MockScrapperMockRecorder) ValidateConfiguration(ctx any) *MockScrapperValidateConfigurationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfiguration", reflect.TypeOf((*MockScrapper)(nil).ValidateConfiguration), ctx)
	return &MockScrapperValidateConfigurationCall{Call: call}
}

// MockScrapperValidateConfigurationCall wrap *gomock.Call
type MockScrapperValidateConfigurationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScrapperValidateConfigurationCall) Return(warnings []string, err error) *MockScrapperValidateConfigurationCall {
	c.Call = c.Call.Return(warnings, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScrapperValidateConfigurationCall) Do(f func(context.Context) ([]string, error)) *MockScrapperValidateConfigurationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScrapperValidateConfigurationCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockScrapperValidateConfigurationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
