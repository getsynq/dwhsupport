// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: synq/issues/issues/v1/issues_service.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/getsynq/api/issues/actor/v1"
	_ "github.com/getsynq/api/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MarkInvestigatingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the issue to mark as investigating.
	IssueId string `protobuf:"bytes,1,opt,name=issue_id,json=issueId,proto3" json:"issue_id,omitempty"`
	// Actor marking the issue as investigating.
	Actor *v1.Actor `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	// Time at which the issue was marked as investigating. Defaults to the current time.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// Ignore status change if the issue already has a status.
	RequireNoExistingStatus bool `protobuf:"varint,4,opt,name=require_no_existing_status,json=requireNoExistingStatus,proto3" json:"require_no_existing_status,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MarkInvestigatingRequest) Reset() {
	*x = MarkInvestigatingRequest{}
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkInvestigatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkInvestigatingRequest) ProtoMessage() {}

func (x *MarkInvestigatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkInvestigatingRequest.ProtoReflect.Descriptor instead.
func (*MarkInvestigatingRequest) Descriptor() ([]byte, []int) {
	return file_synq_issues_issues_v1_issues_service_proto_rawDescGZIP(), []int{0}
}

func (x *MarkInvestigatingRequest) GetIssueId() string {
	if x != nil {
		return x.IssueId
	}
	return ""
}

func (x *MarkInvestigatingRequest) GetActor() *v1.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *MarkInvestigatingRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MarkInvestigatingRequest) GetRequireNoExistingStatus() bool {
	if x != nil {
		return x.RequireNoExistingStatus
	}
	return false
}

type MarkInvestigatingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkInvestigatingResponse) Reset() {
	*x = MarkInvestigatingResponse{}
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkInvestigatingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkInvestigatingResponse) ProtoMessage() {}

func (x *MarkInvestigatingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkInvestigatingResponse.ProtoReflect.Descriptor instead.
func (*MarkInvestigatingResponse) Descriptor() ([]byte, []int) {
	return file_synq_issues_issues_v1_issues_service_proto_rawDescGZIP(), []int{1}
}

type MarkFixedRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the issue to mark as fixed.
	IssueId string `protobuf:"bytes,1,opt,name=issue_id,json=issueId,proto3" json:"issue_id,omitempty"`
	// Actor marking the issue as fixed.
	Actor *v1.Actor `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	// Time at which the issue was marked as fixed. Defaults to the current time.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// Ignore status change if the issue already has a status.
	RequireNoExistingStatus bool `protobuf:"varint,4,opt,name=require_no_existing_status,json=requireNoExistingStatus,proto3" json:"require_no_existing_status,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MarkFixedRequest) Reset() {
	*x = MarkFixedRequest{}
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkFixedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkFixedRequest) ProtoMessage() {}

func (x *MarkFixedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkFixedRequest.ProtoReflect.Descriptor instead.
func (*MarkFixedRequest) Descriptor() ([]byte, []int) {
	return file_synq_issues_issues_v1_issues_service_proto_rawDescGZIP(), []int{2}
}

func (x *MarkFixedRequest) GetIssueId() string {
	if x != nil {
		return x.IssueId
	}
	return ""
}

func (x *MarkFixedRequest) GetActor() *v1.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *MarkFixedRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MarkFixedRequest) GetRequireNoExistingStatus() bool {
	if x != nil {
		return x.RequireNoExistingStatus
	}
	return false
}

type MarkFixedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkFixedResponse) Reset() {
	*x = MarkFixedResponse{}
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkFixedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkFixedResponse) ProtoMessage() {}

func (x *MarkFixedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkFixedResponse.ProtoReflect.Descriptor instead.
func (*MarkFixedResponse) Descriptor() ([]byte, []int) {
	return file_synq_issues_issues_v1_issues_service_proto_rawDescGZIP(), []int{3}
}

type MarkExpectedRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the issue to mark as expected.
	IssueId string `protobuf:"bytes,1,opt,name=issue_id,json=issueId,proto3" json:"issue_id,omitempty"`
	// Actor marking the issue as expected.
	Actor *v1.Actor `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	// Time at which the issue was marked as expected. Defaults to the current time.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// Ignore status change if the issue already has a status.
	RequireNoExistingStatus bool `protobuf:"varint,4,opt,name=require_no_existing_status,json=requireNoExistingStatus,proto3" json:"require_no_existing_status,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MarkExpectedRequest) Reset() {
	*x = MarkExpectedRequest{}
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkExpectedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkExpectedRequest) ProtoMessage() {}

func (x *MarkExpectedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkExpectedRequest.ProtoReflect.Descriptor instead.
func (*MarkExpectedRequest) Descriptor() ([]byte, []int) {
	return file_synq_issues_issues_v1_issues_service_proto_rawDescGZIP(), []int{4}
}

func (x *MarkExpectedRequest) GetIssueId() string {
	if x != nil {
		return x.IssueId
	}
	return ""
}

func (x *MarkExpectedRequest) GetActor() *v1.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *MarkExpectedRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MarkExpectedRequest) GetRequireNoExistingStatus() bool {
	if x != nil {
		return x.RequireNoExistingStatus
	}
	return false
}

type MarkExpectedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkExpectedResponse) Reset() {
	*x = MarkExpectedResponse{}
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkExpectedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkExpectedResponse) ProtoMessage() {}

func (x *MarkExpectedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkExpectedResponse.ProtoReflect.Descriptor instead.
func (*MarkExpectedResponse) Descriptor() ([]byte, []int) {
	return file_synq_issues_issues_v1_issues_service_proto_rawDescGZIP(), []int{5}
}

type MarkNoActionNeededRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the issue to mark as no action needed.
	IssueId string `protobuf:"bytes,1,opt,name=issue_id,json=issueId,proto3" json:"issue_id,omitempty"`
	// Actor marking the issue as no action needed.
	Actor *v1.Actor `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	// Time at which the issue was marked as no action needed. Defaults to the current time.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// Ignore status change if the issue already has a status.
	RequireNoExistingStatus bool `protobuf:"varint,4,opt,name=require_no_existing_status,json=requireNoExistingStatus,proto3" json:"require_no_existing_status,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MarkNoActionNeededRequest) Reset() {
	*x = MarkNoActionNeededRequest{}
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkNoActionNeededRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkNoActionNeededRequest) ProtoMessage() {}

func (x *MarkNoActionNeededRequest) ProtoReflect() protoreflect.Message {
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkNoActionNeededRequest.ProtoReflect.Descriptor instead.
func (*MarkNoActionNeededRequest) Descriptor() ([]byte, []int) {
	return file_synq_issues_issues_v1_issues_service_proto_rawDescGZIP(), []int{6}
}

func (x *MarkNoActionNeededRequest) GetIssueId() string {
	if x != nil {
		return x.IssueId
	}
	return ""
}

func (x *MarkNoActionNeededRequest) GetActor() *v1.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *MarkNoActionNeededRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MarkNoActionNeededRequest) GetRequireNoExistingStatus() bool {
	if x != nil {
		return x.RequireNoExistingStatus
	}
	return false
}

type MarkNoActionNeededResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkNoActionNeededResponse) Reset() {
	*x = MarkNoActionNeededResponse{}
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkNoActionNeededResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkNoActionNeededResponse) ProtoMessage() {}

func (x *MarkNoActionNeededResponse) ProtoReflect() protoreflect.Message {
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkNoActionNeededResponse.ProtoReflect.Descriptor instead.
func (*MarkNoActionNeededResponse) Descriptor() ([]byte, []int) {
	return file_synq_issues_issues_v1_issues_service_proto_rawDescGZIP(), []int{7}
}

type PostCommentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the issue to post a comment on.
	IssueId string `protobuf:"bytes,1,opt,name=issue_id,json=issueId,proto3" json:"issue_id,omitempty"`
	// Actor posting the comment.
	Actor *v1.Actor `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	// Comment to post.
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// Time at which the comment was posted. Defaults to the current time.
	Time          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostCommentRequest) Reset() {
	*x = PostCommentRequest{}
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCommentRequest) ProtoMessage() {}

func (x *PostCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCommentRequest.ProtoReflect.Descriptor instead.
func (*PostCommentRequest) Descriptor() ([]byte, []int) {
	return file_synq_issues_issues_v1_issues_service_proto_rawDescGZIP(), []int{8}
}

func (x *PostCommentRequest) GetIssueId() string {
	if x != nil {
		return x.IssueId
	}
	return ""
}

func (x *PostCommentRequest) GetActor() *v1.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *PostCommentRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *PostCommentRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type PostCommentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommentId     string                 `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostCommentResponse) Reset() {
	*x = PostCommentResponse{}
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCommentResponse) ProtoMessage() {}

func (x *PostCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_synq_issues_issues_v1_issues_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCommentResponse.ProtoReflect.Descriptor instead.
func (*PostCommentResponse) Descriptor() ([]byte, []int) {
	return file_synq_issues_issues_v1_issues_service_proto_rawDescGZIP(), []int{9}
}

func (x *PostCommentResponse) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

var File_synq_issues_issues_v1_issues_service_proto protoreflect.FileDescriptor

var file_synq_issues_issues_v1_issues_service_proto_rawDesc = string([]byte{
	0x0a, 0x2a, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x73, 0x79,
	0x6e, 0x71, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x72, 0x6b, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x13, 0xba, 0x48, 0x10, 0xc8, 0x01, 0x01, 0xb2, 0x01, 0x0a, 0x38, 0x01, 0x2a, 0x06, 0x08,
	0x80, 0xb3, 0xbe, 0x8e, 0x06, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4e, 0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x61, 0x72, 0x6b,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48,
	0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x13, 0xba, 0x48, 0x10, 0xc8, 0x01, 0x01, 0xb2,
	0x01, 0x0a, 0x38, 0x01, 0x2a, 0x06, 0x08, 0x80, 0xb3, 0xbe, 0x8e, 0x06, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6e, 0x6f,
	0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4e,
	0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x13, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x6b, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x43, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x13, 0xba, 0x48, 0x10, 0xc8, 0x01,
	0x01, 0xb2, 0x01, 0x0a, 0x38, 0x01, 0x2a, 0x06, 0x08, 0x80, 0xb3, 0xbe, 0x8e, 0x06, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f,
	0x6e, 0x6f, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x4e, 0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x16, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x19, 0x4d, 0x61,
	0x72, 0x6b, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01,
	0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x13, 0xba, 0x48, 0x10, 0xc8, 0x01, 0x01, 0xb2, 0x01, 0x0a, 0x38,
	0x01, 0x2a, 0x06, 0x08, 0x80, 0xb3, 0xbe, 0x8e, 0x06, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4e, 0x6f, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1c, 0x0a, 0x1a,
	0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x12, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x13, 0xba, 0x48, 0x10, 0xc8, 0x01, 0x01, 0xb2, 0x01, 0x0a, 0x38, 0x01, 0x2a, 0x06, 0x08,
	0x80, 0xb3, 0xbe, 0x8e, 0x06, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x13, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0xdf,
	0x04, 0x0a, 0x0d, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x7f, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x07, 0xd2, 0xb5, 0x18, 0x03, 0x0a, 0x01,
	0x0a, 0x12, 0x67, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x46, 0x69, 0x78, 0x65, 0x64, 0x12, 0x27,
	0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x07, 0xd2, 0xb5, 0x18, 0x03, 0x0a, 0x01, 0x0a, 0x12, 0x70, 0x0a, 0x0c, 0x4d, 0x61,
	0x72, 0x6b, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x07, 0xd2, 0xb5, 0x18, 0x03, 0x0a, 0x01, 0x0a, 0x12, 0x82, 0x01, 0x0a,
	0x12, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x30, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x07, 0xd2, 0xb5, 0x18, 0x03, 0x0a, 0x01,
	0x0a, 0x12, 0x6d, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x79,
	0x6e, 0x71, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x07, 0xd2, 0xb5, 0x18, 0x03, 0x0a, 0x01, 0x0a,
	0x42, 0xcf, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x12,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x65, 0x74, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x53, 0x49, 0x49, 0xaa, 0x02, 0x15, 0x53, 0x79, 0x6e, 0x71, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x15, 0x53, 0x79,
	0x6e, 0x71, 0x5c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x5c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x21, 0x53, 0x79, 0x6e, 0x71, 0x5c, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x5c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x53, 0x79, 0x6e, 0x71, 0x3a, 0x3a,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x3a, 0x3a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_synq_issues_issues_v1_issues_service_proto_rawDescOnce sync.Once
	file_synq_issues_issues_v1_issues_service_proto_rawDescData []byte
)

func file_synq_issues_issues_v1_issues_service_proto_rawDescGZIP() []byte {
	file_synq_issues_issues_v1_issues_service_proto_rawDescOnce.Do(func() {
		file_synq_issues_issues_v1_issues_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_synq_issues_issues_v1_issues_service_proto_rawDesc), len(file_synq_issues_issues_v1_issues_service_proto_rawDesc)))
	})
	return file_synq_issues_issues_v1_issues_service_proto_rawDescData
}

var file_synq_issues_issues_v1_issues_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_synq_issues_issues_v1_issues_service_proto_goTypes = []any{
	(*MarkInvestigatingRequest)(nil),   // 0: synq.issues.issues.v1.MarkInvestigatingRequest
	(*MarkInvestigatingResponse)(nil),  // 1: synq.issues.issues.v1.MarkInvestigatingResponse
	(*MarkFixedRequest)(nil),           // 2: synq.issues.issues.v1.MarkFixedRequest
	(*MarkFixedResponse)(nil),          // 3: synq.issues.issues.v1.MarkFixedResponse
	(*MarkExpectedRequest)(nil),        // 4: synq.issues.issues.v1.MarkExpectedRequest
	(*MarkExpectedResponse)(nil),       // 5: synq.issues.issues.v1.MarkExpectedResponse
	(*MarkNoActionNeededRequest)(nil),  // 6: synq.issues.issues.v1.MarkNoActionNeededRequest
	(*MarkNoActionNeededResponse)(nil), // 7: synq.issues.issues.v1.MarkNoActionNeededResponse
	(*PostCommentRequest)(nil),         // 8: synq.issues.issues.v1.PostCommentRequest
	(*PostCommentResponse)(nil),        // 9: synq.issues.issues.v1.PostCommentResponse
	(*v1.Actor)(nil),                   // 10: synq.issues.actor.v1.Actor
	(*timestamppb.Timestamp)(nil),      // 11: google.protobuf.Timestamp
}
var file_synq_issues_issues_v1_issues_service_proto_depIdxs = []int32{
	10, // 0: synq.issues.issues.v1.MarkInvestigatingRequest.actor:type_name -> synq.issues.actor.v1.Actor
	11, // 1: synq.issues.issues.v1.MarkInvestigatingRequest.time:type_name -> google.protobuf.Timestamp
	10, // 2: synq.issues.issues.v1.MarkFixedRequest.actor:type_name -> synq.issues.actor.v1.Actor
	11, // 3: synq.issues.issues.v1.MarkFixedRequest.time:type_name -> google.protobuf.Timestamp
	10, // 4: synq.issues.issues.v1.MarkExpectedRequest.actor:type_name -> synq.issues.actor.v1.Actor
	11, // 5: synq.issues.issues.v1.MarkExpectedRequest.time:type_name -> google.protobuf.Timestamp
	10, // 6: synq.issues.issues.v1.MarkNoActionNeededRequest.actor:type_name -> synq.issues.actor.v1.Actor
	11, // 7: synq.issues.issues.v1.MarkNoActionNeededRequest.time:type_name -> google.protobuf.Timestamp
	10, // 8: synq.issues.issues.v1.PostCommentRequest.actor:type_name -> synq.issues.actor.v1.Actor
	11, // 9: synq.issues.issues.v1.PostCommentRequest.time:type_name -> google.protobuf.Timestamp
	0,  // 10: synq.issues.issues.v1.IssuesService.MarkInvestigating:input_type -> synq.issues.issues.v1.MarkInvestigatingRequest
	2,  // 11: synq.issues.issues.v1.IssuesService.MarkFixed:input_type -> synq.issues.issues.v1.MarkFixedRequest
	4,  // 12: synq.issues.issues.v1.IssuesService.MarkExpected:input_type -> synq.issues.issues.v1.MarkExpectedRequest
	6,  // 13: synq.issues.issues.v1.IssuesService.MarkNoActionNeeded:input_type -> synq.issues.issues.v1.MarkNoActionNeededRequest
	8,  // 14: synq.issues.issues.v1.IssuesService.PostComment:input_type -> synq.issues.issues.v1.PostCommentRequest
	1,  // 15: synq.issues.issues.v1.IssuesService.MarkInvestigating:output_type -> synq.issues.issues.v1.MarkInvestigatingResponse
	3,  // 16: synq.issues.issues.v1.IssuesService.MarkFixed:output_type -> synq.issues.issues.v1.MarkFixedResponse
	5,  // 17: synq.issues.issues.v1.IssuesService.MarkExpected:output_type -> synq.issues.issues.v1.MarkExpectedResponse
	7,  // 18: synq.issues.issues.v1.IssuesService.MarkNoActionNeeded:output_type -> synq.issues.issues.v1.MarkNoActionNeededResponse
	9,  // 19: synq.issues.issues.v1.IssuesService.PostComment:output_type -> synq.issues.issues.v1.PostCommentResponse
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_synq_issues_issues_v1_issues_service_proto_init() }
func file_synq_issues_issues_v1_issues_service_proto_init() {
	if File_synq_issues_issues_v1_issues_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_synq_issues_issues_v1_issues_service_proto_rawDesc), len(file_synq_issues_issues_v1_issues_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_synq_issues_issues_v1_issues_service_proto_goTypes,
		DependencyIndexes: file_synq_issues_issues_v1_issues_service_proto_depIdxs,
		MessageInfos:      file_synq_issues_issues_v1_issues_service_proto_msgTypes,
	}.Build()
	File_synq_issues_issues_v1_issues_service_proto = out.File
	file_synq_issues_issues_v1_issues_service_proto_goTypes = nil
	file_synq_issues_issues_v1_issues_service_proto_depIdxs = nil
}
