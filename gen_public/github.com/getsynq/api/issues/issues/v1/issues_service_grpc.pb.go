// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: synq/issues/issues/v1/issues_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IssuesService_MarkInvestigating_FullMethodName  = "/synq.issues.issues.v1.IssuesService/MarkInvestigating"
	IssuesService_MarkFixed_FullMethodName          = "/synq.issues.issues.v1.IssuesService/MarkFixed"
	IssuesService_MarkExpected_FullMethodName       = "/synq.issues.issues.v1.IssuesService/MarkExpected"
	IssuesService_MarkNoActionNeeded_FullMethodName = "/synq.issues.issues.v1.IssuesService/MarkNoActionNeeded"
	IssuesService_PostComment_FullMethodName        = "/synq.issues.issues.v1.IssuesService/PostComment"
)

// IssuesServiceClient is the client API for IssuesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IssuesService is a service for managing Issues.
type IssuesServiceClient interface {
	// Mark issue as being investigated.
	MarkInvestigating(ctx context.Context, in *MarkInvestigatingRequest, opts ...grpc.CallOption) (*MarkInvestigatingResponse, error)
	// Mark issue as fixed.
	MarkFixed(ctx context.Context, in *MarkFixedRequest, opts ...grpc.CallOption) (*MarkFixedResponse, error)
	// Mark issue as expected.
	MarkExpected(ctx context.Context, in *MarkExpectedRequest, opts ...grpc.CallOption) (*MarkExpectedResponse, error)
	// Mark issue as no action needed.
	MarkNoActionNeeded(ctx context.Context, in *MarkNoActionNeededRequest, opts ...grpc.CallOption) (*MarkNoActionNeededResponse, error)
	// Post a comment on an issue.
	PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentResponse, error)
}

type issuesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIssuesServiceClient(cc grpc.ClientConnInterface) IssuesServiceClient {
	return &issuesServiceClient{cc}
}

func (c *issuesServiceClient) MarkInvestigating(ctx context.Context, in *MarkInvestigatingRequest, opts ...grpc.CallOption) (*MarkInvestigatingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkInvestigatingResponse)
	err := c.cc.Invoke(ctx, IssuesService_MarkInvestigating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesServiceClient) MarkFixed(ctx context.Context, in *MarkFixedRequest, opts ...grpc.CallOption) (*MarkFixedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkFixedResponse)
	err := c.cc.Invoke(ctx, IssuesService_MarkFixed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesServiceClient) MarkExpected(ctx context.Context, in *MarkExpectedRequest, opts ...grpc.CallOption) (*MarkExpectedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkExpectedResponse)
	err := c.cc.Invoke(ctx, IssuesService_MarkExpected_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesServiceClient) MarkNoActionNeeded(ctx context.Context, in *MarkNoActionNeededRequest, opts ...grpc.CallOption) (*MarkNoActionNeededResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkNoActionNeededResponse)
	err := c.cc.Invoke(ctx, IssuesService_MarkNoActionNeeded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesServiceClient) PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostCommentResponse)
	err := c.cc.Invoke(ctx, IssuesService_PostComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuesServiceServer is the server API for IssuesService service.
// All implementations must embed UnimplementedIssuesServiceServer
// for forward compatibility.
//
// IssuesService is a service for managing Issues.
type IssuesServiceServer interface {
	// Mark issue as being investigated.
	MarkInvestigating(context.Context, *MarkInvestigatingRequest) (*MarkInvestigatingResponse, error)
	// Mark issue as fixed.
	MarkFixed(context.Context, *MarkFixedRequest) (*MarkFixedResponse, error)
	// Mark issue as expected.
	MarkExpected(context.Context, *MarkExpectedRequest) (*MarkExpectedResponse, error)
	// Mark issue as no action needed.
	MarkNoActionNeeded(context.Context, *MarkNoActionNeededRequest) (*MarkNoActionNeededResponse, error)
	// Post a comment on an issue.
	PostComment(context.Context, *PostCommentRequest) (*PostCommentResponse, error)
	mustEmbedUnimplementedIssuesServiceServer()
}

// UnimplementedIssuesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIssuesServiceServer struct{}

func (UnimplementedIssuesServiceServer) MarkInvestigating(context.Context, *MarkInvestigatingRequest) (*MarkInvestigatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkInvestigating not implemented")
}
func (UnimplementedIssuesServiceServer) MarkFixed(context.Context, *MarkFixedRequest) (*MarkFixedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkFixed not implemented")
}
func (UnimplementedIssuesServiceServer) MarkExpected(context.Context, *MarkExpectedRequest) (*MarkExpectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkExpected not implemented")
}
func (UnimplementedIssuesServiceServer) MarkNoActionNeeded(context.Context, *MarkNoActionNeededRequest) (*MarkNoActionNeededResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNoActionNeeded not implemented")
}
func (UnimplementedIssuesServiceServer) PostComment(context.Context, *PostCommentRequest) (*PostCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostComment not implemented")
}
func (UnimplementedIssuesServiceServer) mustEmbedUnimplementedIssuesServiceServer() {}
func (UnimplementedIssuesServiceServer) testEmbeddedByValue()                       {}

// UnsafeIssuesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IssuesServiceServer will
// result in compilation errors.
type UnsafeIssuesServiceServer interface {
	mustEmbedUnimplementedIssuesServiceServer()
}

func RegisterIssuesServiceServer(s grpc.ServiceRegistrar, srv IssuesServiceServer) {
	// If the following call pancis, it indicates UnimplementedIssuesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IssuesService_ServiceDesc, srv)
}

func _IssuesService_MarkInvestigating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkInvestigatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServiceServer).MarkInvestigating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssuesService_MarkInvestigating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServiceServer).MarkInvestigating(ctx, req.(*MarkInvestigatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuesService_MarkFixed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkFixedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServiceServer).MarkFixed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssuesService_MarkFixed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServiceServer).MarkFixed(ctx, req.(*MarkFixedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuesService_MarkExpected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkExpectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServiceServer).MarkExpected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssuesService_MarkExpected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServiceServer).MarkExpected(ctx, req.(*MarkExpectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuesService_MarkNoActionNeeded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkNoActionNeededRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServiceServer).MarkNoActionNeeded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssuesService_MarkNoActionNeeded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServiceServer).MarkNoActionNeeded(ctx, req.(*MarkNoActionNeededRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuesService_PostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServiceServer).PostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssuesService_PostComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServiceServer).PostComment(ctx, req.(*PostCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IssuesService_ServiceDesc is the grpc.ServiceDesc for IssuesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IssuesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synq.issues.issues.v1.IssuesService",
	HandlerType: (*IssuesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MarkInvestigating",
			Handler:    _IssuesService_MarkInvestigating_Handler,
		},
		{
			MethodName: "MarkFixed",
			Handler:    _IssuesService_MarkFixed_Handler,
		},
		{
			MethodName: "MarkExpected",
			Handler:    _IssuesService_MarkExpected_Handler,
		},
		{
			MethodName: "MarkNoActionNeeded",
			Handler:    _IssuesService_MarkNoActionNeeded_Handler,
		},
		{
			MethodName: "PostComment",
			Handler:    _IssuesService_PostComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synq/issues/issues/v1/issues_service.proto",
}
