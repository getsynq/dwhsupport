// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: synq/agent/dwh/v1/dwh_agent_config.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Config represents the main configuration for the DWH agent
type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Agent configuration
	Agent *Config_Agent `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	// SYNQ platform configuration
	Synq *Config_SYNQ `protobuf:"bytes,2,opt,name=synq,proto3" json:"synq,omitempty"`
	// Map of connection configurations
	Connections   map[string]*Config_Connection `protobuf:"bytes,3,rep,name=connections,proto3" json:"connections,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetAgent() *Config_Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *Config) GetSynq() *Config_SYNQ {
	if x != nil {
		return x.Synq
	}
	return nil
}

func (x *Config) GetConnections() map[string]*Config_Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

// Agent contains metadata about this agent instance
type Config_Agent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the agent instance
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Tags to categorize and organize the agent
	Tags          []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Agent) Reset() {
	*x = Config_Agent{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Agent) ProtoMessage() {}

func (x *Config_Agent) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Agent.ProtoReflect.Descriptor instead.
func (*Config_Agent) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Config_Agent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config_Agent) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// SYNQ contains authentication and connection details for the SYNQ platform
type Config_SYNQ struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Client ID for OAuth authentication
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Client secret for OAuth authentication
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// SYNQ API endpoint (host:port)
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// OAuth authentication URL
	OauthUrl      string `protobuf:"bytes,4,opt,name=oauth_url,json=oauthUrl,proto3" json:"oauth_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_SYNQ) Reset() {
	*x = Config_SYNQ{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_SYNQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_SYNQ) ProtoMessage() {}

func (x *Config_SYNQ) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_SYNQ.ProtoReflect.Descriptor instead.
func (*Config_SYNQ) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Config_SYNQ) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Config_SYNQ) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *Config_SYNQ) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Config_SYNQ) GetOauthUrl() string {
	if x != nil {
		return x.OauthUrl
	}
	return ""
}

// Connection represents a database connection configuration
type Config_Connection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the connection
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of database connection
	Snowflake     *Config_Connection_Snowflake `protobuf:"bytes,2,opt,name=snowflake,proto3" json:"snowflake,omitempty"`
	Bigquery      *Config_Connection_BigQuery  `protobuf:"bytes,3,opt,name=bigquery,proto3" json:"bigquery,omitempty"`
	Postgres      *Config_Connection_Postgres  `protobuf:"bytes,4,opt,name=postgres,proto3" json:"postgres,omitempty"`
	Redshift      *Config_Connection_Redshift  `protobuf:"bytes,5,opt,name=redshift,proto3" json:"redshift,omitempty"`
	Mysql         *Config_Connection_MySQL     `protobuf:"bytes,6,opt,name=mysql,proto3" json:"mysql,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Connection) Reset() {
	*x = Config_Connection{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Connection) ProtoMessage() {}

func (x *Config_Connection) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Connection.ProtoReflect.Descriptor instead.
func (*Config_Connection) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Config_Connection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config_Connection) GetSnowflake() *Config_Connection_Snowflake {
	if x != nil {
		return x.Snowflake
	}
	return nil
}

func (x *Config_Connection) GetBigquery() *Config_Connection_BigQuery {
	if x != nil {
		return x.Bigquery
	}
	return nil
}

func (x *Config_Connection) GetPostgres() *Config_Connection_Postgres {
	if x != nil {
		return x.Postgres
	}
	return nil
}

func (x *Config_Connection) GetRedshift() *Config_Connection_Redshift {
	if x != nil {
		return x.Redshift
	}
	return nil
}

func (x *Config_Connection) GetMysql() *Config_Connection_MySQL {
	if x != nil {
		return x.Mysql
	}
	return nil
}

// Snowflake specific configuration
type Config_Connection_Snowflake struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Username for authentication
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password for authentication
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Snowflake account identifier
	Account string `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	// Virtual warehouse to use
	Warehouse string `protobuf:"bytes,4,opt,name=warehouse,proto3" json:"warehouse,omitempty"`
	// Role to assume
	Role string `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	// Database to connect to
	Databases     []string `protobuf:"bytes,6,rep,name=databases,proto3" json:"databases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Connection_Snowflake) Reset() {
	*x = Config_Connection_Snowflake{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Connection_Snowflake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Connection_Snowflake) ProtoMessage() {}

func (x *Config_Connection_Snowflake) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Connection_Snowflake.ProtoReflect.Descriptor instead.
func (*Config_Connection_Snowflake) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Config_Connection_Snowflake) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Config_Connection_Snowflake) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Config_Connection_Snowflake) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Config_Connection_Snowflake) GetWarehouse() string {
	if x != nil {
		return x.Warehouse
	}
	return ""
}

func (x *Config_Connection_Snowflake) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Config_Connection_Snowflake) GetDatabases() []string {
	if x != nil {
		return x.Databases
	}
	return nil
}

// BigQuery specific configuration
type Config_Connection_BigQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GCP project ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Service account key JSON
	ServiceAccountKey string `protobuf:"bytes,2,opt,name=service_account_key,json=serviceAccountKey,proto3" json:"service_account_key,omitempty"`
	// Service account key JSON
	ServiceAccountKeyFile string `protobuf:"bytes,3,opt,name=service_account_key_file,json=serviceAccountKeyFile,proto3" json:"service_account_key_file,omitempty"`
	// Region for BigQuery resources
	Region        string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Connection_BigQuery) Reset() {
	*x = Config_Connection_BigQuery{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Connection_BigQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Connection_BigQuery) ProtoMessage() {}

func (x *Config_Connection_BigQuery) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Connection_BigQuery.ProtoReflect.Descriptor instead.
func (*Config_Connection_BigQuery) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *Config_Connection_BigQuery) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Config_Connection_BigQuery) GetServiceAccountKey() string {
	if x != nil {
		return x.ServiceAccountKey
	}
	return ""
}

func (x *Config_Connection_BigQuery) GetServiceAccountKeyFile() string {
	if x != nil {
		return x.ServiceAccountKeyFile
	}
	return ""
}

func (x *Config_Connection_BigQuery) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// Postgres specific configuration
type Config_Connection_Postgres struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host address
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Port number
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Database name
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// Username for authentication
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// Password for authentication
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// Whether to allow insecure connections
	AllowInsecure bool `protobuf:"varint,6,opt,name=allow_insecure,json=allowInsecure,proto3" json:"allow_insecure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Connection_Postgres) Reset() {
	*x = Config_Connection_Postgres{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Connection_Postgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Connection_Postgres) ProtoMessage() {}

func (x *Config_Connection_Postgres) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Connection_Postgres.ProtoReflect.Descriptor instead.
func (*Config_Connection_Postgres) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (x *Config_Connection_Postgres) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Config_Connection_Postgres) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Config_Connection_Postgres) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Config_Connection_Postgres) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Config_Connection_Postgres) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Config_Connection_Postgres) GetAllowInsecure() bool {
	if x != nil {
		return x.AllowInsecure
	}
	return false
}

// Redshift specific configuration
type Config_Connection_Redshift struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host address
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Port number
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Database name
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// Username for authentication
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// Password for authentication
	Password      string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Connection_Redshift) Reset() {
	*x = Config_Connection_Redshift{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Connection_Redshift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Connection_Redshift) ProtoMessage() {}

func (x *Config_Connection_Redshift) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Connection_Redshift.ProtoReflect.Descriptor instead.
func (*Config_Connection_Redshift) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{0, 2, 3}
}

func (x *Config_Connection_Redshift) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Config_Connection_Redshift) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Config_Connection_Redshift) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Config_Connection_Redshift) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Config_Connection_Redshift) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// MySQL specific configuration
type Config_Connection_MySQL struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host address
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Port number
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Database name
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// Username for authentication
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// Password for authentication
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// Whether to use SSL for connection
	UseSsl bool `protobuf:"varint,6,opt,name=use_ssl,json=useSsl,proto3" json:"use_ssl,omitempty"`
	// Additional connection parameters
	Params        map[string]string `protobuf:"bytes,7,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Connection_MySQL) Reset() {
	*x = Config_Connection_MySQL{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Connection_MySQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Connection_MySQL) ProtoMessage() {}

func (x *Config_Connection_MySQL) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Connection_MySQL.ProtoReflect.Descriptor instead.
func (*Config_Connection_MySQL) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{0, 2, 4}
}

func (x *Config_Connection_MySQL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Config_Connection_MySQL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Config_Connection_MySQL) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Config_Connection_MySQL) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Config_Connection_MySQL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Config_Connection_MySQL) GetUseSsl() bool {
	if x != nil {
		return x.UseSsl
	}
	return false
}

func (x *Config_Connection_MySQL) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

var File_synq_agent_dwh_v1_dwh_agent_config_proto protoreflect.FileDescriptor

var file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDesc = string([]byte{
	0x0a, 0x28, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x77, 0x68,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x77, 0x68, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x79, 0x6e, 0x71,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x10, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04,
	0x73, 0x79, 0x6e, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x59, 0x4e, 0x51, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x71,
	0x12, 0x7c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x2e, 0xba, 0x48, 0x2b, 0xc8, 0x01, 0x01, 0x9a, 0x01, 0x25, 0x08, 0x01, 0x22, 0x1c,
	0x72, 0x1a, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x2a, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2f,
	0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a,
	0xaf, 0x01, 0x0a, 0x04, 0x53, 0x59, 0x4e, 0x51, 0x12, 0x25, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0xc8, 0x01, 0x01, 0x72, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0xc8, 0x01, 0x01, 0x72, 0x00,
	0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x27,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0x80, 0x02, 0x01, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8,
	0x01, 0x01, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x08, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x55, 0x72,
	0x6c, 0x1a, 0xb1, 0x0c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x09,
	0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x52,
	0x09, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x79, 0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x12, 0x49, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x52, 0x08, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x6d,
	0x79, 0x73, 0x71, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x52, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x1a, 0xd1, 0x01,
	0x0a, 0x09, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x73, 0x1a, 0xc2, 0x01, 0x0a, 0x08, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a,
	0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x1a, 0xe1, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xc8, 0x01, 0x00, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x20,
	0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x1a, 0xba, 0x01, 0x0a, 0x08, 0x52,
	0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xc8, 0x01, 0x01, 0x1a, 0x06, 0x18,
	0xff, 0xff, 0x03, 0x20, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0xdb, 0x02, 0x0a, 0x05, 0x4d, 0x79, 0x53, 0x51,
	0x4c, 0x12, 0x1e, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0e, 0xba, 0x48, 0x0b, 0xc8, 0x01, 0x01, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x20, 0x00, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x73, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x53, 0x73, 0x6c, 0x12, 0x4e, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0xb8, 0x01, 0x0a, 0x15,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64,
	0x77, 0x68, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x44, 0x77, 0x68, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x23, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x79, 0x6e, 0x71,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x77, 0x68, 0x2f, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x53, 0x41, 0x44, 0xaa, 0x02, 0x11, 0x53, 0x79, 0x6e, 0x71, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x77, 0x68, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x11, 0x53, 0x79,
	0x6e, 0x71, 0x5c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x5c, 0x44, 0x77, 0x68, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x1d, 0x53, 0x79, 0x6e, 0x71, 0x5c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x5c, 0x44, 0x77, 0x68,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x14, 0x53, 0x79, 0x6e, 0x71, 0x3a, 0x3a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x44,
	0x77, 0x68, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescOnce sync.Once
	file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescData []byte
)

func file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP() []byte {
	file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescOnce.Do(func() {
		file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDesc), len(file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDesc)))
	})
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescData
}

var file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_synq_agent_dwh_v1_dwh_agent_config_proto_goTypes = []any{
	(*Config)(nil),                      // 0: synq.agent.dwh.v1.Config
	(*Config_Agent)(nil),                // 1: synq.agent.dwh.v1.Config.Agent
	(*Config_SYNQ)(nil),                 // 2: synq.agent.dwh.v1.Config.SYNQ
	(*Config_Connection)(nil),           // 3: synq.agent.dwh.v1.Config.Connection
	nil,                                 // 4: synq.agent.dwh.v1.Config.ConnectionsEntry
	(*Config_Connection_Snowflake)(nil), // 5: synq.agent.dwh.v1.Config.Connection.Snowflake
	(*Config_Connection_BigQuery)(nil),  // 6: synq.agent.dwh.v1.Config.Connection.BigQuery
	(*Config_Connection_Postgres)(nil),  // 7: synq.agent.dwh.v1.Config.Connection.Postgres
	(*Config_Connection_Redshift)(nil),  // 8: synq.agent.dwh.v1.Config.Connection.Redshift
	(*Config_Connection_MySQL)(nil),     // 9: synq.agent.dwh.v1.Config.Connection.MySQL
	nil,                                 // 10: synq.agent.dwh.v1.Config.Connection.MySQL.ParamsEntry
}
var file_synq_agent_dwh_v1_dwh_agent_config_proto_depIdxs = []int32{
	1,  // 0: synq.agent.dwh.v1.Config.agent:type_name -> synq.agent.dwh.v1.Config.Agent
	2,  // 1: synq.agent.dwh.v1.Config.synq:type_name -> synq.agent.dwh.v1.Config.SYNQ
	4,  // 2: synq.agent.dwh.v1.Config.connections:type_name -> synq.agent.dwh.v1.Config.ConnectionsEntry
	5,  // 3: synq.agent.dwh.v1.Config.Connection.snowflake:type_name -> synq.agent.dwh.v1.Config.Connection.Snowflake
	6,  // 4: synq.agent.dwh.v1.Config.Connection.bigquery:type_name -> synq.agent.dwh.v1.Config.Connection.BigQuery
	7,  // 5: synq.agent.dwh.v1.Config.Connection.postgres:type_name -> synq.agent.dwh.v1.Config.Connection.Postgres
	8,  // 6: synq.agent.dwh.v1.Config.Connection.redshift:type_name -> synq.agent.dwh.v1.Config.Connection.Redshift
	9,  // 7: synq.agent.dwh.v1.Config.Connection.mysql:type_name -> synq.agent.dwh.v1.Config.Connection.MySQL
	3,  // 8: synq.agent.dwh.v1.Config.ConnectionsEntry.value:type_name -> synq.agent.dwh.v1.Config.Connection
	10, // 9: synq.agent.dwh.v1.Config.Connection.MySQL.params:type_name -> synq.agent.dwh.v1.Config.Connection.MySQL.ParamsEntry
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_synq_agent_dwh_v1_dwh_agent_config_proto_init() }
func file_synq_agent_dwh_v1_dwh_agent_config_proto_init() {
	if File_synq_agent_dwh_v1_dwh_agent_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDesc), len(file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_synq_agent_dwh_v1_dwh_agent_config_proto_goTypes,
		DependencyIndexes: file_synq_agent_dwh_v1_dwh_agent_config_proto_depIdxs,
		MessageInfos:      file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes,
	}.Build()
	File_synq_agent_dwh_v1_dwh_agent_config_proto = out.File
	file_synq_agent_dwh_v1_dwh_agent_config_proto_goTypes = nil
	file_synq_agent_dwh_v1_dwh_agent_config_proto_depIdxs = nil
}
