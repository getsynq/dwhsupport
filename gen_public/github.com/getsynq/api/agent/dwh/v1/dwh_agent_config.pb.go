// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: synq/agent/dwh/v1/dwh_agent_config.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config_Agent_LogLevel int32

const (
	// Defaults to info
	Config_Agent_LOG_LEVEL_UNSPECIFIED Config_Agent_LogLevel = 0
	Config_Agent_LOG_LEVEL_TRACE       Config_Agent_LogLevel = 1
	Config_Agent_LOG_LEVEL_DEBUG       Config_Agent_LogLevel = 2
	Config_Agent_LOG_LEVEL_INFO        Config_Agent_LogLevel = 3
	Config_Agent_LOG_LEVEL_WARN        Config_Agent_LogLevel = 4
	Config_Agent_LOG_LEVEL_ERROR       Config_Agent_LogLevel = 5
)

// Enum value maps for Config_Agent_LogLevel.
var (
	Config_Agent_LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_UNSPECIFIED",
		1: "LOG_LEVEL_TRACE",
		2: "LOG_LEVEL_DEBUG",
		3: "LOG_LEVEL_INFO",
		4: "LOG_LEVEL_WARN",
		5: "LOG_LEVEL_ERROR",
	}
	Config_Agent_LogLevel_value = map[string]int32{
		"LOG_LEVEL_UNSPECIFIED": 0,
		"LOG_LEVEL_TRACE":       1,
		"LOG_LEVEL_DEBUG":       2,
		"LOG_LEVEL_INFO":        3,
		"LOG_LEVEL_WARN":        4,
		"LOG_LEVEL_ERROR":       5,
	}
)

func (x Config_Agent_LogLevel) Enum() *Config_Agent_LogLevel {
	p := new(Config_Agent_LogLevel)
	*p = x
	return p
}

func (x Config_Agent_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Config_Agent_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_enumTypes[0].Descriptor()
}

func (Config_Agent_LogLevel) Type() protoreflect.EnumType {
	return &file_synq_agent_dwh_v1_dwh_agent_config_proto_enumTypes[0]
}

func (x Config_Agent_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Config_Agent_LogLevel.Descriptor instead.
func (Config_Agent_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{7, 0, 0}
}

// BigQuery specific configuration
type BigQueryConf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GCP project ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Service account key JSON
	ServiceAccountKey string `protobuf:"bytes,2,opt,name=service_account_key,json=serviceAccountKey,proto3" json:"service_account_key,omitempty"`
	// Service account key JSON
	ServiceAccountKeyFile string `protobuf:"bytes,3,opt,name=service_account_key_file,json=serviceAccountKeyFile,proto3" json:"service_account_key_file,omitempty"`
	// Region for BigQuery resources
	Region        string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BigQueryConf) Reset() {
	*x = BigQueryConf{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigQueryConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQueryConf) ProtoMessage() {}

func (x *BigQueryConf) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQueryConf.ProtoReflect.Descriptor instead.
func (*BigQueryConf) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{0}
}

func (x *BigQueryConf) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BigQueryConf) GetServiceAccountKey() string {
	if x != nil {
		return x.ServiceAccountKey
	}
	return ""
}

func (x *BigQueryConf) GetServiceAccountKeyFile() string {
	if x != nil {
		return x.ServiceAccountKeyFile
	}
	return ""
}

func (x *BigQueryConf) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type ClickhouseConf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host address
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Port number
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Database name
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// Username for authentication
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// Password for authentication
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// Whether to use disable SSL for connection
	AllowInsecure bool `protobuf:"varint,6,opt,name=allow_insecure,json=allowInsecure,proto3" json:"allow_insecure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConf) Reset() {
	*x = ClickhouseConf{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConf) ProtoMessage() {}

func (x *ClickhouseConf) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConf.ProtoReflect.Descriptor instead.
func (*ClickhouseConf) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{1}
}

func (x *ClickhouseConf) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickhouseConf) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickhouseConf) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ClickhouseConf) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ClickhouseConf) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickhouseConf) GetAllowInsecure() bool {
	if x != nil {
		return x.AllowInsecure
	}
	return false
}

type DatabricksConf struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	WorkspaceUrl               string                 `protobuf:"bytes,1,opt,name=workspace_url,json=workspaceUrl,proto3" json:"workspace_url,omitempty"`
	AuthToken                  *string                `protobuf:"bytes,2,opt,name=auth_token,json=authToken,proto3,oneof" json:"auth_token,omitempty"`
	AuthClient                 *string                `protobuf:"bytes,3,opt,name=auth_client,json=authClient,proto3,oneof" json:"auth_client,omitempty"`
	AuthSecret                 *string                `protobuf:"bytes,4,opt,name=auth_secret,json=authSecret,proto3,oneof" json:"auth_secret,omitempty"`
	Warehouse                  *string                `protobuf:"bytes,5,opt,name=warehouse,proto3,oneof" json:"warehouse,omitempty"`
	RefreshTableMetrics        bool                   `protobuf:"varint,6,opt,name=refresh_table_metrics,json=refreshTableMetrics,proto3" json:"refresh_table_metrics,omitempty"`
	RefreshTableMetricsUseScan bool                   `protobuf:"varint,7,opt,name=refresh_table_metrics_use_scan,json=refreshTableMetricsUseScan,proto3" json:"refresh_table_metrics_use_scan,omitempty"`
	FetchTableTags             bool                   `protobuf:"varint,8,opt,name=fetch_table_tags,json=fetchTableTags,proto3" json:"fetch_table_tags,omitempty"`
	UseShowCreateTable         bool                   `protobuf:"varint,9,opt,name=use_show_create_table,json=useShowCreateTable,proto3" json:"use_show_create_table,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *DatabricksConf) Reset() {
	*x = DatabricksConf{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabricksConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabricksConf) ProtoMessage() {}

func (x *DatabricksConf) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabricksConf.ProtoReflect.Descriptor instead.
func (*DatabricksConf) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{2}
}

func (x *DatabricksConf) GetWorkspaceUrl() string {
	if x != nil {
		return x.WorkspaceUrl
	}
	return ""
}

func (x *DatabricksConf) GetAuthToken() string {
	if x != nil && x.AuthToken != nil {
		return *x.AuthToken
	}
	return ""
}

func (x *DatabricksConf) GetAuthClient() string {
	if x != nil && x.AuthClient != nil {
		return *x.AuthClient
	}
	return ""
}

func (x *DatabricksConf) GetAuthSecret() string {
	if x != nil && x.AuthSecret != nil {
		return *x.AuthSecret
	}
	return ""
}

func (x *DatabricksConf) GetWarehouse() string {
	if x != nil && x.Warehouse != nil {
		return *x.Warehouse
	}
	return ""
}

func (x *DatabricksConf) GetRefreshTableMetrics() bool {
	if x != nil {
		return x.RefreshTableMetrics
	}
	return false
}

func (x *DatabricksConf) GetRefreshTableMetricsUseScan() bool {
	if x != nil {
		return x.RefreshTableMetricsUseScan
	}
	return false
}

func (x *DatabricksConf) GetFetchTableTags() bool {
	if x != nil {
		return x.FetchTableTags
	}
	return false
}

func (x *DatabricksConf) GetUseShowCreateTable() bool {
	if x != nil {
		return x.UseShowCreateTable
	}
	return false
}

// MySQL specific configuration
type MySQLConf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host address
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Port number
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Database name
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// Username for authentication
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// Password for authentication
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// Whether to allow insecure connections
	AllowInsecure bool `protobuf:"varint,6,opt,name=allow_insecure,json=allowInsecure,proto3" json:"allow_insecure,omitempty"`
	// Additional connection parameters
	Params        map[string]string `protobuf:"bytes,7,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MySQLConf) Reset() {
	*x = MySQLConf{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLConf) ProtoMessage() {}

func (x *MySQLConf) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLConf.ProtoReflect.Descriptor instead.
func (*MySQLConf) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{3}
}

func (x *MySQLConf) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MySQLConf) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MySQLConf) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MySQLConf) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MySQLConf) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MySQLConf) GetAllowInsecure() bool {
	if x != nil {
		return x.AllowInsecure
	}
	return false
}

func (x *MySQLConf) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// Postgres specific configuration
type PostgresConf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host address
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Port number
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Database name
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// Username for authentication
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// Password for authentication
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// Whether to allow insecure connections
	AllowInsecure bool `protobuf:"varint,6,opt,name=allow_insecure,json=allowInsecure,proto3" json:"allow_insecure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgresConf) Reset() {
	*x = PostgresConf{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresConf) ProtoMessage() {}

func (x *PostgresConf) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresConf.ProtoReflect.Descriptor instead.
func (*PostgresConf) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{4}
}

func (x *PostgresConf) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostgresConf) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PostgresConf) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *PostgresConf) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PostgresConf) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostgresConf) GetAllowInsecure() bool {
	if x != nil {
		return x.AllowInsecure
	}
	return false
}

// Redshift specific configuration
type RedshiftConf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host address
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Port number
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Database name
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// Username for authentication
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// Password for authentication
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// Estimate table freshness based on query logs
	FreshnessFromQueryLogs bool `protobuf:"varint,6,opt,name=freshness_from_query_logs,json=freshnessFromQueryLogs,proto3" json:"freshness_from_query_logs,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RedshiftConf) Reset() {
	*x = RedshiftConf{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedshiftConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedshiftConf) ProtoMessage() {}

func (x *RedshiftConf) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedshiftConf.ProtoReflect.Descriptor instead.
func (*RedshiftConf) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{5}
}

func (x *RedshiftConf) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RedshiftConf) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RedshiftConf) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *RedshiftConf) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RedshiftConf) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RedshiftConf) GetFreshnessFromQueryLogs() bool {
	if x != nil {
		return x.FreshnessFromQueryLogs
	}
	return false
}

// Snowflake specific configuration
type SnowflakeConf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Snowflake account identifier
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// Virtual warehouse to use
	Warehouse string `protobuf:"bytes,2,opt,name=warehouse,proto3" json:"warehouse,omitempty"`
	// Role to assume
	Role string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	// Username for authentication
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// Password for authentication
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// Content of Private ey
	PrivateKey string `protobuf:"bytes,6,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Database to connect to
	Databases []string `protobuf:"bytes,7,rep,name=databases,proto3" json:"databases,omitempty"`
	// Use GET_DDL to determine queries used for table/view creation
	UseGetDdl     bool `protobuf:"varint,8,opt,name=use_get_ddl,json=useGetDdl,proto3" json:"use_get_ddl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnowflakeConf) Reset() {
	*x = SnowflakeConf{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnowflakeConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeConf) ProtoMessage() {}

func (x *SnowflakeConf) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeConf.ProtoReflect.Descriptor instead.
func (*SnowflakeConf) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{6}
}

func (x *SnowflakeConf) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SnowflakeConf) GetWarehouse() string {
	if x != nil {
		return x.Warehouse
	}
	return ""
}

func (x *SnowflakeConf) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *SnowflakeConf) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SnowflakeConf) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SnowflakeConf) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *SnowflakeConf) GetDatabases() []string {
	if x != nil {
		return x.Databases
	}
	return nil
}

func (x *SnowflakeConf) GetUseGetDdl() bool {
	if x != nil {
		return x.UseGetDdl
	}
	return false
}

// Config represents the main configuration for the DWH agent
type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Agent configuration
	Agent *Config_Agent `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	// SYNQ platform configuration
	Synq *Config_SYNQ `protobuf:"bytes,2,opt,name=synq,proto3" json:"synq,omitempty"`
	// Map of connection configurations
	Connections   map[string]*Config_Connection `protobuf:"bytes,3,rep,name=connections,proto3" json:"connections,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{7}
}

func (x *Config) GetAgent() *Config_Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *Config) GetSynq() *Config_SYNQ {
	if x != nil {
		return x.Synq
	}
	return nil
}

func (x *Config) GetConnections() map[string]*Config_Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

// Agent contains metadata about this agent instance
type Config_Agent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the agent instance
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Tags to categorize and organize the agent
	Tags            []string              `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	LogLevel        Config_Agent_LogLevel `protobuf:"varint,3,opt,name=log_level,json=logLevel,proto3,enum=synq.agent.dwh.v1.Config_Agent_LogLevel" json:"log_level,omitempty"`
	LogJson         *bool                 `protobuf:"varint,4,opt,name=log_json,json=logJson,proto3,oneof" json:"log_json,omitempty"`
	LogReportCaller *bool                 `protobuf:"varint,5,opt,name=log_report_caller,json=logReportCaller,proto3,oneof" json:"log_report_caller,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Config_Agent) Reset() {
	*x = Config_Agent{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Agent) ProtoMessage() {}

func (x *Config_Agent) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Agent.ProtoReflect.Descriptor instead.
func (*Config_Agent) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Config_Agent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config_Agent) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Config_Agent) GetLogLevel() Config_Agent_LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return Config_Agent_LOG_LEVEL_UNSPECIFIED
}

func (x *Config_Agent) GetLogJson() bool {
	if x != nil && x.LogJson != nil {
		return *x.LogJson
	}
	return false
}

func (x *Config_Agent) GetLogReportCaller() bool {
	if x != nil && x.LogReportCaller != nil {
		return *x.LogReportCaller
	}
	return false
}

// SYNQ contains authentication and connection details for the SYNQ platform
type Config_SYNQ struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Client ID for OAuth authentication
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Client secret for OAuth authentication
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// SYNQ API endpoint (host:port)
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// OAuth authentication URL
	OauthUrl      string `protobuf:"bytes,4,opt,name=oauth_url,json=oauthUrl,proto3" json:"oauth_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_SYNQ) Reset() {
	*x = Config_SYNQ{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_SYNQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_SYNQ) ProtoMessage() {}

func (x *Config_SYNQ) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_SYNQ.ProtoReflect.Descriptor instead.
func (*Config_SYNQ) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Config_SYNQ) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Config_SYNQ) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *Config_SYNQ) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Config_SYNQ) GetOauthUrl() string {
	if x != nil {
		return x.OauthUrl
	}
	return ""
}

// Connection represents a database connection configuration
type Config_Connection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the connection
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// How many queries to DWH can be executed in parallel, defaults to 2
	Parallelism int32 `protobuf:"varint,2,opt,name=parallelism,proto3" json:"parallelism,omitempty"`
	// Type of database connection
	//
	// Types that are valid to be assigned to Config:
	//
	//	*Config_Connection_Bigquery
	//	*Config_Connection_Clickhouse
	//	*Config_Connection_Databricks
	//	*Config_Connection_Mysql
	//	*Config_Connection_Postgres
	//	*Config_Connection_Redshift
	//	*Config_Connection_Snowflake
	Config        isConfig_Connection_Config `protobuf_oneof:"config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Connection) Reset() {
	*x = Config_Connection{}
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Connection) ProtoMessage() {}

func (x *Config_Connection) ProtoReflect() protoreflect.Message {
	mi := &file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Connection.ProtoReflect.Descriptor instead.
func (*Config_Connection) Descriptor() ([]byte, []int) {
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP(), []int{7, 2}
}

func (x *Config_Connection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config_Connection) GetParallelism() int32 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

func (x *Config_Connection) GetConfig() isConfig_Connection_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Config_Connection) GetBigquery() *BigQueryConf {
	if x != nil {
		if x, ok := x.Config.(*Config_Connection_Bigquery); ok {
			return x.Bigquery
		}
	}
	return nil
}

func (x *Config_Connection) GetClickhouse() *ClickhouseConf {
	if x != nil {
		if x, ok := x.Config.(*Config_Connection_Clickhouse); ok {
			return x.Clickhouse
		}
	}
	return nil
}

func (x *Config_Connection) GetDatabricks() *DatabricksConf {
	if x != nil {
		if x, ok := x.Config.(*Config_Connection_Databricks); ok {
			return x.Databricks
		}
	}
	return nil
}

func (x *Config_Connection) GetMysql() *MySQLConf {
	if x != nil {
		if x, ok := x.Config.(*Config_Connection_Mysql); ok {
			return x.Mysql
		}
	}
	return nil
}

func (x *Config_Connection) GetPostgres() *PostgresConf {
	if x != nil {
		if x, ok := x.Config.(*Config_Connection_Postgres); ok {
			return x.Postgres
		}
	}
	return nil
}

func (x *Config_Connection) GetRedshift() *RedshiftConf {
	if x != nil {
		if x, ok := x.Config.(*Config_Connection_Redshift); ok {
			return x.Redshift
		}
	}
	return nil
}

func (x *Config_Connection) GetSnowflake() *SnowflakeConf {
	if x != nil {
		if x, ok := x.Config.(*Config_Connection_Snowflake); ok {
			return x.Snowflake
		}
	}
	return nil
}

type isConfig_Connection_Config interface {
	isConfig_Connection_Config()
}

type Config_Connection_Bigquery struct {
	Bigquery *BigQueryConf `protobuf:"bytes,50,opt,name=bigquery,proto3,oneof"`
}

type Config_Connection_Clickhouse struct {
	Clickhouse *ClickhouseConf `protobuf:"bytes,51,opt,name=clickhouse,proto3,oneof"`
}

type Config_Connection_Databricks struct {
	Databricks *DatabricksConf `protobuf:"bytes,52,opt,name=databricks,proto3,oneof"`
}

type Config_Connection_Mysql struct {
	Mysql *MySQLConf `protobuf:"bytes,53,opt,name=mysql,proto3,oneof"`
}

type Config_Connection_Postgres struct {
	Postgres *PostgresConf `protobuf:"bytes,54,opt,name=postgres,proto3,oneof"`
}

type Config_Connection_Redshift struct {
	Redshift *RedshiftConf `protobuf:"bytes,55,opt,name=redshift,proto3,oneof"`
}

type Config_Connection_Snowflake struct {
	Snowflake *SnowflakeConf `protobuf:"bytes,56,opt,name=snowflake,proto3,oneof"`
}

func (*Config_Connection_Bigquery) isConfig_Connection_Config() {}

func (*Config_Connection_Clickhouse) isConfig_Connection_Config() {}

func (*Config_Connection_Databricks) isConfig_Connection_Config() {}

func (*Config_Connection_Mysql) isConfig_Connection_Config() {}

func (*Config_Connection_Postgres) isConfig_Connection_Config() {}

func (*Config_Connection_Redshift) isConfig_Connection_Config() {}

func (*Config_Connection_Snowflake) isConfig_Connection_Config() {}

var File_synq_agent_dwh_v1_dwh_agent_config_proto protoreflect.FileDescriptor

var file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDesc = string([]byte{
	0x0a, 0x28, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x77, 0x68,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x77, 0x68, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x79, 0x6e, 0x71,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x01, 0x0a, 0x0c, 0x42,
	0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x25, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xba, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xba, 0x48, 0x00, 0x52, 0x15,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x01,
	0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x1e, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e,
	0xba, 0x48, 0x0b, 0xc8, 0x01, 0x01, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x20, 0x00, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xba, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x22, 0xe7, 0x03, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x30, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x42, 0x0a, 0x1e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x63,
	0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x55, 0x73, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x31,
	0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75,
	0x73, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x22, 0xdf,
	0x02, 0x0a, 0x09, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1e, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8,
	0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xc8,
	0x01, 0x01, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x20, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x22, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e,
	0x66, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe5, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x1e, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0e, 0xba, 0x48, 0x0b, 0xc8, 0x01, 0x00, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x20, 0x00, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x64,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1e, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xc8, 0x01, 0x01, 0x1a,
	0x06, 0x18, 0xff, 0xff, 0x03, 0x20, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4c, 0x6f, 0x67, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x0d, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61,
	0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x20, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xba, 0x48,
	0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xba,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xba, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x64, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x47, 0x65, 0x74, 0x44, 0x64, 0x6c,
	0x22, 0xad, 0x0b, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x59, 0x4e, 0x51,
	0x52, 0x04, 0x73, 0x79, 0x6e, 0x71, 0x12, 0x7c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x79,
	0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2e, 0xba, 0x48, 0x2b, 0xc8, 0x01, 0x01, 0x9a,
	0x01, 0x25, 0x08, 0x01, 0x22, 0x1c, 0x72, 0x1a, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d,
	0x2a, 0x24, 0x2a, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xf9, 0x02, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x79, 0x6e, 0x71,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4a, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x11, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x88, 0x01, 0x01, 0x22, 0x8c,
	0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x4c,
	0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c,
	0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x1a, 0xaf, 0x01, 0x0a, 0x04, 0x53, 0x59, 0x4e, 0x51, 0x12, 0x25, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0xc8, 0x01, 0x01, 0x72, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0xc8, 0x01, 0x01, 0x72,
	0x00, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x27, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0x80, 0x02, 0x01, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08,
	0xc8, 0x01, 0x01, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x08, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x55,
	0x72, 0x6c, 0x1a, 0xa5, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x08, 0x28, 0x01, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x3d, 0x0a, 0x08, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x79, 0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x48, 0x00, 0x52,
	0x08, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x79, 0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x66,
	0x48, 0x00, 0x52, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79,
	0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x48, 0x00, 0x52, 0x08, 0x72,
	0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x66,
	0x6c, 0x61, 0x6b, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x42, 0x0f, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x1a, 0x64, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0xb8, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x64, 0x77, 0x68, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x44, 0x77, 0x68, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65,
	0x74, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x64, 0x77, 0x68, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x41, 0x44, 0xaa, 0x02, 0x11, 0x53,
	0x79, 0x6e, 0x71, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x77, 0x68, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x11, 0x53, 0x79, 0x6e, 0x71, 0x5c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x5c, 0x44, 0x77,
	0x68, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1d, 0x53, 0x79, 0x6e, 0x71, 0x5c, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x5c, 0x44, 0x77, 0x68, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x53, 0x79, 0x6e, 0x71, 0x3a, 0x3a, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x3a, 0x3a, 0x44, 0x77, 0x68, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescOnce sync.Once
	file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescData []byte
)

func file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescGZIP() []byte {
	file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescOnce.Do(func() {
		file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDesc), len(file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDesc)))
	})
	return file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDescData
}

var file_synq_agent_dwh_v1_dwh_agent_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_synq_agent_dwh_v1_dwh_agent_config_proto_goTypes = []any{
	(Config_Agent_LogLevel)(0), // 0: synq.agent.dwh.v1.Config.Agent.LogLevel
	(*BigQueryConf)(nil),       // 1: synq.agent.dwh.v1.BigQueryConf
	(*ClickhouseConf)(nil),     // 2: synq.agent.dwh.v1.ClickhouseConf
	(*DatabricksConf)(nil),     // 3: synq.agent.dwh.v1.DatabricksConf
	(*MySQLConf)(nil),          // 4: synq.agent.dwh.v1.MySQLConf
	(*PostgresConf)(nil),       // 5: synq.agent.dwh.v1.PostgresConf
	(*RedshiftConf)(nil),       // 6: synq.agent.dwh.v1.RedshiftConf
	(*SnowflakeConf)(nil),      // 7: synq.agent.dwh.v1.SnowflakeConf
	(*Config)(nil),             // 8: synq.agent.dwh.v1.Config
	nil,                        // 9: synq.agent.dwh.v1.MySQLConf.ParamsEntry
	(*Config_Agent)(nil),       // 10: synq.agent.dwh.v1.Config.Agent
	(*Config_SYNQ)(nil),        // 11: synq.agent.dwh.v1.Config.SYNQ
	(*Config_Connection)(nil),  // 12: synq.agent.dwh.v1.Config.Connection
	nil,                        // 13: synq.agent.dwh.v1.Config.ConnectionsEntry
}
var file_synq_agent_dwh_v1_dwh_agent_config_proto_depIdxs = []int32{
	9,  // 0: synq.agent.dwh.v1.MySQLConf.params:type_name -> synq.agent.dwh.v1.MySQLConf.ParamsEntry
	10, // 1: synq.agent.dwh.v1.Config.agent:type_name -> synq.agent.dwh.v1.Config.Agent
	11, // 2: synq.agent.dwh.v1.Config.synq:type_name -> synq.agent.dwh.v1.Config.SYNQ
	13, // 3: synq.agent.dwh.v1.Config.connections:type_name -> synq.agent.dwh.v1.Config.ConnectionsEntry
	0,  // 4: synq.agent.dwh.v1.Config.Agent.log_level:type_name -> synq.agent.dwh.v1.Config.Agent.LogLevel
	1,  // 5: synq.agent.dwh.v1.Config.Connection.bigquery:type_name -> synq.agent.dwh.v1.BigQueryConf
	2,  // 6: synq.agent.dwh.v1.Config.Connection.clickhouse:type_name -> synq.agent.dwh.v1.ClickhouseConf
	3,  // 7: synq.agent.dwh.v1.Config.Connection.databricks:type_name -> synq.agent.dwh.v1.DatabricksConf
	4,  // 8: synq.agent.dwh.v1.Config.Connection.mysql:type_name -> synq.agent.dwh.v1.MySQLConf
	5,  // 9: synq.agent.dwh.v1.Config.Connection.postgres:type_name -> synq.agent.dwh.v1.PostgresConf
	6,  // 10: synq.agent.dwh.v1.Config.Connection.redshift:type_name -> synq.agent.dwh.v1.RedshiftConf
	7,  // 11: synq.agent.dwh.v1.Config.Connection.snowflake:type_name -> synq.agent.dwh.v1.SnowflakeConf
	12, // 12: synq.agent.dwh.v1.Config.ConnectionsEntry.value:type_name -> synq.agent.dwh.v1.Config.Connection
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_synq_agent_dwh_v1_dwh_agent_config_proto_init() }
func file_synq_agent_dwh_v1_dwh_agent_config_proto_init() {
	if File_synq_agent_dwh_v1_dwh_agent_config_proto != nil {
		return
	}
	file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[2].OneofWrappers = []any{}
	file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[9].OneofWrappers = []any{}
	file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes[11].OneofWrappers = []any{
		(*Config_Connection_Bigquery)(nil),
		(*Config_Connection_Clickhouse)(nil),
		(*Config_Connection_Databricks)(nil),
		(*Config_Connection_Mysql)(nil),
		(*Config_Connection_Postgres)(nil),
		(*Config_Connection_Redshift)(nil),
		(*Config_Connection_Snowflake)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDesc), len(file_synq_agent_dwh_v1_dwh_agent_config_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_synq_agent_dwh_v1_dwh_agent_config_proto_goTypes,
		DependencyIndexes: file_synq_agent_dwh_v1_dwh_agent_config_proto_depIdxs,
		EnumInfos:         file_synq_agent_dwh_v1_dwh_agent_config_proto_enumTypes,
		MessageInfos:      file_synq_agent_dwh_v1_dwh_agent_config_proto_msgTypes,
	}.Build()
	File_synq_agent_dwh_v1_dwh_agent_config_proto = out.File
	file_synq_agent_dwh_v1_dwh_agent_config_proto_goTypes = nil
	file_synq_agent_dwh_v1_dwh_agent_config_proto_depIdxs = nil
}
