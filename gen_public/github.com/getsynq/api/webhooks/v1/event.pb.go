// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: synq/webhooks/v1/event.proto

package v1

import (
	v1 "github.com/getsynq/api/entities/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event_EventType int32

const (
	Event_EVENT_TYPE_UNSPECIFIED          Event_EventType = 0
	Event_EVENT_TYPE_PING                 Event_EventType = 10
	Event_EVENT_TYPE_ISSUE_CREATED        Event_EventType = 11
	Event_EVENT_TYPE_ISSUE_UPDATED        Event_EventType = 12
	Event_EVENT_TYPE_ISSUE_STATUS_UPDATED Event_EventType = 13
	Event_EVENT_TYPE_ISSUE_CLOSED         Event_EventType = 14
)

// Enum value maps for Event_EventType.
var (
	Event_EventType_name = map[int32]string{
		0:  "EVENT_TYPE_UNSPECIFIED",
		10: "EVENT_TYPE_PING",
		11: "EVENT_TYPE_ISSUE_CREATED",
		12: "EVENT_TYPE_ISSUE_UPDATED",
		13: "EVENT_TYPE_ISSUE_STATUS_UPDATED",
		14: "EVENT_TYPE_ISSUE_CLOSED",
	}
	Event_EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED":          0,
		"EVENT_TYPE_PING":                 10,
		"EVENT_TYPE_ISSUE_CREATED":        11,
		"EVENT_TYPE_ISSUE_UPDATED":        12,
		"EVENT_TYPE_ISSUE_STATUS_UPDATED": 13,
		"EVENT_TYPE_ISSUE_CLOSED":         14,
	}
)

func (x Event_EventType) Enum() *Event_EventType {
	p := new(Event_EventType)
	*p = x
	return p
}

func (x Event_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_synq_webhooks_v1_event_proto_enumTypes[0].Descriptor()
}

func (Event_EventType) Type() protoreflect.EnumType {
	return &file_synq_webhooks_v1_event_proto_enumTypes[0]
}

func (x Event_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_EventType.Descriptor instead.
func (Event_EventType) EnumDescriptor() ([]byte, []int) {
	return file_synq_webhooks_v1_event_proto_rawDescGZIP(), []int{0, 0}
}

type IssueSummary_IssueStatus int32

const (
	IssueSummary_ISSUE_STATUS_UNSPECIFIED      IssueSummary_IssueStatus = 0
	IssueSummary_ISSUE_STATUS_INVESTIGATING    IssueSummary_IssueStatus = 1
	IssueSummary_ISSUE_STATUS_EXPECTED         IssueSummary_IssueStatus = 2
	IssueSummary_ISSUE_STATUS_FIXED            IssueSummary_IssueStatus = 3
	IssueSummary_ISSUE_STATUS_NO_ACTION_NEEDED IssueSummary_IssueStatus = 4
)

// Enum value maps for IssueSummary_IssueStatus.
var (
	IssueSummary_IssueStatus_name = map[int32]string{
		0: "ISSUE_STATUS_UNSPECIFIED",
		1: "ISSUE_STATUS_INVESTIGATING",
		2: "ISSUE_STATUS_EXPECTED",
		3: "ISSUE_STATUS_FIXED",
		4: "ISSUE_STATUS_NO_ACTION_NEEDED",
	}
	IssueSummary_IssueStatus_value = map[string]int32{
		"ISSUE_STATUS_UNSPECIFIED":      0,
		"ISSUE_STATUS_INVESTIGATING":    1,
		"ISSUE_STATUS_EXPECTED":         2,
		"ISSUE_STATUS_FIXED":            3,
		"ISSUE_STATUS_NO_ACTION_NEEDED": 4,
	}
)

func (x IssueSummary_IssueStatus) Enum() *IssueSummary_IssueStatus {
	p := new(IssueSummary_IssueStatus)
	*p = x
	return p
}

func (x IssueSummary_IssueStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueSummary_IssueStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_synq_webhooks_v1_event_proto_enumTypes[1].Descriptor()
}

func (IssueSummary_IssueStatus) Type() protoreflect.EnumType {
	return &file_synq_webhooks_v1_event_proto_enumTypes[1]
}

func (x IssueSummary_IssueStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueSummary_IssueStatus.Descriptor instead.
func (IssueSummary_IssueStatus) EnumDescriptor() ([]byte, []int) {
	return file_synq_webhooks_v1_event_proto_rawDescGZIP(), []int{6, 0}
}

type Event struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Workspace string                 `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	EventId   string                 `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	EventType Event_EventType        `protobuf:"varint,4,opt,name=event_type,json=eventType,proto3,enum=synq.webhooks.v1.Event_EventType" json:"event_type,omitempty"`
	// Types that are valid to be assigned to Data:
	//
	//	*Event_Ping
	//	*Event_IssueCreated
	//	*Event_IssueUpdated
	//	*Event_IssueStatusUpdated
	//	*Event_IssueClosed
	Data          isEvent_Data `protobuf_oneof:"data"`
	Callbacks     []*Callback  `protobuf:"bytes,40,rep,name=callbacks,proto3" json:"callbacks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_synq_webhooks_v1_event_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *Event) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Event) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *Event) GetEventType() Event_EventType {
	if x != nil {
		return x.EventType
	}
	return Event_EVENT_TYPE_UNSPECIFIED
}

func (x *Event) GetData() isEvent_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Event) GetPing() *Ping {
	if x != nil {
		if x, ok := x.Data.(*Event_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *Event) GetIssueCreated() *IssueCreated {
	if x != nil {
		if x, ok := x.Data.(*Event_IssueCreated); ok {
			return x.IssueCreated
		}
	}
	return nil
}

func (x *Event) GetIssueUpdated() *IssueUpdated {
	if x != nil {
		if x, ok := x.Data.(*Event_IssueUpdated); ok {
			return x.IssueUpdated
		}
	}
	return nil
}

func (x *Event) GetIssueStatusUpdated() *IssueStatusUpdated {
	if x != nil {
		if x, ok := x.Data.(*Event_IssueStatusUpdated); ok {
			return x.IssueStatusUpdated
		}
	}
	return nil
}

func (x *Event) GetIssueClosed() *IssueClosed {
	if x != nil {
		if x, ok := x.Data.(*Event_IssueClosed); ok {
			return x.IssueClosed
		}
	}
	return nil
}

func (x *Event) GetCallbacks() []*Callback {
	if x != nil {
		return x.Callbacks
	}
	return nil
}

type isEvent_Data interface {
	isEvent_Data()
}

type Event_Ping struct {
	Ping *Ping `protobuf:"bytes,10,opt,name=ping,proto3,oneof"`
}

type Event_IssueCreated struct {
	IssueCreated *IssueCreated `protobuf:"bytes,11,opt,name=issue_created,json=issueCreated,proto3,oneof"`
}

type Event_IssueUpdated struct {
	IssueUpdated *IssueUpdated `protobuf:"bytes,12,opt,name=issue_updated,json=issueUpdated,proto3,oneof"`
}

type Event_IssueStatusUpdated struct {
	IssueStatusUpdated *IssueStatusUpdated `protobuf:"bytes,13,opt,name=issue_status_updated,json=issueStatusUpdated,proto3,oneof"`
}

type Event_IssueClosed struct {
	IssueClosed *IssueClosed `protobuf:"bytes,14,opt,name=issue_closed,json=issueClosed,proto3,oneof"`
}

func (*Event_Ping) isEvent_Data() {}

func (*Event_IssueCreated) isEvent_Data() {}

func (*Event_IssueUpdated) isEvent_Data() {}

func (*Event_IssueStatusUpdated) isEvent_Data() {}

func (*Event_IssueClosed) isEvent_Data() {}

// Test event sent during a webhook setup.
type Ping struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ping) Reset() {
	*x = Ping{}
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_synq_webhooks_v1_event_proto_rawDescGZIP(), []int{1}
}

func (x *Ping) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type IssueCreated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Issue         *IssueSummary          `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueCreated) Reset() {
	*x = IssueCreated{}
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCreated) ProtoMessage() {}

func (x *IssueCreated) ProtoReflect() protoreflect.Message {
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCreated.ProtoReflect.Descriptor instead.
func (*IssueCreated) Descriptor() ([]byte, []int) {
	return file_synq_webhooks_v1_event_proto_rawDescGZIP(), []int{2}
}

func (x *IssueCreated) GetIssue() *IssueSummary {
	if x != nil {
		return x.Issue
	}
	return nil
}

type IssueUpdated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Issue         *IssueSummary          `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueUpdated) Reset() {
	*x = IssueUpdated{}
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueUpdated) ProtoMessage() {}

func (x *IssueUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueUpdated.ProtoReflect.Descriptor instead.
func (*IssueUpdated) Descriptor() ([]byte, []int) {
	return file_synq_webhooks_v1_event_proto_rawDescGZIP(), []int{3}
}

func (x *IssueUpdated) GetIssue() *IssueSummary {
	if x != nil {
		return x.Issue
	}
	return nil
}

type IssueStatusUpdated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Issue         *IssueSummary          `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueStatusUpdated) Reset() {
	*x = IssueStatusUpdated{}
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueStatusUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueStatusUpdated) ProtoMessage() {}

func (x *IssueStatusUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueStatusUpdated.ProtoReflect.Descriptor instead.
func (*IssueStatusUpdated) Descriptor() ([]byte, []int) {
	return file_synq_webhooks_v1_event_proto_rawDescGZIP(), []int{4}
}

func (x *IssueStatusUpdated) GetIssue() *IssueSummary {
	if x != nil {
		return x.Issue
	}
	return nil
}

type IssueClosed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Issue         *IssueSummary          `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueClosed) Reset() {
	*x = IssueClosed{}
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueClosed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueClosed) ProtoMessage() {}

func (x *IssueClosed) ProtoReflect() protoreflect.Message {
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueClosed.ProtoReflect.Descriptor instead.
func (*IssueClosed) Descriptor() ([]byte, []int) {
	return file_synq_webhooks_v1_event_proto_rawDescGZIP(), []int{5}
}

func (x *IssueClosed) GetIssue() *IssueSummary {
	if x != nil {
		return x.Issue
	}
	return nil
}

type IssueSummary struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	IssueId      string                 `protobuf:"bytes,1,opt,name=issue_id,json=issueId,proto3" json:"issue_id,omitempty"`
	IssueGroupId string                 `protobuf:"bytes,2,opt,name=issue_group_id,json=issueGroupId,proto3" json:"issue_group_id,omitempty"`
	IssueUrl     string                 `protobuf:"bytes,3,opt,name=issue_url,json=issueUrl,proto3" json:"issue_url,omitempty"`
	// Summary of the issue, what happened and where.
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// Detailed description of the issue. In the Markdown format.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Detailed description of the issue. In the HTML format.
	DescriptionHtml string `protobuf:"bytes,14,opt,name=description_html,json=descriptionHtml,proto3" json:"description_html,omitempty"`
	// Entity which triggered the issue.
	TriggerEntity *IssueSummary_IssueEntity `protobuf:"bytes,6,opt,name=trigger_entity,json=triggerEntity,proto3" json:"trigger_entity,omitempty"`
	// Entities directly affected by the issue, not considering downstream ones.
	DirectlyAffectedEntities []*IssueSummary_IssueEntity `protobuf:"bytes,7,rep,name=directly_affected_entities,json=directlyAffectedEntities,proto3" json:"directly_affected_entities,omitempty"`
	// Time when the issue was triggered.
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Time when the issue was closed.
	EndedAt        *timestamppb.Timestamp   `protobuf:"bytes,9,opt,name=ended_at,json=endedAt,proto3,oneof" json:"ended_at,omitempty"`
	TriggerRunId   string                   `protobuf:"bytes,10,opt,name=trigger_run_id,json=triggerRunId,proto3" json:"trigger_run_id,omitempty"`
	TriggerName    string                   `protobuf:"bytes,11,opt,name=trigger_name,json=triggerName,proto3" json:"trigger_name,omitempty"`
	TriggerMessage string                   `protobuf:"bytes,12,opt,name=trigger_message,json=triggerMessage,proto3" json:"trigger_message,omitempty"`
	Status         IssueSummary_IssueStatus `protobuf:"varint,13,opt,name=status,proto3,enum=synq.webhooks.v1.IssueSummary_IssueStatus" json:"status,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *IssueSummary) Reset() {
	*x = IssueSummary{}
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueSummary) ProtoMessage() {}

func (x *IssueSummary) ProtoReflect() protoreflect.Message {
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueSummary.ProtoReflect.Descriptor instead.
func (*IssueSummary) Descriptor() ([]byte, []int) {
	return file_synq_webhooks_v1_event_proto_rawDescGZIP(), []int{6}
}

func (x *IssueSummary) GetIssueId() string {
	if x != nil {
		return x.IssueId
	}
	return ""
}

func (x *IssueSummary) GetIssueGroupId() string {
	if x != nil {
		return x.IssueGroupId
	}
	return ""
}

func (x *IssueSummary) GetIssueUrl() string {
	if x != nil {
		return x.IssueUrl
	}
	return ""
}

func (x *IssueSummary) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *IssueSummary) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IssueSummary) GetDescriptionHtml() string {
	if x != nil {
		return x.DescriptionHtml
	}
	return ""
}

func (x *IssueSummary) GetTriggerEntity() *IssueSummary_IssueEntity {
	if x != nil {
		return x.TriggerEntity
	}
	return nil
}

func (x *IssueSummary) GetDirectlyAffectedEntities() []*IssueSummary_IssueEntity {
	if x != nil {
		return x.DirectlyAffectedEntities
	}
	return nil
}

func (x *IssueSummary) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *IssueSummary) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *IssueSummary) GetTriggerRunId() string {
	if x != nil {
		return x.TriggerRunId
	}
	return ""
}

func (x *IssueSummary) GetTriggerName() string {
	if x != nil {
		return x.TriggerName
	}
	return ""
}

func (x *IssueSummary) GetTriggerMessage() string {
	if x != nil {
		return x.TriggerMessage
	}
	return ""
}

func (x *IssueSummary) GetStatus() IssueSummary_IssueStatus {
	if x != nil {
		return x.Status
	}
	return IssueSummary_ISSUE_STATUS_UNSPECIFIED
}

type IssueSummary_IssueEntity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TypeName      string                 `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	Identifier    *v1.Identifier         `protobuf:"bytes,3,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Folder        *string                `protobuf:"bytes,4,opt,name=folder,proto3,oneof" json:"folder,omitempty"`
	EntityUrl     string                 `protobuf:"bytes,5,opt,name=entity_url,json=entityUrl,proto3" json:"entity_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueSummary_IssueEntity) Reset() {
	*x = IssueSummary_IssueEntity{}
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueSummary_IssueEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueSummary_IssueEntity) ProtoMessage() {}

func (x *IssueSummary_IssueEntity) ProtoReflect() protoreflect.Message {
	mi := &file_synq_webhooks_v1_event_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueSummary_IssueEntity.ProtoReflect.Descriptor instead.
func (*IssueSummary_IssueEntity) Descriptor() ([]byte, []int) {
	return file_synq_webhooks_v1_event_proto_rawDescGZIP(), []int{6, 0}
}

func (x *IssueSummary_IssueEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IssueSummary_IssueEntity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *IssueSummary_IssueEntity) GetIdentifier() *v1.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *IssueSummary_IssueEntity) GetFolder() string {
	if x != nil && x.Folder != nil {
		return *x.Folder
	}
	return ""
}

func (x *IssueSummary_IssueEntity) GetEntityUrl() string {
	if x != nil {
		return x.EntityUrl
	}
	return ""
}

var File_synq_webhooks_v1_event_proto protoreflect.FileDescriptor

var file_synq_webhooks_v1_event_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x73, 0x79, 0x6e, 0x71, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x06, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x58, 0x0a, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x28, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x44, 0x10, 0x0e, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x20,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x44, 0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x12,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x0b, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x22, 0xb6, 0x08,
	0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x74, 0x6d, 0x6c, 0x12,
	0x51, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x68, 0x0a, 0x1a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x5f, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x18, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x41, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xc3, 0x01, 0x0a, 0x0b, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x55, 0x72, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22,
	0xa7, 0x01, 0x0a, 0x0b, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x18, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x56, 0x45, 0x53, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58,
	0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x53, 0x53, 0x55,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x21, 0x0a, 0x1d, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x10, 0x04, 0x22, 0x04, 0x08, 0x05, 0x10, 0x05, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0xa8, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x79, 0x6e, 0x71, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x42,
	0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x22, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x79, 0x6e,
	0x71, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2f, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x53, 0x57, 0x58, 0xaa, 0x02, 0x10, 0x53, 0x79, 0x6e, 0x71, 0x2e, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x53, 0x79, 0x6e,
	0x71, 0x5c, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c,
	0x53, 0x79, 0x6e, 0x71, 0x5c, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x53,
	0x79, 0x6e, 0x71, 0x3a, 0x3a, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_synq_webhooks_v1_event_proto_rawDescOnce sync.Once
	file_synq_webhooks_v1_event_proto_rawDescData []byte
)

func file_synq_webhooks_v1_event_proto_rawDescGZIP() []byte {
	file_synq_webhooks_v1_event_proto_rawDescOnce.Do(func() {
		file_synq_webhooks_v1_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_synq_webhooks_v1_event_proto_rawDesc), len(file_synq_webhooks_v1_event_proto_rawDesc)))
	})
	return file_synq_webhooks_v1_event_proto_rawDescData
}

var file_synq_webhooks_v1_event_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_synq_webhooks_v1_event_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_synq_webhooks_v1_event_proto_goTypes = []any{
	(Event_EventType)(0),             // 0: synq.webhooks.v1.Event.EventType
	(IssueSummary_IssueStatus)(0),    // 1: synq.webhooks.v1.IssueSummary.IssueStatus
	(*Event)(nil),                    // 2: synq.webhooks.v1.Event
	(*Ping)(nil),                     // 3: synq.webhooks.v1.Ping
	(*IssueCreated)(nil),             // 4: synq.webhooks.v1.IssueCreated
	(*IssueUpdated)(nil),             // 5: synq.webhooks.v1.IssueUpdated
	(*IssueStatusUpdated)(nil),       // 6: synq.webhooks.v1.IssueStatusUpdated
	(*IssueClosed)(nil),              // 7: synq.webhooks.v1.IssueClosed
	(*IssueSummary)(nil),             // 8: synq.webhooks.v1.IssueSummary
	(*IssueSummary_IssueEntity)(nil), // 9: synq.webhooks.v1.IssueSummary.IssueEntity
	(*timestamppb.Timestamp)(nil),    // 10: google.protobuf.Timestamp
	(*Callback)(nil),                 // 11: synq.webhooks.v1.Callback
	(*v1.Identifier)(nil),            // 12: synq.entities.v1.Identifier
}
var file_synq_webhooks_v1_event_proto_depIdxs = []int32{
	10, // 0: synq.webhooks.v1.Event.event_time:type_name -> google.protobuf.Timestamp
	0,  // 1: synq.webhooks.v1.Event.event_type:type_name -> synq.webhooks.v1.Event.EventType
	3,  // 2: synq.webhooks.v1.Event.ping:type_name -> synq.webhooks.v1.Ping
	4,  // 3: synq.webhooks.v1.Event.issue_created:type_name -> synq.webhooks.v1.IssueCreated
	5,  // 4: synq.webhooks.v1.Event.issue_updated:type_name -> synq.webhooks.v1.IssueUpdated
	6,  // 5: synq.webhooks.v1.Event.issue_status_updated:type_name -> synq.webhooks.v1.IssueStatusUpdated
	7,  // 6: synq.webhooks.v1.Event.issue_closed:type_name -> synq.webhooks.v1.IssueClosed
	11, // 7: synq.webhooks.v1.Event.callbacks:type_name -> synq.webhooks.v1.Callback
	8,  // 8: synq.webhooks.v1.IssueCreated.issue:type_name -> synq.webhooks.v1.IssueSummary
	8,  // 9: synq.webhooks.v1.IssueUpdated.issue:type_name -> synq.webhooks.v1.IssueSummary
	8,  // 10: synq.webhooks.v1.IssueStatusUpdated.issue:type_name -> synq.webhooks.v1.IssueSummary
	8,  // 11: synq.webhooks.v1.IssueClosed.issue:type_name -> synq.webhooks.v1.IssueSummary
	9,  // 12: synq.webhooks.v1.IssueSummary.trigger_entity:type_name -> synq.webhooks.v1.IssueSummary.IssueEntity
	9,  // 13: synq.webhooks.v1.IssueSummary.directly_affected_entities:type_name -> synq.webhooks.v1.IssueSummary.IssueEntity
	10, // 14: synq.webhooks.v1.IssueSummary.started_at:type_name -> google.protobuf.Timestamp
	10, // 15: synq.webhooks.v1.IssueSummary.ended_at:type_name -> google.protobuf.Timestamp
	1,  // 16: synq.webhooks.v1.IssueSummary.status:type_name -> synq.webhooks.v1.IssueSummary.IssueStatus
	12, // 17: synq.webhooks.v1.IssueSummary.IssueEntity.identifier:type_name -> synq.entities.v1.Identifier
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_synq_webhooks_v1_event_proto_init() }
func file_synq_webhooks_v1_event_proto_init() {
	if File_synq_webhooks_v1_event_proto != nil {
		return
	}
	file_synq_webhooks_v1_callback_proto_init()
	file_synq_webhooks_v1_event_proto_msgTypes[0].OneofWrappers = []any{
		(*Event_Ping)(nil),
		(*Event_IssueCreated)(nil),
		(*Event_IssueUpdated)(nil),
		(*Event_IssueStatusUpdated)(nil),
		(*Event_IssueClosed)(nil),
	}
	file_synq_webhooks_v1_event_proto_msgTypes[6].OneofWrappers = []any{}
	file_synq_webhooks_v1_event_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_synq_webhooks_v1_event_proto_rawDesc), len(file_synq_webhooks_v1_event_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_synq_webhooks_v1_event_proto_goTypes,
		DependencyIndexes: file_synq_webhooks_v1_event_proto_depIdxs,
		EnumInfos:         file_synq_webhooks_v1_event_proto_enumTypes,
		MessageInfos:      file_synq_webhooks_v1_event_proto_msgTypes,
	}.Build()
	File_synq_webhooks_v1_event_proto = out.File
	file_synq_webhooks_v1_event_proto_goTypes = nil
	file_synq_webhooks_v1_event_proto_depIdxs = nil
}
