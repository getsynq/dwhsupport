// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: synq/ingest/sqlmesh/v1/sqlmesh_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SqlMeshService_IngestMetadata_FullMethodName  = "/synq.ingest.sqlmesh.v1.SqlMeshService/IngestMetadata"
	SqlMeshService_IngestExecution_FullMethodName = "/synq.ingest.sqlmesh.v1.SqlMeshService/IngestExecution"
)

// SqlMeshServiceClient is the client API for SqlMeshService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlMeshServiceClient interface {
	IngestMetadata(ctx context.Context, in *IngestMetadataRequest, opts ...grpc.CallOption) (*IngestMetadataResponse, error)
	IngestExecution(ctx context.Context, in *IngestExecutionRequest, opts ...grpc.CallOption) (*IngestExecutionResponse, error)
}

type sqlMeshServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlMeshServiceClient(cc grpc.ClientConnInterface) SqlMeshServiceClient {
	return &sqlMeshServiceClient{cc}
}

func (c *sqlMeshServiceClient) IngestMetadata(ctx context.Context, in *IngestMetadataRequest, opts ...grpc.CallOption) (*IngestMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestMetadataResponse)
	err := c.cc.Invoke(ctx, SqlMeshService_IngestMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlMeshServiceClient) IngestExecution(ctx context.Context, in *IngestExecutionRequest, opts ...grpc.CallOption) (*IngestExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestExecutionResponse)
	err := c.cc.Invoke(ctx, SqlMeshService_IngestExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlMeshServiceServer is the server API for SqlMeshService service.
// All implementations must embed UnimplementedSqlMeshServiceServer
// for forward compatibility.
type SqlMeshServiceServer interface {
	IngestMetadata(context.Context, *IngestMetadataRequest) (*IngestMetadataResponse, error)
	IngestExecution(context.Context, *IngestExecutionRequest) (*IngestExecutionResponse, error)
	mustEmbedUnimplementedSqlMeshServiceServer()
}

// UnimplementedSqlMeshServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSqlMeshServiceServer struct{}

func (UnimplementedSqlMeshServiceServer) IngestMetadata(context.Context, *IngestMetadataRequest) (*IngestMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestMetadata not implemented")
}
func (UnimplementedSqlMeshServiceServer) IngestExecution(context.Context, *IngestExecutionRequest) (*IngestExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestExecution not implemented")
}
func (UnimplementedSqlMeshServiceServer) mustEmbedUnimplementedSqlMeshServiceServer() {}
func (UnimplementedSqlMeshServiceServer) testEmbeddedByValue()                        {}

// UnsafeSqlMeshServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlMeshServiceServer will
// result in compilation errors.
type UnsafeSqlMeshServiceServer interface {
	mustEmbedUnimplementedSqlMeshServiceServer()
}

func RegisterSqlMeshServiceServer(s grpc.ServiceRegistrar, srv SqlMeshServiceServer) {
	// If the following call pancis, it indicates UnimplementedSqlMeshServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SqlMeshService_ServiceDesc, srv)
}

func _SqlMeshService_IngestMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlMeshServiceServer).IngestMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SqlMeshService_IngestMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlMeshServiceServer).IngestMetadata(ctx, req.(*IngestMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlMeshService_IngestExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlMeshServiceServer).IngestExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SqlMeshService_IngestExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlMeshServiceServer).IngestExecution(ctx, req.(*IngestExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlMeshService_ServiceDesc is the grpc.ServiceDesc for SqlMeshService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlMeshService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synq.ingest.sqlmesh.v1.SqlMeshService",
	HandlerType: (*SqlMeshServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestMetadata",
			Handler:    _SqlMeshService_IngestMetadata_Handler,
		},
		{
			MethodName: "IngestExecution",
			Handler:    _SqlMeshService_IngestExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synq/ingest/sqlmesh/v1/sqlmesh_service.proto",
}
