// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: synq/domains/v1/domains_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DomainsService_Upsert_FullMethodName                    = "/synq.domains.v1.DomainsService/Upsert"
	DomainsService_BatchGet_FullMethodName                  = "/synq.domains.v1.DomainsService/BatchGet"
	DomainsService_FetchDomainWithSubDomains_FullMethodName = "/synq.domains.v1.DomainsService/FetchDomainWithSubDomains"
	DomainsService_List_FullMethodName                      = "/synq.domains.v1.DomainsService/List"
	DomainsService_Delete_FullMethodName                    = "/synq.domains.v1.DomainsService/Delete"
	DomainsService_SetDefinition_FullMethodName             = "/synq.domains.v1.DomainsService/SetDefinition"
	DomainsService_AddDefinitionPart_FullMethodName         = "/synq.domains.v1.DomainsService/AddDefinitionPart"
	DomainsService_RemoveDefinitionPart_FullMethodName      = "/synq.domains.v1.DomainsService/RemoveDefinitionPart"
)

// DomainsServiceClient is the client API for DomainsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DomainsService can be used to manage domains.
type DomainsServiceClient interface {
	// Create or update a domain.
	Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*UpsertResponse, error)
	// Get multiple domains by their identifiers.
	BatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error)
	// Get a domain with its sub-domains
	FetchDomainWithSubDomains(ctx context.Context, in *FetchDomainWithSubDomainsRequest, opts ...grpc.CallOption) (*FetchDomainWithSubDomainsResponse, error)
	// List all the domains in the current workspace.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Delete a domain by its identifier.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Set the definition for an existing domain.
	SetDefinition(ctx context.Context, in *SetDefinitionRequest, opts ...grpc.CallOption) (*SetDefinitionResponse, error)
	// Add definition part to the definition of an existing domain.
	AddDefinitionPart(ctx context.Context, in *AddDefinitionPartRequest, opts ...grpc.CallOption) (*AddDefinitionPartResponse, error)
	// Remove definition part from the definition of an existing domain.
	RemoveDefinitionPart(ctx context.Context, in *RemoveDefinitionPartRequest, opts ...grpc.CallOption) (*RemoveDefinitionPartResponse, error)
}

type domainsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainsServiceClient(cc grpc.ClientConnInterface) DomainsServiceClient {
	return &domainsServiceClient{cc}
}

func (c *domainsServiceClient) Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*UpsertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertResponse)
	err := c.cc.Invoke(ctx, DomainsService_Upsert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsServiceClient) BatchGet(ctx context.Context, in *BatchGetRequest, opts ...grpc.CallOption) (*BatchGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetResponse)
	err := c.cc.Invoke(ctx, DomainsService_BatchGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsServiceClient) FetchDomainWithSubDomains(ctx context.Context, in *FetchDomainWithSubDomainsRequest, opts ...grpc.CallOption) (*FetchDomainWithSubDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchDomainWithSubDomainsResponse)
	err := c.cc.Invoke(ctx, DomainsService_FetchDomainWithSubDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, DomainsService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, DomainsService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsServiceClient) SetDefinition(ctx context.Context, in *SetDefinitionRequest, opts ...grpc.CallOption) (*SetDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDefinitionResponse)
	err := c.cc.Invoke(ctx, DomainsService_SetDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsServiceClient) AddDefinitionPart(ctx context.Context, in *AddDefinitionPartRequest, opts ...grpc.CallOption) (*AddDefinitionPartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDefinitionPartResponse)
	err := c.cc.Invoke(ctx, DomainsService_AddDefinitionPart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsServiceClient) RemoveDefinitionPart(ctx context.Context, in *RemoveDefinitionPartRequest, opts ...grpc.CallOption) (*RemoveDefinitionPartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDefinitionPartResponse)
	err := c.cc.Invoke(ctx, DomainsService_RemoveDefinitionPart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainsServiceServer is the server API for DomainsService service.
// All implementations must embed UnimplementedDomainsServiceServer
// for forward compatibility.
//
// DomainsService can be used to manage domains.
type DomainsServiceServer interface {
	// Create or update a domain.
	Upsert(context.Context, *UpsertRequest) (*UpsertResponse, error)
	// Get multiple domains by their identifiers.
	BatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error)
	// Get a domain with its sub-domains
	FetchDomainWithSubDomains(context.Context, *FetchDomainWithSubDomainsRequest) (*FetchDomainWithSubDomainsResponse, error)
	// List all the domains in the current workspace.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Delete a domain by its identifier.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Set the definition for an existing domain.
	SetDefinition(context.Context, *SetDefinitionRequest) (*SetDefinitionResponse, error)
	// Add definition part to the definition of an existing domain.
	AddDefinitionPart(context.Context, *AddDefinitionPartRequest) (*AddDefinitionPartResponse, error)
	// Remove definition part from the definition of an existing domain.
	RemoveDefinitionPart(context.Context, *RemoveDefinitionPartRequest) (*RemoveDefinitionPartResponse, error)
	mustEmbedUnimplementedDomainsServiceServer()
}

// UnimplementedDomainsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDomainsServiceServer struct{}

func (UnimplementedDomainsServiceServer) Upsert(context.Context, *UpsertRequest) (*UpsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedDomainsServiceServer) BatchGet(context.Context, *BatchGetRequest) (*BatchGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGet not implemented")
}
func (UnimplementedDomainsServiceServer) FetchDomainWithSubDomains(context.Context, *FetchDomainWithSubDomainsRequest) (*FetchDomainWithSubDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDomainWithSubDomains not implemented")
}
func (UnimplementedDomainsServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDomainsServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDomainsServiceServer) SetDefinition(context.Context, *SetDefinitionRequest) (*SetDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefinition not implemented")
}
func (UnimplementedDomainsServiceServer) AddDefinitionPart(context.Context, *AddDefinitionPartRequest) (*AddDefinitionPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDefinitionPart not implemented")
}
func (UnimplementedDomainsServiceServer) RemoveDefinitionPart(context.Context, *RemoveDefinitionPartRequest) (*RemoveDefinitionPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDefinitionPart not implemented")
}
func (UnimplementedDomainsServiceServer) mustEmbedUnimplementedDomainsServiceServer() {}
func (UnimplementedDomainsServiceServer) testEmbeddedByValue()                        {}

// UnsafeDomainsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainsServiceServer will
// result in compilation errors.
type UnsafeDomainsServiceServer interface {
	mustEmbedUnimplementedDomainsServiceServer()
}

func RegisterDomainsServiceServer(s grpc.ServiceRegistrar, srv DomainsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDomainsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DomainsService_ServiceDesc, srv)
}

func _DomainsService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainsService_Upsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServiceServer).Upsert(ctx, req.(*UpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainsService_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServiceServer).BatchGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainsService_BatchGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServiceServer).BatchGet(ctx, req.(*BatchGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainsService_FetchDomainWithSubDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDomainWithSubDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServiceServer).FetchDomainWithSubDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainsService_FetchDomainWithSubDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServiceServer).FetchDomainWithSubDomains(ctx, req.(*FetchDomainWithSubDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainsService_SetDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServiceServer).SetDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainsService_SetDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServiceServer).SetDefinition(ctx, req.(*SetDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainsService_AddDefinitionPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDefinitionPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServiceServer).AddDefinitionPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainsService_AddDefinitionPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServiceServer).AddDefinitionPart(ctx, req.(*AddDefinitionPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainsService_RemoveDefinitionPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDefinitionPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServiceServer).RemoveDefinitionPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainsService_RemoveDefinitionPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServiceServer).RemoveDefinitionPart(ctx, req.(*RemoveDefinitionPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DomainsService_ServiceDesc is the grpc.ServiceDesc for DomainsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DomainsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synq.domains.v1.DomainsService",
	HandlerType: (*DomainsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upsert",
			Handler:    _DomainsService_Upsert_Handler,
		},
		{
			MethodName: "BatchGet",
			Handler:    _DomainsService_BatchGet_Handler,
		},
		{
			MethodName: "FetchDomainWithSubDomains",
			Handler:    _DomainsService_FetchDomainWithSubDomains_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DomainsService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DomainsService_Delete_Handler,
		},
		{
			MethodName: "SetDefinition",
			Handler:    _DomainsService_SetDefinition_Handler,
		},
		{
			MethodName: "AddDefinitionPart",
			Handler:    _DomainsService_AddDefinitionPart_Handler,
		},
		{
			MethodName: "RemoveDefinitionPart",
			Handler:    _DomainsService_RemoveDefinitionPart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synq/domains/v1/domains_service.proto",
}
