// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: synq/domains/members/v1/domain_members_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DomainMembersService_AddDomainMembers_FullMethodName     = "/synq.domains.members.v1.DomainMembersService/AddDomainMembers"
	DomainMembersService_RemoveDomainMembers_FullMethodName  = "/synq.domains.members.v1.DomainMembersService/RemoveDomainMembers"
	DomainMembersService_ListDomainMembers_FullMethodName    = "/synq.domains.members.v1.DomainMembersService/ListDomainMembers"
	DomainMembersService_ListUserDomains_FullMethodName      = "/synq.domains.members.v1.DomainMembersService/ListUserDomains"
	DomainMembersService_SetDefaultUserDomain_FullMethodName = "/synq.domains.members.v1.DomainMembersService/SetDefaultUserDomain"
)

// DomainMembersServiceClient is the client API for DomainMembersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DomainMembersService can be used to manage domain memberships.
type DomainMembersServiceClient interface {
	// Add domain members.
	AddDomainMembers(ctx context.Context, in *AddDomainMembersRequest, opts ...grpc.CallOption) (*AddDomainMembersResponse, error)
	// Remove domain members.
	RemoveDomainMembers(ctx context.Context, in *RemoveDomainMembersRequest, opts ...grpc.CallOption) (*RemoveDomainMembersResponse, error)
	// List domain members.
	ListDomainMembers(ctx context.Context, in *ListDomainMembersRequest, opts ...grpc.CallOption) (*ListDomainMembersResponse, error)
	// List domains for the given user.
	ListUserDomains(ctx context.Context, in *ListUserDomainsRequest, opts ...grpc.CallOption) (*ListUserDomainsResponse, error)
	// Set default domain for user.
	SetDefaultUserDomain(ctx context.Context, in *SetDefaultUserDomainRequest, opts ...grpc.CallOption) (*SetDefaultUserDomainResponse, error)
}

type domainMembersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainMembersServiceClient(cc grpc.ClientConnInterface) DomainMembersServiceClient {
	return &domainMembersServiceClient{cc}
}

func (c *domainMembersServiceClient) AddDomainMembers(ctx context.Context, in *AddDomainMembersRequest, opts ...grpc.CallOption) (*AddDomainMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDomainMembersResponse)
	err := c.cc.Invoke(ctx, DomainMembersService_AddDomainMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainMembersServiceClient) RemoveDomainMembers(ctx context.Context, in *RemoveDomainMembersRequest, opts ...grpc.CallOption) (*RemoveDomainMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDomainMembersResponse)
	err := c.cc.Invoke(ctx, DomainMembersService_RemoveDomainMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainMembersServiceClient) ListDomainMembers(ctx context.Context, in *ListDomainMembersRequest, opts ...grpc.CallOption) (*ListDomainMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDomainMembersResponse)
	err := c.cc.Invoke(ctx, DomainMembersService_ListDomainMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainMembersServiceClient) ListUserDomains(ctx context.Context, in *ListUserDomainsRequest, opts ...grpc.CallOption) (*ListUserDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserDomainsResponse)
	err := c.cc.Invoke(ctx, DomainMembersService_ListUserDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainMembersServiceClient) SetDefaultUserDomain(ctx context.Context, in *SetDefaultUserDomainRequest, opts ...grpc.CallOption) (*SetDefaultUserDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDefaultUserDomainResponse)
	err := c.cc.Invoke(ctx, DomainMembersService_SetDefaultUserDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainMembersServiceServer is the server API for DomainMembersService service.
// All implementations must embed UnimplementedDomainMembersServiceServer
// for forward compatibility.
//
// DomainMembersService can be used to manage domain memberships.
type DomainMembersServiceServer interface {
	// Add domain members.
	AddDomainMembers(context.Context, *AddDomainMembersRequest) (*AddDomainMembersResponse, error)
	// Remove domain members.
	RemoveDomainMembers(context.Context, *RemoveDomainMembersRequest) (*RemoveDomainMembersResponse, error)
	// List domain members.
	ListDomainMembers(context.Context, *ListDomainMembersRequest) (*ListDomainMembersResponse, error)
	// List domains for the given user.
	ListUserDomains(context.Context, *ListUserDomainsRequest) (*ListUserDomainsResponse, error)
	// Set default domain for user.
	SetDefaultUserDomain(context.Context, *SetDefaultUserDomainRequest) (*SetDefaultUserDomainResponse, error)
	mustEmbedUnimplementedDomainMembersServiceServer()
}

// UnimplementedDomainMembersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDomainMembersServiceServer struct{}

func (UnimplementedDomainMembersServiceServer) AddDomainMembers(context.Context, *AddDomainMembersRequest) (*AddDomainMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDomainMembers not implemented")
}
func (UnimplementedDomainMembersServiceServer) RemoveDomainMembers(context.Context, *RemoveDomainMembersRequest) (*RemoveDomainMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDomainMembers not implemented")
}
func (UnimplementedDomainMembersServiceServer) ListDomainMembers(context.Context, *ListDomainMembersRequest) (*ListDomainMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomainMembers not implemented")
}
func (UnimplementedDomainMembersServiceServer) ListUserDomains(context.Context, *ListUserDomainsRequest) (*ListUserDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserDomains not implemented")
}
func (UnimplementedDomainMembersServiceServer) SetDefaultUserDomain(context.Context, *SetDefaultUserDomainRequest) (*SetDefaultUserDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultUserDomain not implemented")
}
func (UnimplementedDomainMembersServiceServer) mustEmbedUnimplementedDomainMembersServiceServer() {}
func (UnimplementedDomainMembersServiceServer) testEmbeddedByValue()                              {}

// UnsafeDomainMembersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainMembersServiceServer will
// result in compilation errors.
type UnsafeDomainMembersServiceServer interface {
	mustEmbedUnimplementedDomainMembersServiceServer()
}

func RegisterDomainMembersServiceServer(s grpc.ServiceRegistrar, srv DomainMembersServiceServer) {
	// If the following call pancis, it indicates UnimplementedDomainMembersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DomainMembersService_ServiceDesc, srv)
}

func _DomainMembersService_AddDomainMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDomainMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainMembersServiceServer).AddDomainMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainMembersService_AddDomainMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainMembersServiceServer).AddDomainMembers(ctx, req.(*AddDomainMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainMembersService_RemoveDomainMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDomainMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainMembersServiceServer).RemoveDomainMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainMembersService_RemoveDomainMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainMembersServiceServer).RemoveDomainMembers(ctx, req.(*RemoveDomainMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainMembersService_ListDomainMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainMembersServiceServer).ListDomainMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainMembersService_ListDomainMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainMembersServiceServer).ListDomainMembers(ctx, req.(*ListDomainMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainMembersService_ListUserDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainMembersServiceServer).ListUserDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainMembersService_ListUserDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainMembersServiceServer).ListUserDomains(ctx, req.(*ListUserDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainMembersService_SetDefaultUserDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultUserDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainMembersServiceServer).SetDefaultUserDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainMembersService_SetDefaultUserDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainMembersServiceServer).SetDefaultUserDomain(ctx, req.(*SetDefaultUserDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DomainMembersService_ServiceDesc is the grpc.ServiceDesc for DomainMembersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DomainMembersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synq.domains.members.v1.DomainMembersService",
	HandlerType: (*DomainMembersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDomainMembers",
			Handler:    _DomainMembersService_AddDomainMembers_Handler,
		},
		{
			MethodName: "RemoveDomainMembers",
			Handler:    _DomainMembersService_RemoveDomainMembers_Handler,
		},
		{
			MethodName: "ListDomainMembers",
			Handler:    _DomainMembersService_ListDomainMembers_Handler,
		},
		{
			MethodName: "ListUserDomains",
			Handler:    _DomainMembersService_ListUserDomains_Handler,
		},
		{
			MethodName: "SetDefaultUserDomain",
			Handler:    _DomainMembersService_SetDefaultUserDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synq/domains/members/v1/domain_members_service.proto",
}
