// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: synq/datachecks/sqltests/v1/sql_tests_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SqlTestsService_BatchUpsertSqlTests_FullMethodName = "/synq.datachecks.sqltests.v1.SqlTestsService/BatchUpsertSqlTests"
	SqlTestsService_ListSqlTests_FullMethodName        = "/synq.datachecks.sqltests.v1.SqlTestsService/ListSqlTests"
	SqlTestsService_BatchGetSqlTests_FullMethodName    = "/synq.datachecks.sqltests.v1.SqlTestsService/BatchGetSqlTests"
	SqlTestsService_BatchDeleteSqlTests_FullMethodName = "/synq.datachecks.sqltests.v1.SqlTestsService/BatchDeleteSqlTests"
)

// SqlTestsServiceClient is the client API for SqlTestsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SqlTestsService is a service for managing SqlTests.
type SqlTestsServiceClient interface {
	// Upsert SqlTests based on a unique ID.
	BatchUpsertSqlTests(ctx context.Context, in *BatchUpsertSqlTestsRequest, opts ...grpc.CallOption) (*BatchUpsertSqlTestsResponse, error)
	// List SqlTests for given annotations.
	ListSqlTests(ctx context.Context, in *ListSqlTestsRequest, opts ...grpc.CallOption) (*ListSqlTestsResponse, error)
	// Get SqlTests by their IDs.
	BatchGetSqlTests(ctx context.Context, in *BatchGetSqlTestsRequest, opts ...grpc.CallOption) (*BatchGetSqlTestsResponse, error)
	// Delete SqlTests by their IDs.
	BatchDeleteSqlTests(ctx context.Context, in *BatchDeleteSqlTestsRequest, opts ...grpc.CallOption) (*BatchDeleteSqlTestsResponse, error)
}

type sqlTestsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlTestsServiceClient(cc grpc.ClientConnInterface) SqlTestsServiceClient {
	return &sqlTestsServiceClient{cc}
}

func (c *sqlTestsServiceClient) BatchUpsertSqlTests(ctx context.Context, in *BatchUpsertSqlTestsRequest, opts ...grpc.CallOption) (*BatchUpsertSqlTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchUpsertSqlTestsResponse)
	err := c.cc.Invoke(ctx, SqlTestsService_BatchUpsertSqlTests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlTestsServiceClient) ListSqlTests(ctx context.Context, in *ListSqlTestsRequest, opts ...grpc.CallOption) (*ListSqlTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSqlTestsResponse)
	err := c.cc.Invoke(ctx, SqlTestsService_ListSqlTests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlTestsServiceClient) BatchGetSqlTests(ctx context.Context, in *BatchGetSqlTestsRequest, opts ...grpc.CallOption) (*BatchGetSqlTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetSqlTestsResponse)
	err := c.cc.Invoke(ctx, SqlTestsService_BatchGetSqlTests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlTestsServiceClient) BatchDeleteSqlTests(ctx context.Context, in *BatchDeleteSqlTestsRequest, opts ...grpc.CallOption) (*BatchDeleteSqlTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchDeleteSqlTestsResponse)
	err := c.cc.Invoke(ctx, SqlTestsService_BatchDeleteSqlTests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlTestsServiceServer is the server API for SqlTestsService service.
// All implementations must embed UnimplementedSqlTestsServiceServer
// for forward compatibility.
//
// SqlTestsService is a service for managing SqlTests.
type SqlTestsServiceServer interface {
	// Upsert SqlTests based on a unique ID.
	BatchUpsertSqlTests(context.Context, *BatchUpsertSqlTestsRequest) (*BatchUpsertSqlTestsResponse, error)
	// List SqlTests for given annotations.
	ListSqlTests(context.Context, *ListSqlTestsRequest) (*ListSqlTestsResponse, error)
	// Get SqlTests by their IDs.
	BatchGetSqlTests(context.Context, *BatchGetSqlTestsRequest) (*BatchGetSqlTestsResponse, error)
	// Delete SqlTests by their IDs.
	BatchDeleteSqlTests(context.Context, *BatchDeleteSqlTestsRequest) (*BatchDeleteSqlTestsResponse, error)
	mustEmbedUnimplementedSqlTestsServiceServer()
}

// UnimplementedSqlTestsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSqlTestsServiceServer struct{}

func (UnimplementedSqlTestsServiceServer) BatchUpsertSqlTests(context.Context, *BatchUpsertSqlTestsRequest) (*BatchUpsertSqlTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpsertSqlTests not implemented")
}
func (UnimplementedSqlTestsServiceServer) ListSqlTests(context.Context, *ListSqlTestsRequest) (*ListSqlTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSqlTests not implemented")
}
func (UnimplementedSqlTestsServiceServer) BatchGetSqlTests(context.Context, *BatchGetSqlTestsRequest) (*BatchGetSqlTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetSqlTests not implemented")
}
func (UnimplementedSqlTestsServiceServer) BatchDeleteSqlTests(context.Context, *BatchDeleteSqlTestsRequest) (*BatchDeleteSqlTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteSqlTests not implemented")
}
func (UnimplementedSqlTestsServiceServer) mustEmbedUnimplementedSqlTestsServiceServer() {}
func (UnimplementedSqlTestsServiceServer) testEmbeddedByValue()                         {}

// UnsafeSqlTestsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlTestsServiceServer will
// result in compilation errors.
type UnsafeSqlTestsServiceServer interface {
	mustEmbedUnimplementedSqlTestsServiceServer()
}

func RegisterSqlTestsServiceServer(s grpc.ServiceRegistrar, srv SqlTestsServiceServer) {
	// If the following call pancis, it indicates UnimplementedSqlTestsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SqlTestsService_ServiceDesc, srv)
}

func _SqlTestsService_BatchUpsertSqlTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpsertSqlTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlTestsServiceServer).BatchUpsertSqlTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SqlTestsService_BatchUpsertSqlTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlTestsServiceServer).BatchUpsertSqlTests(ctx, req.(*BatchUpsertSqlTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlTestsService_ListSqlTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSqlTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlTestsServiceServer).ListSqlTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SqlTestsService_ListSqlTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlTestsServiceServer).ListSqlTests(ctx, req.(*ListSqlTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlTestsService_BatchGetSqlTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetSqlTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlTestsServiceServer).BatchGetSqlTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SqlTestsService_BatchGetSqlTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlTestsServiceServer).BatchGetSqlTests(ctx, req.(*BatchGetSqlTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlTestsService_BatchDeleteSqlTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteSqlTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlTestsServiceServer).BatchDeleteSqlTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SqlTestsService_BatchDeleteSqlTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlTestsServiceServer).BatchDeleteSqlTests(ctx, req.(*BatchDeleteSqlTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlTestsService_ServiceDesc is the grpc.ServiceDesc for SqlTestsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlTestsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synq.datachecks.sqltests.v1.SqlTestsService",
	HandlerType: (*SqlTestsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchUpsertSqlTests",
			Handler:    _SqlTestsService_BatchUpsertSqlTests_Handler,
		},
		{
			MethodName: "ListSqlTests",
			Handler:    _SqlTestsService_ListSqlTests_Handler,
		},
		{
			MethodName: "BatchGetSqlTests",
			Handler:    _SqlTestsService_BatchGetSqlTests_Handler,
		},
		{
			MethodName: "BatchDeleteSqlTests",
			Handler:    _SqlTestsService_BatchDeleteSqlTests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synq/datachecks/sqltests/v1/sql_tests_service.proto",
}
