// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: synq/datachecks/sqltests/v1/sql_tests.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v11 "github.com/getsynq/api/entities/v1"
	v1 "github.com/getsynq/api/platforms/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The SqlTest is a SQL test that is executed on a synq entity.
type SqlTest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier for the data platform which the SqlTest would be executed on.
	Platform *v1.DataPlatformIdentifier `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	// Unique resource identifier for the SqlTest. This is externally maintained and can
	// be used to fetch/update/delete this test.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Human friendly name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// A valid SQL expression which is the test.
	SqlExpression string `protobuf:"bytes,4,opt,name=sql_expression,json=sqlExpression,proto3" json:"sql_expression,omitempty"`
	// [Recurrence rule](https://icalendar.org/iCalendar-RFC-5545/3-8-5-3-recurrence-rule.html) for the execution schedule of the SqlTest.
	RecurrenceRule string `protobuf:"bytes,5,opt,name=recurrence_rule,json=recurrenceRule,proto3" json:"recurrence_rule,omitempty"`
	// Annotations for the given SqlTest.These help filter the SqlTests for later
	// operations like listing by API, selection in UI, analytics, etc.
	Annotations []*v11.Annotation `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty"`
	// Boolean flag to to toggle saving of failure runs.
	SaveFailures  bool `protobuf:"varint,7,opt,name=save_failures,json=saveFailures,proto3" json:"save_failures,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SqlTest) Reset() {
	*x = SqlTest{}
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTest) ProtoMessage() {}

func (x *SqlTest) ProtoReflect() protoreflect.Message {
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTest.ProtoReflect.Descriptor instead.
func (*SqlTest) Descriptor() ([]byte, []int) {
	return file_synq_datachecks_sqltests_v1_sql_tests_proto_rawDescGZIP(), []int{0}
}

func (x *SqlTest) GetPlatform() *v1.DataPlatformIdentifier {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *SqlTest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SqlTest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlTest) GetSqlExpression() string {
	if x != nil {
		return x.SqlExpression
	}
	return ""
}

func (x *SqlTest) GetRecurrenceRule() string {
	if x != nil {
		return x.RecurrenceRule
	}
	return ""
}

func (x *SqlTest) GetAnnotations() []*v11.Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *SqlTest) GetSaveFailures() bool {
	if x != nil {
		return x.SaveFailures
	}
	return false
}

var File_synq_datachecks_sqltests_v1_sql_tests_proto protoreflect.FileDescriptor

var file_synq_datachecks_sqltests_v1_sql_tests_proto_rawDesc = string([]byte{
	0x0a, 0x2b, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x2f, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71,
	0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x73,
	0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x73,
	0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x73, 0x79, 0x6e, 0x71,
	0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc9, 0x02, 0x0a, 0x07, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x12, 0x4d,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x73, 0x71, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x76,
	0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x42, 0xee,
	0x01, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x42, 0x0d, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x65, 0x74, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2f, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x44, 0x53, 0xaa, 0x02, 0x1b, 0x53, 0x79, 0x6e, 0x71, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x53, 0x71, 0x6c, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1b, 0x53, 0x79, 0x6e, 0x71, 0x5c, 0x44, 0x61,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x5c, 0x53, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x27, 0x53, 0x79, 0x6e, 0x71, 0x5c, 0x44, 0x61, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x5c, 0x53, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x1e, 0x53, 0x79, 0x6e, 0x71, 0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x3a, 0x3a, 0x53, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_synq_datachecks_sqltests_v1_sql_tests_proto_rawDescOnce sync.Once
	file_synq_datachecks_sqltests_v1_sql_tests_proto_rawDescData []byte
)

func file_synq_datachecks_sqltests_v1_sql_tests_proto_rawDescGZIP() []byte {
	file_synq_datachecks_sqltests_v1_sql_tests_proto_rawDescOnce.Do(func() {
		file_synq_datachecks_sqltests_v1_sql_tests_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_synq_datachecks_sqltests_v1_sql_tests_proto_rawDesc), len(file_synq_datachecks_sqltests_v1_sql_tests_proto_rawDesc)))
	})
	return file_synq_datachecks_sqltests_v1_sql_tests_proto_rawDescData
}

var file_synq_datachecks_sqltests_v1_sql_tests_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_synq_datachecks_sqltests_v1_sql_tests_proto_goTypes = []any{
	(*SqlTest)(nil),                   // 0: synq.datachecks.sqltests.v1.SqlTest
	(*v1.DataPlatformIdentifier)(nil), // 1: synq.platforms.v1.DataPlatformIdentifier
	(*v11.Annotation)(nil),            // 2: synq.entities.v1.Annotation
}
var file_synq_datachecks_sqltests_v1_sql_tests_proto_depIdxs = []int32{
	1, // 0: synq.datachecks.sqltests.v1.SqlTest.platform:type_name -> synq.platforms.v1.DataPlatformIdentifier
	2, // 1: synq.datachecks.sqltests.v1.SqlTest.annotations:type_name -> synq.entities.v1.Annotation
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_synq_datachecks_sqltests_v1_sql_tests_proto_init() }
func file_synq_datachecks_sqltests_v1_sql_tests_proto_init() {
	if File_synq_datachecks_sqltests_v1_sql_tests_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_synq_datachecks_sqltests_v1_sql_tests_proto_rawDesc), len(file_synq_datachecks_sqltests_v1_sql_tests_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_synq_datachecks_sqltests_v1_sql_tests_proto_goTypes,
		DependencyIndexes: file_synq_datachecks_sqltests_v1_sql_tests_proto_depIdxs,
		MessageInfos:      file_synq_datachecks_sqltests_v1_sql_tests_proto_msgTypes,
	}.Build()
	File_synq_datachecks_sqltests_v1_sql_tests_proto = out.File
	file_synq_datachecks_sqltests_v1_sql_tests_proto_goTypes = nil
	file_synq_datachecks_sqltests_v1_sql_tests_proto_depIdxs = nil
}
