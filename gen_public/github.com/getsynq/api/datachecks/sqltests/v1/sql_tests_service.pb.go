// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: synq/datachecks/sqltests/v1/sql_tests_service.proto

package v1

import (
	v1 "github.com/getsynq/api/entities/v1"
	_ "github.com/getsynq/api/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchUpsertSqlTestsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of SqlTests to upsert.
	// The upsert is performed based on the unique path provided for each SqlTest.
	SqlTests      []*SqlTest `protobuf:"bytes,1,rep,name=sql_tests,json=sqlTests,proto3" json:"sql_tests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpsertSqlTestsRequest) Reset() {
	*x = BatchUpsertSqlTestsRequest{}
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpsertSqlTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpsertSqlTestsRequest) ProtoMessage() {}

func (x *BatchUpsertSqlTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpsertSqlTestsRequest.ProtoReflect.Descriptor instead.
func (*BatchUpsertSqlTestsRequest) Descriptor() ([]byte, []int) {
	return file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescGZIP(), []int{0}
}

func (x *BatchUpsertSqlTestsRequest) GetSqlTests() []*SqlTest {
	if x != nil {
		return x.SqlTests
	}
	return nil
}

type BatchUpsertSqlTestsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IDs for which SqlTests were created without error.
	CreatedIds []string `protobuf:"bytes,1,rep,name=created_ids,json=createdIds,proto3" json:"created_ids,omitempty"`
	// IDs for which SqlTests were updated without error.
	UpdatedIds []string `protobuf:"bytes,2,rep,name=updated_ids,json=updatedIds,proto3" json:"updated_ids,omitempty"`
	// Errors raised while upsert. This list will be empty if there were no errors.
	Errors        []*BatchUpsertSqlTestsResponse_UpsertError `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpsertSqlTestsResponse) Reset() {
	*x = BatchUpsertSqlTestsResponse{}
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpsertSqlTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpsertSqlTestsResponse) ProtoMessage() {}

func (x *BatchUpsertSqlTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpsertSqlTestsResponse.ProtoReflect.Descriptor instead.
func (*BatchUpsertSqlTestsResponse) Descriptor() ([]byte, []int) {
	return file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescGZIP(), []int{1}
}

func (x *BatchUpsertSqlTestsResponse) GetCreatedIds() []string {
	if x != nil {
		return x.CreatedIds
	}
	return nil
}

func (x *BatchUpsertSqlTestsResponse) GetUpdatedIds() []string {
	if x != nil {
		return x.UpdatedIds
	}
	return nil
}

func (x *BatchUpsertSqlTestsResponse) GetErrors() []*BatchUpsertSqlTestsResponse_UpsertError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ListSqlTestsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional annotations to fetch SqlTests for.
	Annotations   []*v1.Annotation `protobuf:"bytes,1,rep,name=annotations,proto3" json:"annotations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSqlTestsRequest) Reset() {
	*x = ListSqlTestsRequest{}
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSqlTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSqlTestsRequest) ProtoMessage() {}

func (x *ListSqlTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSqlTestsRequest.ProtoReflect.Descriptor instead.
func (*ListSqlTestsRequest) Descriptor() ([]byte, []int) {
	return file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListSqlTestsRequest) GetAnnotations() []*v1.Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type ListSqlTestsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SqlTests      []*SqlTest             `protobuf:"bytes,1,rep,name=sql_tests,json=sqlTests,proto3" json:"sql_tests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSqlTestsResponse) Reset() {
	*x = ListSqlTestsResponse{}
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSqlTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSqlTestsResponse) ProtoMessage() {}

func (x *ListSqlTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSqlTestsResponse.ProtoReflect.Descriptor instead.
func (*ListSqlTestsResponse) Descriptor() ([]byte, []int) {
	return file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListSqlTestsResponse) GetSqlTests() []*SqlTest {
	if x != nil {
		return x.SqlTests
	}
	return nil
}

type BatchGetSqlTestsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IDs of the SqlTests to fetch.
	Ids           []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetSqlTestsRequest) Reset() {
	*x = BatchGetSqlTestsRequest{}
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetSqlTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetSqlTestsRequest) ProtoMessage() {}

func (x *BatchGetSqlTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetSqlTestsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetSqlTestsRequest) Descriptor() ([]byte, []int) {
	return file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescGZIP(), []int{4}
}

func (x *BatchGetSqlTestsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type BatchGetSqlTestsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SqlTests      map[string]*SqlTest    `protobuf:"bytes,1,rep,name=sql_tests,json=sqlTests,proto3" json:"sql_tests,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetSqlTestsResponse) Reset() {
	*x = BatchGetSqlTestsResponse{}
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetSqlTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetSqlTestsResponse) ProtoMessage() {}

func (x *BatchGetSqlTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetSqlTestsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetSqlTestsResponse) Descriptor() ([]byte, []int) {
	return file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescGZIP(), []int{5}
}

func (x *BatchGetSqlTestsResponse) GetSqlTests() map[string]*SqlTest {
	if x != nil {
		return x.SqlTests
	}
	return nil
}

type BatchDeleteSqlTestsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IDs of the SqlTests to delete.
	Ids           []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeleteSqlTestsRequest) Reset() {
	*x = BatchDeleteSqlTestsRequest{}
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteSqlTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteSqlTestsRequest) ProtoMessage() {}

func (x *BatchDeleteSqlTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteSqlTestsRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteSqlTestsRequest) Descriptor() ([]byte, []int) {
	return file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescGZIP(), []int{6}
}

func (x *BatchDeleteSqlTestsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type BatchDeleteSqlTestsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeleteSqlTestsResponse) Reset() {
	*x = BatchDeleteSqlTestsResponse{}
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteSqlTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteSqlTestsResponse) ProtoMessage() {}

func (x *BatchDeleteSqlTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteSqlTestsResponse.ProtoReflect.Descriptor instead.
func (*BatchDeleteSqlTestsResponse) Descriptor() ([]byte, []int) {
	return file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescGZIP(), []int{7}
}

// Details of errors encountered during the upsert operation.
type BatchUpsertSqlTestsResponse_UpsertError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpsertSqlTestsResponse_UpsertError) Reset() {
	*x = BatchUpsertSqlTestsResponse_UpsertError{}
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpsertSqlTestsResponse_UpsertError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpsertSqlTestsResponse_UpsertError) ProtoMessage() {}

func (x *BatchUpsertSqlTestsResponse_UpsertError) ProtoReflect() protoreflect.Message {
	mi := &file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpsertSqlTestsResponse_UpsertError.ProtoReflect.Descriptor instead.
func (*BatchUpsertSqlTestsResponse_UpsertError) Descriptor() ([]byte, []int) {
	return file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BatchUpsertSqlTestsResponse_UpsertError) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchUpsertSqlTestsResponse_UpsertError) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_synq_datachecks_sqltests_v1_sql_tests_service_proto protoreflect.FileDescriptor

var file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDesc = string([]byte{
	0x0a, 0x33, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x2f, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71,
	0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x2b, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x2f, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x71, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x21, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x71, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x52, 0x08, 0x73, 0x71,
	0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x35, 0x0a, 0x0b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x55, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x71,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x59, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x6c, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x09,
	0x73, 0x71, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x2e, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x54, 0x65, 0x73, 0x74, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x22,
	0x2b, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xdf, 0x01, 0x0a,
	0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x73, 0x71, 0x6c,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73,
	0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x73,
	0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x61, 0x0a, 0x0d, 0x53,
	0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e,
	0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e,
	0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x71, 0x6c,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x1d,
	0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x71, 0x6c,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc2, 0x04,
	0x0a, 0x0f, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x91, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x37, 0x2e, 0x73, 0x79, 0x6e, 0x71,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x71, 0x6c, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x07, 0xd2, 0xb5,
	0x18, 0x03, 0x0a, 0x01, 0x32, 0x12, 0x7c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x6c,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x07, 0xd2, 0xb5, 0x18, 0x03,
	0x0a, 0x01, 0x33, 0x12, 0x88, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x53,
	0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x2e, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x07, 0xd2, 0xb5, 0x18, 0x03, 0x0a, 0x01, 0x33, 0x12, 0x91,
	0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x71,
	0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x37, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x2e, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x07, 0xd2, 0xb5, 0x18, 0x03, 0x0a,
	0x01, 0x32, 0x42, 0xf5, 0x01, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x14, 0x53, 0x71, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x79,
	0x6e, 0x71, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x2f, 0x73, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x53, 0x44, 0x53, 0xaa, 0x02, 0x1b, 0x53, 0x79, 0x6e, 0x71, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x53, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x1b, 0x53, 0x79, 0x6e, 0x71, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x5c, 0x53, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x27, 0x53, 0x79, 0x6e, 0x71, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x5c, 0x53, 0x71, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1e, 0x53, 0x79, 0x6e, 0x71,
	0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x3a, 0x3a, 0x53, 0x71,
	0x6c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescOnce sync.Once
	file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescData []byte
)

func file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescGZIP() []byte {
	file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescOnce.Do(func() {
		file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDesc), len(file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDesc)))
	})
	return file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDescData
}

var file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_synq_datachecks_sqltests_v1_sql_tests_service_proto_goTypes = []any{
	(*BatchUpsertSqlTestsRequest)(nil),              // 0: synq.datachecks.sqltests.v1.BatchUpsertSqlTestsRequest
	(*BatchUpsertSqlTestsResponse)(nil),             // 1: synq.datachecks.sqltests.v1.BatchUpsertSqlTestsResponse
	(*ListSqlTestsRequest)(nil),                     // 2: synq.datachecks.sqltests.v1.ListSqlTestsRequest
	(*ListSqlTestsResponse)(nil),                    // 3: synq.datachecks.sqltests.v1.ListSqlTestsResponse
	(*BatchGetSqlTestsRequest)(nil),                 // 4: synq.datachecks.sqltests.v1.BatchGetSqlTestsRequest
	(*BatchGetSqlTestsResponse)(nil),                // 5: synq.datachecks.sqltests.v1.BatchGetSqlTestsResponse
	(*BatchDeleteSqlTestsRequest)(nil),              // 6: synq.datachecks.sqltests.v1.BatchDeleteSqlTestsRequest
	(*BatchDeleteSqlTestsResponse)(nil),             // 7: synq.datachecks.sqltests.v1.BatchDeleteSqlTestsResponse
	(*BatchUpsertSqlTestsResponse_UpsertError)(nil), // 8: synq.datachecks.sqltests.v1.BatchUpsertSqlTestsResponse.UpsertError
	nil,                   // 9: synq.datachecks.sqltests.v1.BatchGetSqlTestsResponse.SqlTestsEntry
	(*SqlTest)(nil),       // 10: synq.datachecks.sqltests.v1.SqlTest
	(*v1.Annotation)(nil), // 11: synq.entities.v1.Annotation
}
var file_synq_datachecks_sqltests_v1_sql_tests_service_proto_depIdxs = []int32{
	10, // 0: synq.datachecks.sqltests.v1.BatchUpsertSqlTestsRequest.sql_tests:type_name -> synq.datachecks.sqltests.v1.SqlTest
	8,  // 1: synq.datachecks.sqltests.v1.BatchUpsertSqlTestsResponse.errors:type_name -> synq.datachecks.sqltests.v1.BatchUpsertSqlTestsResponse.UpsertError
	11, // 2: synq.datachecks.sqltests.v1.ListSqlTestsRequest.annotations:type_name -> synq.entities.v1.Annotation
	10, // 3: synq.datachecks.sqltests.v1.ListSqlTestsResponse.sql_tests:type_name -> synq.datachecks.sqltests.v1.SqlTest
	9,  // 4: synq.datachecks.sqltests.v1.BatchGetSqlTestsResponse.sql_tests:type_name -> synq.datachecks.sqltests.v1.BatchGetSqlTestsResponse.SqlTestsEntry
	10, // 5: synq.datachecks.sqltests.v1.BatchGetSqlTestsResponse.SqlTestsEntry.value:type_name -> synq.datachecks.sqltests.v1.SqlTest
	0,  // 6: synq.datachecks.sqltests.v1.SqlTestsService.BatchUpsertSqlTests:input_type -> synq.datachecks.sqltests.v1.BatchUpsertSqlTestsRequest
	2,  // 7: synq.datachecks.sqltests.v1.SqlTestsService.ListSqlTests:input_type -> synq.datachecks.sqltests.v1.ListSqlTestsRequest
	4,  // 8: synq.datachecks.sqltests.v1.SqlTestsService.BatchGetSqlTests:input_type -> synq.datachecks.sqltests.v1.BatchGetSqlTestsRequest
	6,  // 9: synq.datachecks.sqltests.v1.SqlTestsService.BatchDeleteSqlTests:input_type -> synq.datachecks.sqltests.v1.BatchDeleteSqlTestsRequest
	1,  // 10: synq.datachecks.sqltests.v1.SqlTestsService.BatchUpsertSqlTests:output_type -> synq.datachecks.sqltests.v1.BatchUpsertSqlTestsResponse
	3,  // 11: synq.datachecks.sqltests.v1.SqlTestsService.ListSqlTests:output_type -> synq.datachecks.sqltests.v1.ListSqlTestsResponse
	5,  // 12: synq.datachecks.sqltests.v1.SqlTestsService.BatchGetSqlTests:output_type -> synq.datachecks.sqltests.v1.BatchGetSqlTestsResponse
	7,  // 13: synq.datachecks.sqltests.v1.SqlTestsService.BatchDeleteSqlTests:output_type -> synq.datachecks.sqltests.v1.BatchDeleteSqlTestsResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_synq_datachecks_sqltests_v1_sql_tests_service_proto_init() }
func file_synq_datachecks_sqltests_v1_sql_tests_service_proto_init() {
	if File_synq_datachecks_sqltests_v1_sql_tests_service_proto != nil {
		return
	}
	file_synq_datachecks_sqltests_v1_sql_tests_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDesc), len(file_synq_datachecks_sqltests_v1_sql_tests_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_synq_datachecks_sqltests_v1_sql_tests_service_proto_goTypes,
		DependencyIndexes: file_synq_datachecks_sqltests_v1_sql_tests_service_proto_depIdxs,
		MessageInfos:      file_synq_datachecks_sqltests_v1_sql_tests_service_proto_msgTypes,
	}.Build()
	File_synq_datachecks_sqltests_v1_sql_tests_service_proto = out.File
	file_synq_datachecks_sqltests_v1_sql_tests_service_proto_goTypes = nil
	file_synq_datachecks_sqltests_v1_sql_tests_service_proto_depIdxs = nil
}
