// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: synq/dataproducts/v1/dataproduct_definition.proto

package v1

import (
	v11 "github.com/getsynq/api/entities/v1"
	v1 "github.com/getsynq/api/queries/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataproductDefinition struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Parts         []*DataproductDefinition_Part `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataproductDefinition) Reset() {
	*x = DataproductDefinition{}
	mi := &file_synq_dataproducts_v1_dataproduct_definition_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataproductDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataproductDefinition) ProtoMessage() {}

func (x *DataproductDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_synq_dataproducts_v1_dataproduct_definition_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataproductDefinition.ProtoReflect.Descriptor instead.
func (*DataproductDefinition) Descriptor() ([]byte, []int) {
	return file_synq_dataproducts_v1_dataproduct_definition_proto_rawDescGZIP(), []int{0}
}

func (x *DataproductDefinition) GetParts() []*DataproductDefinition_Part {
	if x != nil {
		return x.Parts
	}
	return nil
}

type AssetSelectionQuery struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Parts         []*AssetSelectionQuery_QueryPart `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
	Operand       v1.QueryOperand                  `protobuf:"varint,2,opt,name=operand,proto3,enum=synq.queries.v1.QueryOperand" json:"operand,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetSelectionQuery) Reset() {
	*x = AssetSelectionQuery{}
	mi := &file_synq_dataproducts_v1_dataproduct_definition_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetSelectionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSelectionQuery) ProtoMessage() {}

func (x *AssetSelectionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_synq_dataproducts_v1_dataproduct_definition_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSelectionQuery.ProtoReflect.Descriptor instead.
func (*AssetSelectionQuery) Descriptor() ([]byte, []int) {
	return file_synq_dataproducts_v1_dataproduct_definition_proto_rawDescGZIP(), []int{1}
}

func (x *AssetSelectionQuery) GetParts() []*AssetSelectionQuery_QueryPart {
	if x != nil {
		return x.Parts
	}
	return nil
}

func (x *AssetSelectionQuery) GetOperand() v1.QueryOperand {
	if x != nil {
		return x.Operand
	}
	return v1.QueryOperand(0)
}

type DataproductDefinition_Part struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // part identifier
	// Types that are valid to be assigned to Part:
	//
	//	*DataproductDefinition_Part_Identifier
	//	*DataproductDefinition_Part_Query
	Part          isDataproductDefinition_Part_Part `protobuf_oneof:"part"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataproductDefinition_Part) Reset() {
	*x = DataproductDefinition_Part{}
	mi := &file_synq_dataproducts_v1_dataproduct_definition_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataproductDefinition_Part) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataproductDefinition_Part) ProtoMessage() {}

func (x *DataproductDefinition_Part) ProtoReflect() protoreflect.Message {
	mi := &file_synq_dataproducts_v1_dataproduct_definition_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataproductDefinition_Part.ProtoReflect.Descriptor instead.
func (*DataproductDefinition_Part) Descriptor() ([]byte, []int) {
	return file_synq_dataproducts_v1_dataproduct_definition_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DataproductDefinition_Part) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataproductDefinition_Part) GetPart() isDataproductDefinition_Part_Part {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *DataproductDefinition_Part) GetIdentifier() *v11.Identifier {
	if x != nil {
		if x, ok := x.Part.(*DataproductDefinition_Part_Identifier); ok {
			return x.Identifier
		}
	}
	return nil
}

func (x *DataproductDefinition_Part) GetQuery() *AssetSelectionQuery {
	if x != nil {
		if x, ok := x.Part.(*DataproductDefinition_Part_Query); ok {
			return x.Query
		}
	}
	return nil
}

type isDataproductDefinition_Part_Part interface {
	isDataproductDefinition_Part_Part()
}

type DataproductDefinition_Part_Identifier struct {
	Identifier *v11.Identifier `protobuf:"bytes,11,opt,name=identifier,proto3,oneof"`
}

type DataproductDefinition_Part_Query struct {
	Query *AssetSelectionQuery `protobuf:"bytes,12,opt,name=query,proto3,oneof"`
}

func (*DataproductDefinition_Part_Identifier) isDataproductDefinition_Part_Part() {}

func (*DataproductDefinition_Part_Query) isDataproductDefinition_Part_Part() {}

type AssetSelectionQuery_QueryPart struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Part:
	//
	//	*AssetSelectionQuery_QueryPart_IdentifierList
	//	*AssetSelectionQuery_QueryPart_WithNameSearch
	//	*AssetSelectionQuery_QueryPart_WithType
	//	*AssetSelectionQuery_QueryPart_WithAnnotation
	//	*AssetSelectionQuery_QueryPart_InDataPlatform
	//	*AssetSelectionQuery_QueryPart_InFolder
	//	*AssetSelectionQuery_QueryPart_Query
	//	*AssetSelectionQuery_QueryPart_Unsupported
	Part          isAssetSelectionQuery_QueryPart_Part `protobuf_oneof:"part"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetSelectionQuery_QueryPart) Reset() {
	*x = AssetSelectionQuery_QueryPart{}
	mi := &file_synq_dataproducts_v1_dataproduct_definition_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetSelectionQuery_QueryPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSelectionQuery_QueryPart) ProtoMessage() {}

func (x *AssetSelectionQuery_QueryPart) ProtoReflect() protoreflect.Message {
	mi := &file_synq_dataproducts_v1_dataproduct_definition_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSelectionQuery_QueryPart.ProtoReflect.Descriptor instead.
func (*AssetSelectionQuery_QueryPart) Descriptor() ([]byte, []int) {
	return file_synq_dataproducts_v1_dataproduct_definition_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AssetSelectionQuery_QueryPart) GetPart() isAssetSelectionQuery_QueryPart_Part {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *AssetSelectionQuery_QueryPart) GetIdentifierList() *v1.IdentifierList {
	if x != nil {
		if x, ok := x.Part.(*AssetSelectionQuery_QueryPart_IdentifierList); ok {
			return x.IdentifierList
		}
	}
	return nil
}

func (x *AssetSelectionQuery_QueryPart) GetWithNameSearch() *v1.WithNameSearch {
	if x != nil {
		if x, ok := x.Part.(*AssetSelectionQuery_QueryPart_WithNameSearch); ok {
			return x.WithNameSearch
		}
	}
	return nil
}

func (x *AssetSelectionQuery_QueryPart) GetWithType() *v1.WithType {
	if x != nil {
		if x, ok := x.Part.(*AssetSelectionQuery_QueryPart_WithType); ok {
			return x.WithType
		}
	}
	return nil
}

func (x *AssetSelectionQuery_QueryPart) GetWithAnnotation() *v1.WithAnnotation {
	if x != nil {
		if x, ok := x.Part.(*AssetSelectionQuery_QueryPart_WithAnnotation); ok {
			return x.WithAnnotation
		}
	}
	return nil
}

func (x *AssetSelectionQuery_QueryPart) GetInDataPlatform() *v1.InDataPlatform {
	if x != nil {
		if x, ok := x.Part.(*AssetSelectionQuery_QueryPart_InDataPlatform); ok {
			return x.InDataPlatform
		}
	}
	return nil
}

func (x *AssetSelectionQuery_QueryPart) GetInFolder() *v1.InFolder {
	if x != nil {
		if x, ok := x.Part.(*AssetSelectionQuery_QueryPart_InFolder); ok {
			return x.InFolder
		}
	}
	return nil
}

func (x *AssetSelectionQuery_QueryPart) GetQuery() *AssetSelectionQuery {
	if x != nil {
		if x, ok := x.Part.(*AssetSelectionQuery_QueryPart_Query); ok {
			return x.Query
		}
	}
	return nil
}

func (x *AssetSelectionQuery_QueryPart) GetUnsupported() *v1.Unsupported {
	if x != nil {
		if x, ok := x.Part.(*AssetSelectionQuery_QueryPart_Unsupported); ok {
			return x.Unsupported
		}
	}
	return nil
}

type isAssetSelectionQuery_QueryPart_Part interface {
	isAssetSelectionQuery_QueryPart_Part()
}

type AssetSelectionQuery_QueryPart_IdentifierList struct {
	IdentifierList *v1.IdentifierList `protobuf:"bytes,1,opt,name=identifier_list,json=identifierList,proto3,oneof"`
}

type AssetSelectionQuery_QueryPart_WithNameSearch struct {
	WithNameSearch *v1.WithNameSearch `protobuf:"bytes,2,opt,name=with_name_search,json=withNameSearch,proto3,oneof"`
}

type AssetSelectionQuery_QueryPart_WithType struct {
	WithType *v1.WithType `protobuf:"bytes,3,opt,name=with_type,json=withType,proto3,oneof"`
}

type AssetSelectionQuery_QueryPart_WithAnnotation struct {
	WithAnnotation *v1.WithAnnotation `protobuf:"bytes,4,opt,name=with_annotation,json=withAnnotation,proto3,oneof"`
}

type AssetSelectionQuery_QueryPart_InDataPlatform struct {
	InDataPlatform *v1.InDataPlatform `protobuf:"bytes,5,opt,name=in_data_platform,json=inDataPlatform,proto3,oneof"`
}

type AssetSelectionQuery_QueryPart_InFolder struct {
	InFolder *v1.InFolder `protobuf:"bytes,6,opt,name=in_folder,json=inFolder,proto3,oneof"`
}

type AssetSelectionQuery_QueryPart_Query struct {
	Query *AssetSelectionQuery `protobuf:"bytes,100,opt,name=query,proto3,oneof"`
}

type AssetSelectionQuery_QueryPart_Unsupported struct {
	Unsupported *v1.Unsupported `protobuf:"bytes,101,opt,name=unsupported,proto3,oneof"`
}

func (*AssetSelectionQuery_QueryPart_IdentifierList) isAssetSelectionQuery_QueryPart_Part() {}

func (*AssetSelectionQuery_QueryPart_WithNameSearch) isAssetSelectionQuery_QueryPart_Part() {}

func (*AssetSelectionQuery_QueryPart_WithType) isAssetSelectionQuery_QueryPart_Part() {}

func (*AssetSelectionQuery_QueryPart_WithAnnotation) isAssetSelectionQuery_QueryPart_Part() {}

func (*AssetSelectionQuery_QueryPart_InDataPlatform) isAssetSelectionQuery_QueryPart_Part() {}

func (*AssetSelectionQuery_QueryPart_InFolder) isAssetSelectionQuery_QueryPart_Part() {}

func (*AssetSelectionQuery_QueryPart_Query) isAssetSelectionQuery_QueryPart_Part() {}

func (*AssetSelectionQuery_QueryPart_Unsupported) isAssetSelectionQuery_QueryPart_Part() {}

var File_synq_dataproducts_v1_dataproduct_definition_proto protoreflect.FileDescriptor

var file_synq_dataproducts_v1_dataproduct_definition_proto_rawDesc = string([]byte{
	0x0a, 0x31, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x73, 0x79, 0x6e, 0x71, 0x2f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x79,
	0x6e, 0x71, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x02, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x1a, 0xa1, 0x01, 0x0a, 0x04, 0x50, 0x61, 0x72, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x22, 0xda, 0x05, 0x0a, 0x13, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x12, 0x37, 0x0a,
	0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x1a, 0xbe, 0x04, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x79, 0x6e, 0x71, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4b, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0e, 0x77,
	0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x38, 0x0a,
	0x09, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x77,
	0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x10, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x79, 0x6e, 0x71, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x48, 0x00,
	0x52, 0x0e, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x08, 0x69, 0x6e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x79, 0x6e, 0x71,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x40, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42,
	0x06, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x42, 0xd0, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x79, 0x6e, 0x71, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x42, 0x1a, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x65, 0x74, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x44, 0x58,
	0xaa, 0x02, 0x14, 0x53, 0x79, 0x6e, 0x71, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x14, 0x53, 0x79, 0x6e, 0x71, 0x5c, 0x44,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x20, 0x53, 0x79, 0x6e, 0x71, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x16, 0x53, 0x79, 0x6e, 0x71, 0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_synq_dataproducts_v1_dataproduct_definition_proto_rawDescOnce sync.Once
	file_synq_dataproducts_v1_dataproduct_definition_proto_rawDescData []byte
)

func file_synq_dataproducts_v1_dataproduct_definition_proto_rawDescGZIP() []byte {
	file_synq_dataproducts_v1_dataproduct_definition_proto_rawDescOnce.Do(func() {
		file_synq_dataproducts_v1_dataproduct_definition_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_synq_dataproducts_v1_dataproduct_definition_proto_rawDesc), len(file_synq_dataproducts_v1_dataproduct_definition_proto_rawDesc)))
	})
	return file_synq_dataproducts_v1_dataproduct_definition_proto_rawDescData
}

var file_synq_dataproducts_v1_dataproduct_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_synq_dataproducts_v1_dataproduct_definition_proto_goTypes = []any{
	(*DataproductDefinition)(nil),         // 0: synq.dataproducts.v1.DataproductDefinition
	(*AssetSelectionQuery)(nil),           // 1: synq.dataproducts.v1.AssetSelectionQuery
	(*DataproductDefinition_Part)(nil),    // 2: synq.dataproducts.v1.DataproductDefinition.Part
	(*AssetSelectionQuery_QueryPart)(nil), // 3: synq.dataproducts.v1.AssetSelectionQuery.QueryPart
	(v1.QueryOperand)(0),                  // 4: synq.queries.v1.QueryOperand
	(*v11.Identifier)(nil),                // 5: synq.entities.v1.Identifier
	(*v1.IdentifierList)(nil),             // 6: synq.queries.v1.IdentifierList
	(*v1.WithNameSearch)(nil),             // 7: synq.queries.v1.WithNameSearch
	(*v1.WithType)(nil),                   // 8: synq.queries.v1.WithType
	(*v1.WithAnnotation)(nil),             // 9: synq.queries.v1.WithAnnotation
	(*v1.InDataPlatform)(nil),             // 10: synq.queries.v1.InDataPlatform
	(*v1.InFolder)(nil),                   // 11: synq.queries.v1.InFolder
	(*v1.Unsupported)(nil),                // 12: synq.queries.v1.Unsupported
}
var file_synq_dataproducts_v1_dataproduct_definition_proto_depIdxs = []int32{
	2,  // 0: synq.dataproducts.v1.DataproductDefinition.parts:type_name -> synq.dataproducts.v1.DataproductDefinition.Part
	3,  // 1: synq.dataproducts.v1.AssetSelectionQuery.parts:type_name -> synq.dataproducts.v1.AssetSelectionQuery.QueryPart
	4,  // 2: synq.dataproducts.v1.AssetSelectionQuery.operand:type_name -> synq.queries.v1.QueryOperand
	5,  // 3: synq.dataproducts.v1.DataproductDefinition.Part.identifier:type_name -> synq.entities.v1.Identifier
	1,  // 4: synq.dataproducts.v1.DataproductDefinition.Part.query:type_name -> synq.dataproducts.v1.AssetSelectionQuery
	6,  // 5: synq.dataproducts.v1.AssetSelectionQuery.QueryPart.identifier_list:type_name -> synq.queries.v1.IdentifierList
	7,  // 6: synq.dataproducts.v1.AssetSelectionQuery.QueryPart.with_name_search:type_name -> synq.queries.v1.WithNameSearch
	8,  // 7: synq.dataproducts.v1.AssetSelectionQuery.QueryPart.with_type:type_name -> synq.queries.v1.WithType
	9,  // 8: synq.dataproducts.v1.AssetSelectionQuery.QueryPart.with_annotation:type_name -> synq.queries.v1.WithAnnotation
	10, // 9: synq.dataproducts.v1.AssetSelectionQuery.QueryPart.in_data_platform:type_name -> synq.queries.v1.InDataPlatform
	11, // 10: synq.dataproducts.v1.AssetSelectionQuery.QueryPart.in_folder:type_name -> synq.queries.v1.InFolder
	1,  // 11: synq.dataproducts.v1.AssetSelectionQuery.QueryPart.query:type_name -> synq.dataproducts.v1.AssetSelectionQuery
	12, // 12: synq.dataproducts.v1.AssetSelectionQuery.QueryPart.unsupported:type_name -> synq.queries.v1.Unsupported
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_synq_dataproducts_v1_dataproduct_definition_proto_init() }
func file_synq_dataproducts_v1_dataproduct_definition_proto_init() {
	if File_synq_dataproducts_v1_dataproduct_definition_proto != nil {
		return
	}
	file_synq_dataproducts_v1_dataproduct_definition_proto_msgTypes[2].OneofWrappers = []any{
		(*DataproductDefinition_Part_Identifier)(nil),
		(*DataproductDefinition_Part_Query)(nil),
	}
	file_synq_dataproducts_v1_dataproduct_definition_proto_msgTypes[3].OneofWrappers = []any{
		(*AssetSelectionQuery_QueryPart_IdentifierList)(nil),
		(*AssetSelectionQuery_QueryPart_WithNameSearch)(nil),
		(*AssetSelectionQuery_QueryPart_WithType)(nil),
		(*AssetSelectionQuery_QueryPart_WithAnnotation)(nil),
		(*AssetSelectionQuery_QueryPart_InDataPlatform)(nil),
		(*AssetSelectionQuery_QueryPart_InFolder)(nil),
		(*AssetSelectionQuery_QueryPart_Query)(nil),
		(*AssetSelectionQuery_QueryPart_Unsupported)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_synq_dataproducts_v1_dataproduct_definition_proto_rawDesc), len(file_synq_dataproducts_v1_dataproduct_definition_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_synq_dataproducts_v1_dataproduct_definition_proto_goTypes,
		DependencyIndexes: file_synq_dataproducts_v1_dataproduct_definition_proto_depIdxs,
		MessageInfos:      file_synq_dataproducts_v1_dataproduct_definition_proto_msgTypes,
	}.Build()
	File_synq_dataproducts_v1_dataproduct_definition_proto = out.File
	file_synq_dataproducts_v1_dataproduct_definition_proto_goTypes = nil
	file_synq_dataproducts_v1_dataproduct_definition_proto_depIdxs = nil
}
