// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: synq/dataproducts/v1/dataproducts_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataproductsService_Upsert_FullMethodName               = "/synq.dataproducts.v1.DataproductsService/Upsert"
	DataproductsService_Get_FullMethodName                  = "/synq.dataproducts.v1.DataproductsService/Get"
	DataproductsService_List_FullMethodName                 = "/synq.dataproducts.v1.DataproductsService/List"
	DataproductsService_Delete_FullMethodName               = "/synq.dataproducts.v1.DataproductsService/Delete"
	DataproductsService_SetDefinition_FullMethodName        = "/synq.dataproducts.v1.DataproductsService/SetDefinition"
	DataproductsService_AddDefinitionPart_FullMethodName    = "/synq.dataproducts.v1.DataproductsService/AddDefinitionPart"
	DataproductsService_RemoveDefinitionPart_FullMethodName = "/synq.dataproducts.v1.DataproductsService/RemoveDefinitionPart"
)

// DataproductsServiceClient is the client API for DataproductsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DataproductsService can be used to manage data products.
type DataproductsServiceClient interface {
	// Create or update a dataproduct.
	Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*UpsertResponse, error)
	// Get multiple dataproducts by their identifiers.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// List all the dataproducts in the current scope.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Delete a dataproduct by its identifier.
	// Soft deletes by default. Optionally purge the dataproduct to release the identifier.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Set the definition for an existing dataproduct.
	SetDefinition(ctx context.Context, in *SetDefinitionRequest, opts ...grpc.CallOption) (*SetDefinitionResponse, error)
	// Add definition part to the definition of an existing dataproduct.
	AddDefinitionPart(ctx context.Context, in *AddDefinitionPartRequest, opts ...grpc.CallOption) (*AddDefinitionPartResponse, error)
	// Remove definition part from the definition of an existing dataproduct.
	RemoveDefinitionPart(ctx context.Context, in *RemoveDefinitionPartRequest, opts ...grpc.CallOption) (*RemoveDefinitionPartResponse, error)
}

type dataproductsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataproductsServiceClient(cc grpc.ClientConnInterface) DataproductsServiceClient {
	return &dataproductsServiceClient{cc}
}

func (c *dataproductsServiceClient) Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*UpsertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertResponse)
	err := c.cc.Invoke(ctx, DataproductsService_Upsert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproductsServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, DataproductsService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproductsServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, DataproductsService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproductsServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, DataproductsService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproductsServiceClient) SetDefinition(ctx context.Context, in *SetDefinitionRequest, opts ...grpc.CallOption) (*SetDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDefinitionResponse)
	err := c.cc.Invoke(ctx, DataproductsService_SetDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproductsServiceClient) AddDefinitionPart(ctx context.Context, in *AddDefinitionPartRequest, opts ...grpc.CallOption) (*AddDefinitionPartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDefinitionPartResponse)
	err := c.cc.Invoke(ctx, DataproductsService_AddDefinitionPart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproductsServiceClient) RemoveDefinitionPart(ctx context.Context, in *RemoveDefinitionPartRequest, opts ...grpc.CallOption) (*RemoveDefinitionPartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDefinitionPartResponse)
	err := c.cc.Invoke(ctx, DataproductsService_RemoveDefinitionPart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataproductsServiceServer is the server API for DataproductsService service.
// All implementations must embed UnimplementedDataproductsServiceServer
// for forward compatibility.
//
// DataproductsService can be used to manage data products.
type DataproductsServiceServer interface {
	// Create or update a dataproduct.
	Upsert(context.Context, *UpsertRequest) (*UpsertResponse, error)
	// Get multiple dataproducts by their identifiers.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// List all the dataproducts in the current scope.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Delete a dataproduct by its identifier.
	// Soft deletes by default. Optionally purge the dataproduct to release the identifier.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Set the definition for an existing dataproduct.
	SetDefinition(context.Context, *SetDefinitionRequest) (*SetDefinitionResponse, error)
	// Add definition part to the definition of an existing dataproduct.
	AddDefinitionPart(context.Context, *AddDefinitionPartRequest) (*AddDefinitionPartResponse, error)
	// Remove definition part from the definition of an existing dataproduct.
	RemoveDefinitionPart(context.Context, *RemoveDefinitionPartRequest) (*RemoveDefinitionPartResponse, error)
	mustEmbedUnimplementedDataproductsServiceServer()
}

// UnimplementedDataproductsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataproductsServiceServer struct{}

func (UnimplementedDataproductsServiceServer) Upsert(context.Context, *UpsertRequest) (*UpsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedDataproductsServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDataproductsServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDataproductsServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDataproductsServiceServer) SetDefinition(context.Context, *SetDefinitionRequest) (*SetDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefinition not implemented")
}
func (UnimplementedDataproductsServiceServer) AddDefinitionPart(context.Context, *AddDefinitionPartRequest) (*AddDefinitionPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDefinitionPart not implemented")
}
func (UnimplementedDataproductsServiceServer) RemoveDefinitionPart(context.Context, *RemoveDefinitionPartRequest) (*RemoveDefinitionPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDefinitionPart not implemented")
}
func (UnimplementedDataproductsServiceServer) mustEmbedUnimplementedDataproductsServiceServer() {}
func (UnimplementedDataproductsServiceServer) testEmbeddedByValue()                             {}

// UnsafeDataproductsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataproductsServiceServer will
// result in compilation errors.
type UnsafeDataproductsServiceServer interface {
	mustEmbedUnimplementedDataproductsServiceServer()
}

func RegisterDataproductsServiceServer(s grpc.ServiceRegistrar, srv DataproductsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataproductsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataproductsService_ServiceDesc, srv)
}

func _DataproductsService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproductsServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproductsService_Upsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproductsServiceServer).Upsert(ctx, req.(*UpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproductsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproductsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproductsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproductsServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproductsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproductsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproductsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproductsServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproductsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproductsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproductsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproductsServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproductsService_SetDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproductsServiceServer).SetDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproductsService_SetDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproductsServiceServer).SetDefinition(ctx, req.(*SetDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproductsService_AddDefinitionPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDefinitionPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproductsServiceServer).AddDefinitionPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproductsService_AddDefinitionPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproductsServiceServer).AddDefinitionPart(ctx, req.(*AddDefinitionPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproductsService_RemoveDefinitionPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDefinitionPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproductsServiceServer).RemoveDefinitionPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproductsService_RemoveDefinitionPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproductsServiceServer).RemoveDefinitionPart(ctx, req.(*RemoveDefinitionPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataproductsService_ServiceDesc is the grpc.ServiceDesc for DataproductsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataproductsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synq.dataproducts.v1.DataproductsService",
	HandlerType: (*DataproductsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upsert",
			Handler:    _DataproductsService_Upsert_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DataproductsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DataproductsService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DataproductsService_Delete_Handler,
		},
		{
			MethodName: "SetDefinition",
			Handler:    _DataproductsService_SetDefinition_Handler,
		},
		{
			MethodName: "AddDefinitionPart",
			Handler:    _DataproductsService_AddDefinitionPart_Handler,
		},
		{
			MethodName: "RemoveDefinitionPart",
			Handler:    _DataproductsService_RemoveDefinitionPart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synq/dataproducts/v1/dataproducts_service.proto",
}
