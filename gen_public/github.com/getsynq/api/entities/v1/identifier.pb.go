// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: synq/entities/v1/identifier.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Identifier is a unique reference to an entity in Synq system. Entity identifiers
// are designed to closely mimic identifiers used by data platforms and tools. To construct
// an identifier, you need to know the kind of the entity and the ids that you would normally
// use to identify it in the data platform or tool. For example, to identify a table in BigQuery,
// you would need to know the project, dataset, and table names.
type Identifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Id:
	//
	//	*Identifier_DbtCoreNode
	//	*Identifier_DbtCloudNode
	//	*Identifier_BigqueryTable
	//	*Identifier_SnowflakeTable
	//	*Identifier_RedshiftTable
	//	*Identifier_PostgresTable
	//	*Identifier_MysqlTable
	//	*Identifier_ClickhouseTable
	//	*Identifier_DatabricksTable
	//	*Identifier_AirflowDag
	//	*Identifier_AirflowTask
	//	*Identifier_Custom
	//	*Identifier_Dataproduct
	//	*Identifier_SynqPath
	Id            isIdentifier_Id `protobuf_oneof:"id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{0}
}

func (x *Identifier) GetId() isIdentifier_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Identifier) GetDbtCoreNode() *DbtCoreNodeIdentifier {
	if x != nil {
		if x, ok := x.Id.(*Identifier_DbtCoreNode); ok {
			return x.DbtCoreNode
		}
	}
	return nil
}

func (x *Identifier) GetDbtCloudNode() *DbtCloudNodeIdentifier {
	if x != nil {
		if x, ok := x.Id.(*Identifier_DbtCloudNode); ok {
			return x.DbtCloudNode
		}
	}
	return nil
}

func (x *Identifier) GetBigqueryTable() *BigqueryTableIdentifier {
	if x != nil {
		if x, ok := x.Id.(*Identifier_BigqueryTable); ok {
			return x.BigqueryTable
		}
	}
	return nil
}

func (x *Identifier) GetSnowflakeTable() *SnowflakeTableIdentifier {
	if x != nil {
		if x, ok := x.Id.(*Identifier_SnowflakeTable); ok {
			return x.SnowflakeTable
		}
	}
	return nil
}

func (x *Identifier) GetRedshiftTable() *RedshiftTableIdentifier {
	if x != nil {
		if x, ok := x.Id.(*Identifier_RedshiftTable); ok {
			return x.RedshiftTable
		}
	}
	return nil
}

func (x *Identifier) GetPostgresTable() *PostgresTableIdentifier {
	if x != nil {
		if x, ok := x.Id.(*Identifier_PostgresTable); ok {
			return x.PostgresTable
		}
	}
	return nil
}

func (x *Identifier) GetMysqlTable() *MysqlTableIdentifier {
	if x != nil {
		if x, ok := x.Id.(*Identifier_MysqlTable); ok {
			return x.MysqlTable
		}
	}
	return nil
}

func (x *Identifier) GetClickhouseTable() *ClickhouseTableIdentifier {
	if x != nil {
		if x, ok := x.Id.(*Identifier_ClickhouseTable); ok {
			return x.ClickhouseTable
		}
	}
	return nil
}

func (x *Identifier) GetDatabricksTable() *DatabricksTableIdentifier {
	if x != nil {
		if x, ok := x.Id.(*Identifier_DatabricksTable); ok {
			return x.DatabricksTable
		}
	}
	return nil
}

func (x *Identifier) GetAirflowDag() *AirflowDagIdentifier {
	if x != nil {
		if x, ok := x.Id.(*Identifier_AirflowDag); ok {
			return x.AirflowDag
		}
	}
	return nil
}

func (x *Identifier) GetAirflowTask() *AirflowTaskIdentifier {
	if x != nil {
		if x, ok := x.Id.(*Identifier_AirflowTask); ok {
			return x.AirflowTask
		}
	}
	return nil
}

func (x *Identifier) GetCustom() *CustomIdentifier {
	if x != nil {
		if x, ok := x.Id.(*Identifier_Custom); ok {
			return x.Custom
		}
	}
	return nil
}

func (x *Identifier) GetDataproduct() *DataproductIdentifier {
	if x != nil {
		if x, ok := x.Id.(*Identifier_Dataproduct); ok {
			return x.Dataproduct
		}
	}
	return nil
}

func (x *Identifier) GetSynqPath() *SynqPathIdentifier {
	if x != nil {
		if x, ok := x.Id.(*Identifier_SynqPath); ok {
			return x.SynqPath
		}
	}
	return nil
}

type isIdentifier_Id interface {
	isIdentifier_Id()
}

type Identifier_DbtCoreNode struct {
	// Dbt node that identifies one of dbt DAG nodes (model, test, etc) in dbt Core project
	DbtCoreNode *DbtCoreNodeIdentifier `protobuf:"bytes,1,opt,name=dbt_core_node,json=dbtCoreNode,proto3,oneof"`
}

type Identifier_DbtCloudNode struct {
	// Dbt node that identifies one of dbt DAG nodes (model, test, etc) in dbt Cloud project
	DbtCloudNode *DbtCloudNodeIdentifier `protobuf:"bytes,2,opt,name=dbt_cloud_node,json=dbtCloudNode,proto3,oneof"`
}

type Identifier_BigqueryTable struct {
	// BigQuery table identifier
	BigqueryTable *BigqueryTableIdentifier `protobuf:"bytes,3,opt,name=bigquery_table,json=bigqueryTable,proto3,oneof"`
}

type Identifier_SnowflakeTable struct {
	// Snowflake table identifier
	SnowflakeTable *SnowflakeTableIdentifier `protobuf:"bytes,4,opt,name=snowflake_table,json=snowflakeTable,proto3,oneof"`
}

type Identifier_RedshiftTable struct {
	// Redshift table identifier
	RedshiftTable *RedshiftTableIdentifier `protobuf:"bytes,5,opt,name=redshift_table,json=redshiftTable,proto3,oneof"`
}

type Identifier_PostgresTable struct {
	// Postgres table identifier
	PostgresTable *PostgresTableIdentifier `protobuf:"bytes,6,opt,name=postgres_table,json=postgresTable,proto3,oneof"`
}

type Identifier_MysqlTable struct {
	// Mysql table identifier
	MysqlTable *MysqlTableIdentifier `protobuf:"bytes,7,opt,name=mysql_table,json=mysqlTable,proto3,oneof"`
}

type Identifier_ClickhouseTable struct {
	// Clickhouse table identifier
	ClickhouseTable *ClickhouseTableIdentifier `protobuf:"bytes,8,opt,name=clickhouse_table,json=clickhouseTable,proto3,oneof"`
}

type Identifier_DatabricksTable struct {
	// Databricks table identifier
	DatabricksTable *DatabricksTableIdentifier `protobuf:"bytes,14,opt,name=databricks_table,json=databricksTable,proto3,oneof"`
}

type Identifier_AirflowDag struct {
	// Airflow DAG identifier
	AirflowDag *AirflowDagIdentifier `protobuf:"bytes,9,opt,name=airflow_dag,json=airflowDag,proto3,oneof"`
}

type Identifier_AirflowTask struct {
	// Airflow task identifier within a given DAG
	AirflowTask *AirflowTaskIdentifier `protobuf:"bytes,10,opt,name=airflow_task,json=airflowTask,proto3,oneof"`
}

type Identifier_Custom struct {
	// Custom identifier to be used with all custom created entities
	Custom *CustomIdentifier `protobuf:"bytes,11,opt,name=custom,proto3,oneof"`
}

type Identifier_Dataproduct struct {
	// Dataproduct identifier
	Dataproduct *DataproductIdentifier `protobuf:"bytes,12,opt,name=dataproduct,proto3,oneof"`
}

type Identifier_SynqPath struct {
	// SynqPath identifier
	SynqPath *SynqPathIdentifier `protobuf:"bytes,13,opt,name=synq_path,json=synqPath,proto3,oneof"`
}

func (*Identifier_DbtCoreNode) isIdentifier_Id() {}

func (*Identifier_DbtCloudNode) isIdentifier_Id() {}

func (*Identifier_BigqueryTable) isIdentifier_Id() {}

func (*Identifier_SnowflakeTable) isIdentifier_Id() {}

func (*Identifier_RedshiftTable) isIdentifier_Id() {}

func (*Identifier_PostgresTable) isIdentifier_Id() {}

func (*Identifier_MysqlTable) isIdentifier_Id() {}

func (*Identifier_ClickhouseTable) isIdentifier_Id() {}

func (*Identifier_DatabricksTable) isIdentifier_Id() {}

func (*Identifier_AirflowDag) isIdentifier_Id() {}

func (*Identifier_AirflowTask) isIdentifier_Id() {}

func (*Identifier_Custom) isIdentifier_Id() {}

func (*Identifier_Dataproduct) isIdentifier_Id() {}

func (*Identifier_SynqPath) isIdentifier_Id() {}

type DbtCoreNodeIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Synq integration_id that identifies the dbt Core project
	IntegrationId string `protobuf:"bytes,1,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"`
	// Dbt node_id that identifies one of dbt DAG nodes (model, test, etc)
	NodeId        string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbtCoreNodeIdentifier) Reset() {
	*x = DbtCoreNodeIdentifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbtCoreNodeIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbtCoreNodeIdentifier) ProtoMessage() {}

func (x *DbtCoreNodeIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbtCoreNodeIdentifier.ProtoReflect.Descriptor instead.
func (*DbtCoreNodeIdentifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{1}
}

func (x *DbtCoreNodeIdentifier) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *DbtCoreNodeIdentifier) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type DbtCloudNodeIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Your dbt Cloud project id
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Your dbt Cloud account id
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Dbt node_id that identifies one of dbt DAG nodes (model, test, etc)
	NodeId        string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbtCloudNodeIdentifier) Reset() {
	*x = DbtCloudNodeIdentifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbtCloudNodeIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbtCloudNodeIdentifier) ProtoMessage() {}

func (x *DbtCloudNodeIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbtCloudNodeIdentifier.ProtoReflect.Descriptor instead.
func (*DbtCloudNodeIdentifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{2}
}

func (x *DbtCloudNodeIdentifier) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DbtCloudNodeIdentifier) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DbtCloudNodeIdentifier) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type BigqueryTableIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BigQuery project
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// BigQuery dataset id
	Dataset string `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// BigQuery table name
	Table         string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BigqueryTableIdentifier) Reset() {
	*x = BigqueryTableIdentifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigqueryTableIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigqueryTableIdentifier) ProtoMessage() {}

func (x *BigqueryTableIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigqueryTableIdentifier.ProtoReflect.Descriptor instead.
func (*BigqueryTableIdentifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{3}
}

func (x *BigqueryTableIdentifier) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *BigqueryTableIdentifier) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *BigqueryTableIdentifier) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type SnowflakeTableIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Snowflake account
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// Snowflake database
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// Snowflake schema
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// Snowflake table
	Table         string `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnowflakeTableIdentifier) Reset() {
	*x = SnowflakeTableIdentifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnowflakeTableIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeTableIdentifier) ProtoMessage() {}

func (x *SnowflakeTableIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeTableIdentifier.ProtoReflect.Descriptor instead.
func (*SnowflakeTableIdentifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{4}
}

func (x *SnowflakeTableIdentifier) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SnowflakeTableIdentifier) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *SnowflakeTableIdentifier) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *SnowflakeTableIdentifier) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type RedshiftTableIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Redshift cluster
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Redshift database
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// Redshift schema
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// Redshift table
	Table         string `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedshiftTableIdentifier) Reset() {
	*x = RedshiftTableIdentifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedshiftTableIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedshiftTableIdentifier) ProtoMessage() {}

func (x *RedshiftTableIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedshiftTableIdentifier.ProtoReflect.Descriptor instead.
func (*RedshiftTableIdentifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{5}
}

func (x *RedshiftTableIdentifier) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *RedshiftTableIdentifier) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *RedshiftTableIdentifier) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *RedshiftTableIdentifier) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type PostgresTableIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Postgres host inclusive of port
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Postgres database
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// Postgres schema
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// Postgres table
	Table         string `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgresTableIdentifier) Reset() {
	*x = PostgresTableIdentifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresTableIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresTableIdentifier) ProtoMessage() {}

func (x *PostgresTableIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresTableIdentifier.ProtoReflect.Descriptor instead.
func (*PostgresTableIdentifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{6}
}

func (x *PostgresTableIdentifier) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostgresTableIdentifier) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *PostgresTableIdentifier) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *PostgresTableIdentifier) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type MysqlTableIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Mysql host inclusive of port
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Mysql database
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// Mysql table
	Table         string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MysqlTableIdentifier) Reset() {
	*x = MysqlTableIdentifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlTableIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlTableIdentifier) ProtoMessage() {}

func (x *MysqlTableIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlTableIdentifier.ProtoReflect.Descriptor instead.
func (*MysqlTableIdentifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{7}
}

func (x *MysqlTableIdentifier) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MysqlTableIdentifier) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *MysqlTableIdentifier) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type ClickhouseTableIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Clickhouse host inclusive of port
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Clickhouse database
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// Clickhouse table
	Table         string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseTableIdentifier) Reset() {
	*x = ClickhouseTableIdentifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseTableIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseTableIdentifier) ProtoMessage() {}

func (x *ClickhouseTableIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseTableIdentifier.ProtoReflect.Descriptor instead.
func (*ClickhouseTableIdentifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{8}
}

func (x *ClickhouseTableIdentifier) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickhouseTableIdentifier) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *ClickhouseTableIdentifier) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type DatabricksTableIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL of Databricks workspace
	Workspace string `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// Databricks catalog
	Catalog string `protobuf:"bytes,2,opt,name=catalog,proto3" json:"catalog,omitempty"`
	// Databricks schema
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// Databricks table or view
	Table         string `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabricksTableIdentifier) Reset() {
	*x = DatabricksTableIdentifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabricksTableIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabricksTableIdentifier) ProtoMessage() {}

func (x *DatabricksTableIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabricksTableIdentifier.ProtoReflect.Descriptor instead.
func (*DatabricksTableIdentifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{9}
}

func (x *DatabricksTableIdentifier) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *DatabricksTableIdentifier) GetCatalog() string {
	if x != nil {
		return x.Catalog
	}
	return ""
}

func (x *DatabricksTableIdentifier) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *DatabricksTableIdentifier) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type AirflowDagIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Synq integration_id that identifies the Airflow instance
	IntegrationId string `protobuf:"bytes,1,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"`
	// Airflow dag_id that identifies the DAG
	DagId         string `protobuf:"bytes,2,opt,name=dag_id,json=dagId,proto3" json:"dag_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AirflowDagIdentifier) Reset() {
	*x = AirflowDagIdentifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AirflowDagIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirflowDagIdentifier) ProtoMessage() {}

func (x *AirflowDagIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirflowDagIdentifier.ProtoReflect.Descriptor instead.
func (*AirflowDagIdentifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{10}
}

func (x *AirflowDagIdentifier) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *AirflowDagIdentifier) GetDagId() string {
	if x != nil {
		return x.DagId
	}
	return ""
}

type AirflowTaskIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Synq integration_id that identifies the Airflow instance
	IntegrationId string `protobuf:"bytes,1,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"`
	// Airflow dag_id that identifies the DAG
	DagId string `protobuf:"bytes,2,opt,name=dag_id,json=dagId,proto3" json:"dag_id,omitempty"`
	// Airflow task_id that identifies the task within the DAG
	TaskId        string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AirflowTaskIdentifier) Reset() {
	*x = AirflowTaskIdentifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AirflowTaskIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirflowTaskIdentifier) ProtoMessage() {}

func (x *AirflowTaskIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirflowTaskIdentifier.ProtoReflect.Descriptor instead.
func (*AirflowTaskIdentifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{11}
}

func (x *AirflowTaskIdentifier) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *AirflowTaskIdentifier) GetDagId() string {
	if x != nil {
		return x.DagId
	}
	return ""
}

func (x *AirflowTaskIdentifier) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type CustomIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id that identifies the custom entity
	// The Id should be unique within the custom entity Identifier.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomIdentifier) Reset() {
	*x = CustomIdentifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomIdentifier) ProtoMessage() {}

func (x *CustomIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomIdentifier.ProtoReflect.Descriptor instead.
func (*CustomIdentifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{12}
}

func (x *CustomIdentifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DataproductIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Dataproduct id that identifies the Dataproduct
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataproductIdentifier) Reset() {
	*x = DataproductIdentifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataproductIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataproductIdentifier) ProtoMessage() {}

func (x *DataproductIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataproductIdentifier.ProtoReflect.Descriptor instead.
func (*DataproductIdentifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{13}
}

func (x *DataproductIdentifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SynqPathIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Synq path that identifies the Synq entity, needs to be one of supported paths
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SynqPathIdentifier) Reset() {
	*x = SynqPathIdentifier{}
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SynqPathIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynqPathIdentifier) ProtoMessage() {}

func (x *SynqPathIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_v1_identifier_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynqPathIdentifier.ProtoReflect.Descriptor instead.
func (*SynqPathIdentifier) Descriptor() ([]byte, []int) {
	return file_synq_entities_v1_identifier_proto_rawDescGZIP(), []int{14}
}

func (x *SynqPathIdentifier) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_synq_entities_v1_identifier_proto protoreflect.FileDescriptor

var file_synq_entities_v1_identifier_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf5, 0x08, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x4d, 0x0a, 0x0d, 0x64, 0x62, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x62, 0x74, 0x43,
	0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x62, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x50, 0x0a, 0x0e, 0x64, 0x62, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x62, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x62, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c,
	0x61, 0x6b, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a,
	0x0e, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x52, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x79, 0x6e, 0x71,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79,
	0x73, 0x71, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x58, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x6b, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x64, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x79, 0x6e, 0x71,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x67, 0x12,
	0x4c, 0x0a, 0x0c, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0b, 0x61, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3c, 0x0a,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x4b, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x71,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79,
	0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x6e, 0x71, 0x50, 0x61, 0x74, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x71, 0x50, 0x61, 0x74, 0x68, 0x42, 0x0b, 0x0a,
	0x02, 0x69, 0x64, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x6c, 0x0a, 0x15, 0x44, 0x62,
	0x74, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08,
	0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x16, 0x44, 0x62, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x17, 0x42, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x18, 0x53, 0x6e, 0x6f, 0x77, 0x66,
	0x6c, 0x61, 0x6b, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x64, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x70, 0x0a, 0x14, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x75, 0x0a, 0x19, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x19, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x12, 0x1e, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x1c, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x64,
	0x0a, 0x14, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x67, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x06, 0x64, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x64,
	0x61, 0x67, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x41, 0x69, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x06, 0x64, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x64, 0x61, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x2a, 0x0a,
	0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x15, 0x44, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x30, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x71, 0x50, 0x61, 0x74, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x42, 0xad, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x22, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x79, 0x6e,
	0x71, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x53, 0x45, 0x58, 0xaa, 0x02, 0x10, 0x53, 0x79, 0x6e, 0x71, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x53, 0x79, 0x6e,
	0x71, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c,
	0x53, 0x79, 0x6e, 0x71, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x53,
	0x79, 0x6e, 0x71, 0x3a, 0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_synq_entities_v1_identifier_proto_rawDescOnce sync.Once
	file_synq_entities_v1_identifier_proto_rawDescData []byte
)

func file_synq_entities_v1_identifier_proto_rawDescGZIP() []byte {
	file_synq_entities_v1_identifier_proto_rawDescOnce.Do(func() {
		file_synq_entities_v1_identifier_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_synq_entities_v1_identifier_proto_rawDesc), len(file_synq_entities_v1_identifier_proto_rawDesc)))
	})
	return file_synq_entities_v1_identifier_proto_rawDescData
}

var file_synq_entities_v1_identifier_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_synq_entities_v1_identifier_proto_goTypes = []any{
	(*Identifier)(nil),                // 0: synq.entities.v1.Identifier
	(*DbtCoreNodeIdentifier)(nil),     // 1: synq.entities.v1.DbtCoreNodeIdentifier
	(*DbtCloudNodeIdentifier)(nil),    // 2: synq.entities.v1.DbtCloudNodeIdentifier
	(*BigqueryTableIdentifier)(nil),   // 3: synq.entities.v1.BigqueryTableIdentifier
	(*SnowflakeTableIdentifier)(nil),  // 4: synq.entities.v1.SnowflakeTableIdentifier
	(*RedshiftTableIdentifier)(nil),   // 5: synq.entities.v1.RedshiftTableIdentifier
	(*PostgresTableIdentifier)(nil),   // 6: synq.entities.v1.PostgresTableIdentifier
	(*MysqlTableIdentifier)(nil),      // 7: synq.entities.v1.MysqlTableIdentifier
	(*ClickhouseTableIdentifier)(nil), // 8: synq.entities.v1.ClickhouseTableIdentifier
	(*DatabricksTableIdentifier)(nil), // 9: synq.entities.v1.DatabricksTableIdentifier
	(*AirflowDagIdentifier)(nil),      // 10: synq.entities.v1.AirflowDagIdentifier
	(*AirflowTaskIdentifier)(nil),     // 11: synq.entities.v1.AirflowTaskIdentifier
	(*CustomIdentifier)(nil),          // 12: synq.entities.v1.CustomIdentifier
	(*DataproductIdentifier)(nil),     // 13: synq.entities.v1.DataproductIdentifier
	(*SynqPathIdentifier)(nil),        // 14: synq.entities.v1.SynqPathIdentifier
}
var file_synq_entities_v1_identifier_proto_depIdxs = []int32{
	1,  // 0: synq.entities.v1.Identifier.dbt_core_node:type_name -> synq.entities.v1.DbtCoreNodeIdentifier
	2,  // 1: synq.entities.v1.Identifier.dbt_cloud_node:type_name -> synq.entities.v1.DbtCloudNodeIdentifier
	3,  // 2: synq.entities.v1.Identifier.bigquery_table:type_name -> synq.entities.v1.BigqueryTableIdentifier
	4,  // 3: synq.entities.v1.Identifier.snowflake_table:type_name -> synq.entities.v1.SnowflakeTableIdentifier
	5,  // 4: synq.entities.v1.Identifier.redshift_table:type_name -> synq.entities.v1.RedshiftTableIdentifier
	6,  // 5: synq.entities.v1.Identifier.postgres_table:type_name -> synq.entities.v1.PostgresTableIdentifier
	7,  // 6: synq.entities.v1.Identifier.mysql_table:type_name -> synq.entities.v1.MysqlTableIdentifier
	8,  // 7: synq.entities.v1.Identifier.clickhouse_table:type_name -> synq.entities.v1.ClickhouseTableIdentifier
	9,  // 8: synq.entities.v1.Identifier.databricks_table:type_name -> synq.entities.v1.DatabricksTableIdentifier
	10, // 9: synq.entities.v1.Identifier.airflow_dag:type_name -> synq.entities.v1.AirflowDagIdentifier
	11, // 10: synq.entities.v1.Identifier.airflow_task:type_name -> synq.entities.v1.AirflowTaskIdentifier
	12, // 11: synq.entities.v1.Identifier.custom:type_name -> synq.entities.v1.CustomIdentifier
	13, // 12: synq.entities.v1.Identifier.dataproduct:type_name -> synq.entities.v1.DataproductIdentifier
	14, // 13: synq.entities.v1.Identifier.synq_path:type_name -> synq.entities.v1.SynqPathIdentifier
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_synq_entities_v1_identifier_proto_init() }
func file_synq_entities_v1_identifier_proto_init() {
	if File_synq_entities_v1_identifier_proto != nil {
		return
	}
	file_synq_entities_v1_identifier_proto_msgTypes[0].OneofWrappers = []any{
		(*Identifier_DbtCoreNode)(nil),
		(*Identifier_DbtCloudNode)(nil),
		(*Identifier_BigqueryTable)(nil),
		(*Identifier_SnowflakeTable)(nil),
		(*Identifier_RedshiftTable)(nil),
		(*Identifier_PostgresTable)(nil),
		(*Identifier_MysqlTable)(nil),
		(*Identifier_ClickhouseTable)(nil),
		(*Identifier_DatabricksTable)(nil),
		(*Identifier_AirflowDag)(nil),
		(*Identifier_AirflowTask)(nil),
		(*Identifier_Custom)(nil),
		(*Identifier_Dataproduct)(nil),
		(*Identifier_SynqPath)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_synq_entities_v1_identifier_proto_rawDesc), len(file_synq_entities_v1_identifier_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_synq_entities_v1_identifier_proto_goTypes,
		DependencyIndexes: file_synq_entities_v1_identifier_proto_depIdxs,
		MessageInfos:      file_synq_entities_v1_identifier_proto_msgTypes,
	}.Build()
	File_synq_entities_v1_identifier_proto = out.File
	file_synq_entities_v1_identifier_proto_goTypes = nil
	file_synq_entities_v1_identifier_proto_depIdxs = nil
}
