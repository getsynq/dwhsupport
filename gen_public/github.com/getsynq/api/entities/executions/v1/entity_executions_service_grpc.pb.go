// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: synq/entities/executions/v1/entity_executions_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EntityExecutionsService_UpsertExecution_FullMethodName = "/synq.entities.executions.v1.EntityExecutionsService/UpsertExecution"
	EntityExecutionsService_UpsertLogEntry_FullMethodName  = "/synq.entities.executions.v1.EntityExecutionsService/UpsertLogEntry"
)

// EntityExecutionsServiceClient is the client API for EntityExecutionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityExecutionsServiceClient interface {
	// Execution affects status of the custom entity
	UpsertExecution(ctx context.Context, in *UpsertExecutionRequest, opts ...grpc.CallOption) (*UpsertExecutionResponse, error)
	// LogEntry is a log message for the custom entity
	UpsertLogEntry(ctx context.Context, in *UpsertLogEntryRequest, opts ...grpc.CallOption) (*UpsertLogEntryResponse, error)
}

type entityExecutionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityExecutionsServiceClient(cc grpc.ClientConnInterface) EntityExecutionsServiceClient {
	return &entityExecutionsServiceClient{cc}
}

func (c *entityExecutionsServiceClient) UpsertExecution(ctx context.Context, in *UpsertExecutionRequest, opts ...grpc.CallOption) (*UpsertExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertExecutionResponse)
	err := c.cc.Invoke(ctx, EntityExecutionsService_UpsertExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityExecutionsServiceClient) UpsertLogEntry(ctx context.Context, in *UpsertLogEntryRequest, opts ...grpc.CallOption) (*UpsertLogEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertLogEntryResponse)
	err := c.cc.Invoke(ctx, EntityExecutionsService_UpsertLogEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityExecutionsServiceServer is the server API for EntityExecutionsService service.
// All implementations must embed UnimplementedEntityExecutionsServiceServer
// for forward compatibility.
type EntityExecutionsServiceServer interface {
	// Execution affects status of the custom entity
	UpsertExecution(context.Context, *UpsertExecutionRequest) (*UpsertExecutionResponse, error)
	// LogEntry is a log message for the custom entity
	UpsertLogEntry(context.Context, *UpsertLogEntryRequest) (*UpsertLogEntryResponse, error)
	mustEmbedUnimplementedEntityExecutionsServiceServer()
}

// UnimplementedEntityExecutionsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEntityExecutionsServiceServer struct{}

func (UnimplementedEntityExecutionsServiceServer) UpsertExecution(context.Context, *UpsertExecutionRequest) (*UpsertExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertExecution not implemented")
}
func (UnimplementedEntityExecutionsServiceServer) UpsertLogEntry(context.Context, *UpsertLogEntryRequest) (*UpsertLogEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLogEntry not implemented")
}
func (UnimplementedEntityExecutionsServiceServer) mustEmbedUnimplementedEntityExecutionsServiceServer() {
}
func (UnimplementedEntityExecutionsServiceServer) testEmbeddedByValue() {}

// UnsafeEntityExecutionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityExecutionsServiceServer will
// result in compilation errors.
type UnsafeEntityExecutionsServiceServer interface {
	mustEmbedUnimplementedEntityExecutionsServiceServer()
}

func RegisterEntityExecutionsServiceServer(s grpc.ServiceRegistrar, srv EntityExecutionsServiceServer) {
	// If the following call pancis, it indicates UnimplementedEntityExecutionsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EntityExecutionsService_ServiceDesc, srv)
}

func _EntityExecutionsService_UpsertExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityExecutionsServiceServer).UpsertExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityExecutionsService_UpsertExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityExecutionsServiceServer).UpsertExecution(ctx, req.(*UpsertExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityExecutionsService_UpsertLogEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertLogEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityExecutionsServiceServer).UpsertLogEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityExecutionsService_UpsertLogEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityExecutionsServiceServer).UpsertLogEntry(ctx, req.(*UpsertLogEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityExecutionsService_ServiceDesc is the grpc.ServiceDesc for EntityExecutionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityExecutionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synq.entities.executions.v1.EntityExecutionsService",
	HandlerType: (*EntityExecutionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertExecution",
			Handler:    _EntityExecutionsService_UpsertExecution_Handler,
		},
		{
			MethodName: "UpsertLogEntry",
			Handler:    _EntityExecutionsService_UpsertLogEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synq/entities/executions/v1/entity_executions_service.proto",
}
