// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: synq/entities/custom/v1/features_service.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v11 "github.com/getsynq/api/entities/custom/features/v1"
	v1 "github.com/getsynq/api/entities/v1"
	_ "github.com/getsynq/api/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Feature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Immutable workspace identifier that this entity belongs to.
	Workspace string `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// The identifier of the entity to create or update feature for.
	EntityId *v1.Identifier `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// Identifier of the feature. Can be any string, e.g. "sql" for SQL feature. Use same identifier to update the feature.
	// Do not use random identifier as it will create a new feature on every update.
	FeatureId string `protobuf:"bytes,3,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	// Feature to define for the entity. Depending on the feature type, only one feature can be defined per entity.
	//
	// Types that are valid to be assigned to Feature:
	//
	//	*Feature_SqlDefinition
	//	*Feature_GitFileReference
	//	*Feature_Code
	//	*Feature_Schema
	//	*Feature_CheckCategory
	Feature isFeature_Feature `protobuf_oneof:"feature"`
	// Timestamp when the entity was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp when the entity was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Timestamp when the entity was deleted. If this is set, the entity is considered deleted.
	DeletedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Feature) Reset() {
	*x = Feature{}
	mi := &file_synq_entities_custom_v1_features_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_custom_v1_features_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_synq_entities_custom_v1_features_service_proto_rawDescGZIP(), []int{0}
}

func (x *Feature) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *Feature) GetEntityId() *v1.Identifier {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *Feature) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *Feature) GetFeature() isFeature_Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *Feature) GetSqlDefinition() *v11.SqlDefinition {
	if x != nil {
		if x, ok := x.Feature.(*Feature_SqlDefinition); ok {
			return x.SqlDefinition
		}
	}
	return nil
}

func (x *Feature) GetGitFileReference() *v11.GitFileReference {
	if x != nil {
		if x, ok := x.Feature.(*Feature_GitFileReference); ok {
			return x.GitFileReference
		}
	}
	return nil
}

func (x *Feature) GetCode() *v11.Code {
	if x != nil {
		if x, ok := x.Feature.(*Feature_Code); ok {
			return x.Code
		}
	}
	return nil
}

func (x *Feature) GetSchema() *v11.Schema {
	if x != nil {
		if x, ok := x.Feature.(*Feature_Schema); ok {
			return x.Schema
		}
	}
	return nil
}

func (x *Feature) GetCheckCategory() *v11.CheckCategory {
	if x != nil {
		if x, ok := x.Feature.(*Feature_CheckCategory); ok {
			return x.CheckCategory
		}
	}
	return nil
}

func (x *Feature) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Feature) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Feature) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type isFeature_Feature interface {
	isFeature_Feature()
}

type Feature_SqlDefinition struct {
	// Only one feature per entity.
	SqlDefinition *v11.SqlDefinition `protobuf:"bytes,10,opt,name=sql_definition,json=sqlDefinition,proto3,oneof"`
}

type Feature_GitFileReference struct {
	// Multiple features per entity.
	GitFileReference *v11.GitFileReference `protobuf:"bytes,11,opt,name=git_file_reference,json=gitFileReference,proto3,oneof"`
}

type Feature_Code struct {
	// Multiple features per entity.
	Code *v11.Code `protobuf:"bytes,12,opt,name=code,proto3,oneof"`
}

type Feature_Schema struct {
	// Only one feature per entity.
	Schema *v11.Schema `protobuf:"bytes,13,opt,name=schema,proto3,oneof"`
}

type Feature_CheckCategory struct {
	// Only one feature per entity.
	CheckCategory *v11.CheckCategory `protobuf:"bytes,14,opt,name=check_category,json=checkCategory,proto3,oneof"`
}

func (*Feature_SqlDefinition) isFeature_Feature() {}

func (*Feature_GitFileReference) isFeature_Feature() {}

func (*Feature_Code) isFeature_Feature() {}

func (*Feature_Schema) isFeature_Feature() {}

func (*Feature_CheckCategory) isFeature_Feature() {}

type UpsertEntityFeatureRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The feature to create or update.
	Feature       *Feature `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertEntityFeatureRequest) Reset() {
	*x = UpsertEntityFeatureRequest{}
	mi := &file_synq_entities_custom_v1_features_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertEntityFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertEntityFeatureRequest) ProtoMessage() {}

func (x *UpsertEntityFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_custom_v1_features_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertEntityFeatureRequest.ProtoReflect.Descriptor instead.
func (*UpsertEntityFeatureRequest) Descriptor() ([]byte, []int) {
	return file_synq_entities_custom_v1_features_service_proto_rawDescGZIP(), []int{1}
}

func (x *UpsertEntityFeatureRequest) GetFeature() *Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

type UpsertEntityFeatureResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertEntityFeatureResponse) Reset() {
	*x = UpsertEntityFeatureResponse{}
	mi := &file_synq_entities_custom_v1_features_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertEntityFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertEntityFeatureResponse) ProtoMessage() {}

func (x *UpsertEntityFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_custom_v1_features_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertEntityFeatureResponse.ProtoReflect.Descriptor instead.
func (*UpsertEntityFeatureResponse) Descriptor() ([]byte, []int) {
	return file_synq_entities_custom_v1_features_service_proto_rawDescGZIP(), []int{2}
}

type DeleteEntityFeatureRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of the entity to delete feature from.
	EntityId *v1.Identifier `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// Identifier of the feature to delete.
	FeatureId     string `protobuf:"bytes,2,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteEntityFeatureRequest) Reset() {
	*x = DeleteEntityFeatureRequest{}
	mi := &file_synq_entities_custom_v1_features_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEntityFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEntityFeatureRequest) ProtoMessage() {}

func (x *DeleteEntityFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_custom_v1_features_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEntityFeatureRequest.ProtoReflect.Descriptor instead.
func (*DeleteEntityFeatureRequest) Descriptor() ([]byte, []int) {
	return file_synq_entities_custom_v1_features_service_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteEntityFeatureRequest) GetEntityId() *v1.Identifier {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *DeleteEntityFeatureRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

type DeleteEntityFeatureResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteEntityFeatureResponse) Reset() {
	*x = DeleteEntityFeatureResponse{}
	mi := &file_synq_entities_custom_v1_features_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEntityFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEntityFeatureResponse) ProtoMessage() {}

func (x *DeleteEntityFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_custom_v1_features_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEntityFeatureResponse.ProtoReflect.Descriptor instead.
func (*DeleteEntityFeatureResponse) Descriptor() ([]byte, []int) {
	return file_synq_entities_custom_v1_features_service_proto_rawDescGZIP(), []int{4}
}

type ListEntityFeaturesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of the entity to get features for.
	EntityId      *v1.Identifier `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEntityFeaturesRequest) Reset() {
	*x = ListEntityFeaturesRequest{}
	mi := &file_synq_entities_custom_v1_features_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEntityFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntityFeaturesRequest) ProtoMessage() {}

func (x *ListEntityFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_custom_v1_features_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntityFeaturesRequest.ProtoReflect.Descriptor instead.
func (*ListEntityFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_synq_entities_custom_v1_features_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListEntityFeaturesRequest) GetEntityId() *v1.Identifier {
	if x != nil {
		return x.EntityId
	}
	return nil
}

type ListEntityFeaturesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of features for the entity.
	Features      []*Feature `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEntityFeaturesResponse) Reset() {
	*x = ListEntityFeaturesResponse{}
	mi := &file_synq_entities_custom_v1_features_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEntityFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntityFeaturesResponse) ProtoMessage() {}

func (x *ListEntityFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_synq_entities_custom_v1_features_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntityFeaturesResponse.ProtoReflect.Descriptor instead.
func (*ListEntityFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_synq_entities_custom_v1_features_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListEntityFeaturesResponse) GetFeatures() []*Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

var File_synq_entities_custom_v1_features_service_proto protoreflect.FileDescriptor

var file_synq_entities_custom_v1_features_service_proto_rawDesc = string([]byte{
	0x0a, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x17, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x73, 0x79, 0x6e, 0x71, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x73,
	0x79, 0x6e, 0x71, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x71, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x05, 0x0a, 0x07, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x58, 0x0a, 0x0e, 0x73, 0x71, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x71, 0x6c,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x12, 0x67, 0x69,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x10, 0x67, 0x69,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3c,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x58, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x10, 0x0a, 0x07, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x60, 0x0a,
	0x1a, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d,
	0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xff, 0x01, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0x1d,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x5a, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x32, 0xb2, 0x03, 0x0a, 0x0f, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x89, 0x01,
	0x0a, 0x13, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x33, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x79, 0x6e,
	0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x07, 0xd2, 0xb5, 0x18, 0x03, 0x0a, 0x01, 0x1e, 0x12, 0x89, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x33, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x07, 0xd2, 0xb5,
	0x18, 0x03, 0x0a, 0x01, 0x1e, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x73,
	0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x07, 0xd2, 0xb5, 0x18, 0x03, 0x0a, 0x01, 0x1f, 0x42, 0xdd,
	0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x79, 0x6e, 0x71, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x14,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x79, 0x6e, 0x71, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2f, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x53, 0x45, 0x43, 0xaa, 0x02, 0x17, 0x53, 0x79, 0x6e, 0x71, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x17, 0x53, 0x79, 0x6e, 0x71, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x5c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x23, 0x53, 0x79,
	0x6e, 0x71, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5c, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x1a, 0x53, 0x79, 0x6e, 0x71, 0x3a, 0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x3a, 0x3a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_synq_entities_custom_v1_features_service_proto_rawDescOnce sync.Once
	file_synq_entities_custom_v1_features_service_proto_rawDescData []byte
)

func file_synq_entities_custom_v1_features_service_proto_rawDescGZIP() []byte {
	file_synq_entities_custom_v1_features_service_proto_rawDescOnce.Do(func() {
		file_synq_entities_custom_v1_features_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_synq_entities_custom_v1_features_service_proto_rawDesc), len(file_synq_entities_custom_v1_features_service_proto_rawDesc)))
	})
	return file_synq_entities_custom_v1_features_service_proto_rawDescData
}

var file_synq_entities_custom_v1_features_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_synq_entities_custom_v1_features_service_proto_goTypes = []any{
	(*Feature)(nil),                     // 0: synq.entities.custom.v1.Feature
	(*UpsertEntityFeatureRequest)(nil),  // 1: synq.entities.custom.v1.UpsertEntityFeatureRequest
	(*UpsertEntityFeatureResponse)(nil), // 2: synq.entities.custom.v1.UpsertEntityFeatureResponse
	(*DeleteEntityFeatureRequest)(nil),  // 3: synq.entities.custom.v1.DeleteEntityFeatureRequest
	(*DeleteEntityFeatureResponse)(nil), // 4: synq.entities.custom.v1.DeleteEntityFeatureResponse
	(*ListEntityFeaturesRequest)(nil),   // 5: synq.entities.custom.v1.ListEntityFeaturesRequest
	(*ListEntityFeaturesResponse)(nil),  // 6: synq.entities.custom.v1.ListEntityFeaturesResponse
	(*v1.Identifier)(nil),               // 7: synq.entities.v1.Identifier
	(*v11.SqlDefinition)(nil),           // 8: synq.entities.custom.features.v1.SqlDefinition
	(*v11.GitFileReference)(nil),        // 9: synq.entities.custom.features.v1.GitFileReference
	(*v11.Code)(nil),                    // 10: synq.entities.custom.features.v1.Code
	(*v11.Schema)(nil),                  // 11: synq.entities.custom.features.v1.Schema
	(*v11.CheckCategory)(nil),           // 12: synq.entities.custom.features.v1.CheckCategory
	(*timestamppb.Timestamp)(nil),       // 13: google.protobuf.Timestamp
}
var file_synq_entities_custom_v1_features_service_proto_depIdxs = []int32{
	7,  // 0: synq.entities.custom.v1.Feature.entity_id:type_name -> synq.entities.v1.Identifier
	8,  // 1: synq.entities.custom.v1.Feature.sql_definition:type_name -> synq.entities.custom.features.v1.SqlDefinition
	9,  // 2: synq.entities.custom.v1.Feature.git_file_reference:type_name -> synq.entities.custom.features.v1.GitFileReference
	10, // 3: synq.entities.custom.v1.Feature.code:type_name -> synq.entities.custom.features.v1.Code
	11, // 4: synq.entities.custom.v1.Feature.schema:type_name -> synq.entities.custom.features.v1.Schema
	12, // 5: synq.entities.custom.v1.Feature.check_category:type_name -> synq.entities.custom.features.v1.CheckCategory
	13, // 6: synq.entities.custom.v1.Feature.created_at:type_name -> google.protobuf.Timestamp
	13, // 7: synq.entities.custom.v1.Feature.updated_at:type_name -> google.protobuf.Timestamp
	13, // 8: synq.entities.custom.v1.Feature.deleted_at:type_name -> google.protobuf.Timestamp
	0,  // 9: synq.entities.custom.v1.UpsertEntityFeatureRequest.feature:type_name -> synq.entities.custom.v1.Feature
	7,  // 10: synq.entities.custom.v1.DeleteEntityFeatureRequest.entity_id:type_name -> synq.entities.v1.Identifier
	7,  // 11: synq.entities.custom.v1.ListEntityFeaturesRequest.entity_id:type_name -> synq.entities.v1.Identifier
	0,  // 12: synq.entities.custom.v1.ListEntityFeaturesResponse.features:type_name -> synq.entities.custom.v1.Feature
	1,  // 13: synq.entities.custom.v1.FeaturesService.UpsertEntityFeature:input_type -> synq.entities.custom.v1.UpsertEntityFeatureRequest
	3,  // 14: synq.entities.custom.v1.FeaturesService.DeleteEntityFeature:input_type -> synq.entities.custom.v1.DeleteEntityFeatureRequest
	5,  // 15: synq.entities.custom.v1.FeaturesService.ListEntityFeatures:input_type -> synq.entities.custom.v1.ListEntityFeaturesRequest
	2,  // 16: synq.entities.custom.v1.FeaturesService.UpsertEntityFeature:output_type -> synq.entities.custom.v1.UpsertEntityFeatureResponse
	4,  // 17: synq.entities.custom.v1.FeaturesService.DeleteEntityFeature:output_type -> synq.entities.custom.v1.DeleteEntityFeatureResponse
	6,  // 18: synq.entities.custom.v1.FeaturesService.ListEntityFeatures:output_type -> synq.entities.custom.v1.ListEntityFeaturesResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_synq_entities_custom_v1_features_service_proto_init() }
func file_synq_entities_custom_v1_features_service_proto_init() {
	if File_synq_entities_custom_v1_features_service_proto != nil {
		return
	}
	file_synq_entities_custom_v1_features_service_proto_msgTypes[0].OneofWrappers = []any{
		(*Feature_SqlDefinition)(nil),
		(*Feature_GitFileReference)(nil),
		(*Feature_Code)(nil),
		(*Feature_Schema)(nil),
		(*Feature_CheckCategory)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_synq_entities_custom_v1_features_service_proto_rawDesc), len(file_synq_entities_custom_v1_features_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_synq_entities_custom_v1_features_service_proto_goTypes,
		DependencyIndexes: file_synq_entities_custom_v1_features_service_proto_depIdxs,
		MessageInfos:      file_synq_entities_custom_v1_features_service_proto_msgTypes,
	}.Build()
	File_synq_entities_custom_v1_features_service_proto = out.File
	file_synq_entities_custom_v1_features_service_proto_goTypes = nil
	file_synq_entities_custom_v1_features_service_proto_depIdxs = nil
}
