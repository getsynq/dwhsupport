// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: synq/entities/custom/v1/features_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeaturesService_UpsertEntityFeature_FullMethodName = "/synq.entities.custom.v1.FeaturesService/UpsertEntityFeature"
	FeaturesService_DeleteEntityFeature_FullMethodName = "/synq.entities.custom.v1.FeaturesService/DeleteEntityFeature"
	FeaturesService_ListEntityFeatures_FullMethodName  = "/synq.entities.custom.v1.FeaturesService/ListEntityFeatures"
)

// FeaturesServiceClient is the client API for FeaturesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeaturesServiceClient interface {
	// Create or update an entity. If the entity does not exist, it will be created, otherwise it will be updated. Entities are identified and deduplicated by their Identifier in a scope of a given customer workspace.
	UpsertEntityFeature(ctx context.Context, in *UpsertEntityFeatureRequest, opts ...grpc.CallOption) (*UpsertEntityFeatureResponse, error)
	// Delete an entity by its identifier. If the entity does not exist, it will be a no-op.
	DeleteEntityFeature(ctx context.Context, in *DeleteEntityFeatureRequest, opts ...grpc.CallOption) (*DeleteEntityFeatureResponse, error)
	// List all entities.
	ListEntityFeatures(ctx context.Context, in *ListEntityFeaturesRequest, opts ...grpc.CallOption) (*ListEntityFeaturesResponse, error)
}

type featuresServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeaturesServiceClient(cc grpc.ClientConnInterface) FeaturesServiceClient {
	return &featuresServiceClient{cc}
}

func (c *featuresServiceClient) UpsertEntityFeature(ctx context.Context, in *UpsertEntityFeatureRequest, opts ...grpc.CallOption) (*UpsertEntityFeatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertEntityFeatureResponse)
	err := c.cc.Invoke(ctx, FeaturesService_UpsertEntityFeature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresServiceClient) DeleteEntityFeature(ctx context.Context, in *DeleteEntityFeatureRequest, opts ...grpc.CallOption) (*DeleteEntityFeatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEntityFeatureResponse)
	err := c.cc.Invoke(ctx, FeaturesService_DeleteEntityFeature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresServiceClient) ListEntityFeatures(ctx context.Context, in *ListEntityFeaturesRequest, opts ...grpc.CallOption) (*ListEntityFeaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEntityFeaturesResponse)
	err := c.cc.Invoke(ctx, FeaturesService_ListEntityFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeaturesServiceServer is the server API for FeaturesService service.
// All implementations must embed UnimplementedFeaturesServiceServer
// for forward compatibility.
type FeaturesServiceServer interface {
	// Create or update an entity. If the entity does not exist, it will be created, otherwise it will be updated. Entities are identified and deduplicated by their Identifier in a scope of a given customer workspace.
	UpsertEntityFeature(context.Context, *UpsertEntityFeatureRequest) (*UpsertEntityFeatureResponse, error)
	// Delete an entity by its identifier. If the entity does not exist, it will be a no-op.
	DeleteEntityFeature(context.Context, *DeleteEntityFeatureRequest) (*DeleteEntityFeatureResponse, error)
	// List all entities.
	ListEntityFeatures(context.Context, *ListEntityFeaturesRequest) (*ListEntityFeaturesResponse, error)
	mustEmbedUnimplementedFeaturesServiceServer()
}

// UnimplementedFeaturesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeaturesServiceServer struct{}

func (UnimplementedFeaturesServiceServer) UpsertEntityFeature(context.Context, *UpsertEntityFeatureRequest) (*UpsertEntityFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertEntityFeature not implemented")
}
func (UnimplementedFeaturesServiceServer) DeleteEntityFeature(context.Context, *DeleteEntityFeatureRequest) (*DeleteEntityFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntityFeature not implemented")
}
func (UnimplementedFeaturesServiceServer) ListEntityFeatures(context.Context, *ListEntityFeaturesRequest) (*ListEntityFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntityFeatures not implemented")
}
func (UnimplementedFeaturesServiceServer) mustEmbedUnimplementedFeaturesServiceServer() {}
func (UnimplementedFeaturesServiceServer) testEmbeddedByValue()                         {}

// UnsafeFeaturesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeaturesServiceServer will
// result in compilation errors.
type UnsafeFeaturesServiceServer interface {
	mustEmbedUnimplementedFeaturesServiceServer()
}

func RegisterFeaturesServiceServer(s grpc.ServiceRegistrar, srv FeaturesServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeaturesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeaturesService_ServiceDesc, srv)
}

func _FeaturesService_UpsertEntityFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertEntityFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesServiceServer).UpsertEntityFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeaturesService_UpsertEntityFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesServiceServer).UpsertEntityFeature(ctx, req.(*UpsertEntityFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturesService_DeleteEntityFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesServiceServer).DeleteEntityFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeaturesService_DeleteEntityFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesServiceServer).DeleteEntityFeature(ctx, req.(*DeleteEntityFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeaturesService_ListEntityFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntityFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesServiceServer).ListEntityFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeaturesService_ListEntityFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesServiceServer).ListEntityFeatures(ctx, req.(*ListEntityFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeaturesService_ServiceDesc is the grpc.ServiceDesc for FeaturesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeaturesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synq.entities.custom.v1.FeaturesService",
	HandlerType: (*FeaturesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertEntityFeature",
			Handler:    _FeaturesService_UpsertEntityFeature_Handler,
		},
		{
			MethodName: "DeleteEntityFeature",
			Handler:    _FeaturesService_DeleteEntityFeature_Handler,
		},
		{
			MethodName: "ListEntityFeatures",
			Handler:    _FeaturesService_ListEntityFeatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synq/entities/custom/v1/features_service.proto",
}
