// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: synq/entities/custom/v1/relationships_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RelationshipsService_UpsertRelationships_FullMethodName = "/synq.entities.custom.v1.RelationshipsService/UpsertRelationships"
	RelationshipsService_DeleteRelationships_FullMethodName = "/synq.entities.custom.v1.RelationshipsService/DeleteRelationships"
	RelationshipsService_ListRelationships_FullMethodName   = "/synq.entities.custom.v1.RelationshipsService/ListRelationships"
)

// RelationshipsServiceClient is the client API for RelationshipsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RelationshipsService allow management of relationships between entities. Relationships can
// be created, updated, and deleted between 2 custom entities, or between a custom entity and Synq native entity.enum
// There is no option to create relationships between 2 Synq native entities (dbt model, BI dashboard, etc.).
type RelationshipsServiceClient interface {
	// Create or update relationships between entities. If the relationship already exists, it will be updated, otherwise it will be created.
	UpsertRelationships(ctx context.Context, in *UpsertRelationshipsRequest, opts ...grpc.CallOption) (*UpsertRelationshipsResponse, error)
	// Delete relationships between entities. If the relationship does not exist, it will be ignored.
	DeleteRelationships(ctx context.Context, in *DeleteRelationshipsRequest, opts ...grpc.CallOption) (*DeleteRelationshipsResponse, error)
	// Delete relationships between entities. If the relationship does not exist, it will be ignored.
	ListRelationships(ctx context.Context, in *ListRelationshipsRequest, opts ...grpc.CallOption) (*ListRelationshipsResponse, error)
}

type relationshipsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationshipsServiceClient(cc grpc.ClientConnInterface) RelationshipsServiceClient {
	return &relationshipsServiceClient{cc}
}

func (c *relationshipsServiceClient) UpsertRelationships(ctx context.Context, in *UpsertRelationshipsRequest, opts ...grpc.CallOption) (*UpsertRelationshipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertRelationshipsResponse)
	err := c.cc.Invoke(ctx, RelationshipsService_UpsertRelationships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipsServiceClient) DeleteRelationships(ctx context.Context, in *DeleteRelationshipsRequest, opts ...grpc.CallOption) (*DeleteRelationshipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRelationshipsResponse)
	err := c.cc.Invoke(ctx, RelationshipsService_DeleteRelationships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipsServiceClient) ListRelationships(ctx context.Context, in *ListRelationshipsRequest, opts ...grpc.CallOption) (*ListRelationshipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRelationshipsResponse)
	err := c.cc.Invoke(ctx, RelationshipsService_ListRelationships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationshipsServiceServer is the server API for RelationshipsService service.
// All implementations must embed UnimplementedRelationshipsServiceServer
// for forward compatibility.
//
// RelationshipsService allow management of relationships between entities. Relationships can
// be created, updated, and deleted between 2 custom entities, or between a custom entity and Synq native entity.enum
// There is no option to create relationships between 2 Synq native entities (dbt model, BI dashboard, etc.).
type RelationshipsServiceServer interface {
	// Create or update relationships between entities. If the relationship already exists, it will be updated, otherwise it will be created.
	UpsertRelationships(context.Context, *UpsertRelationshipsRequest) (*UpsertRelationshipsResponse, error)
	// Delete relationships between entities. If the relationship does not exist, it will be ignored.
	DeleteRelationships(context.Context, *DeleteRelationshipsRequest) (*DeleteRelationshipsResponse, error)
	// Delete relationships between entities. If the relationship does not exist, it will be ignored.
	ListRelationships(context.Context, *ListRelationshipsRequest) (*ListRelationshipsResponse, error)
	mustEmbedUnimplementedRelationshipsServiceServer()
}

// UnimplementedRelationshipsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRelationshipsServiceServer struct{}

func (UnimplementedRelationshipsServiceServer) UpsertRelationships(context.Context, *UpsertRelationshipsRequest) (*UpsertRelationshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRelationships not implemented")
}
func (UnimplementedRelationshipsServiceServer) DeleteRelationships(context.Context, *DeleteRelationshipsRequest) (*DeleteRelationshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelationships not implemented")
}
func (UnimplementedRelationshipsServiceServer) ListRelationships(context.Context, *ListRelationshipsRequest) (*ListRelationshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRelationships not implemented")
}
func (UnimplementedRelationshipsServiceServer) mustEmbedUnimplementedRelationshipsServiceServer() {}
func (UnimplementedRelationshipsServiceServer) testEmbeddedByValue()                              {}

// UnsafeRelationshipsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationshipsServiceServer will
// result in compilation errors.
type UnsafeRelationshipsServiceServer interface {
	mustEmbedUnimplementedRelationshipsServiceServer()
}

func RegisterRelationshipsServiceServer(s grpc.ServiceRegistrar, srv RelationshipsServiceServer) {
	// If the following call pancis, it indicates UnimplementedRelationshipsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RelationshipsService_ServiceDesc, srv)
}

func _RelationshipsService_UpsertRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRelationshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipsServiceServer).UpsertRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationshipsService_UpsertRelationships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipsServiceServer).UpsertRelationships(ctx, req.(*UpsertRelationshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationshipsService_DeleteRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipsServiceServer).DeleteRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationshipsService_DeleteRelationships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipsServiceServer).DeleteRelationships(ctx, req.(*DeleteRelationshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationshipsService_ListRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelationshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipsServiceServer).ListRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationshipsService_ListRelationships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipsServiceServer).ListRelationships(ctx, req.(*ListRelationshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationshipsService_ServiceDesc is the grpc.ServiceDesc for RelationshipsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationshipsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synq.entities.custom.v1.RelationshipsService",
	HandlerType: (*RelationshipsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertRelationships",
			Handler:    _RelationshipsService_UpsertRelationships_Handler,
		},
		{
			MethodName: "DeleteRelationships",
			Handler:    _RelationshipsService_DeleteRelationships_Handler,
		},
		{
			MethodName: "ListRelationships",
			Handler:    _RelationshipsService_ListRelationships_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synq/entities/custom/v1/relationships_service.proto",
}
