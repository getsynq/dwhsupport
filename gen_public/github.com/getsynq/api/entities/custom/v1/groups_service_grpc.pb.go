// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: synq/entities/custom/v1/groups_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GroupsService_ListEntityGroups_FullMethodName    = "/synq.entities.custom.v1.GroupsService/ListEntityGroups"
	GroupsService_UpsertEntitiesGroup_FullMethodName = "/synq.entities.custom.v1.GroupsService/UpsertEntitiesGroup"
	GroupsService_DeleteEntitiesGroup_FullMethodName = "/synq.entities.custom.v1.GroupsService/DeleteEntitiesGroup"
)

// GroupsServiceClient is the client API for GroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// It eliminates the need to keep state on client side to remember which assets were already created
// and which should be deleted. The server will keep track of the current state of the group and client
// can always send the intended new state. The server will calculate the diff and entities that are
// no longer present in the group will be removed.
//
// Example:
// 1. group has entities A, B, C at time t1
// 2. client sends group with entities B, C, D at time t2
// 3. server will remove entity A from the system and update the current state of the group to B, C, D
//
// The service is designed to be idempotent and can be called multiple times with the same state without
// causing any side effects.
type GroupsServiceClient interface {
	// ListEntityGroups lists all groups.
	ListEntityGroups(ctx context.Context, in *ListEntityGroupsRequest, opts ...grpc.CallOption) (*ListEntityGroupsResponse, error)
	// UpsertEntitiesGroup updates current definition of group to the server. As part of the upsert operation
	// the difference of entity ids is calculated between past state and the current state and entities that are
	// no longer part of the group are removed.
	UpsertEntitiesGroup(ctx context.Context, in *UpsertEntitiesGroupRequest, opts ...grpc.CallOption) (*UpsertEntitiesGroupResponse, error)
	// DeleteEntitiesGroup deletes a group by its identifier. If the group does not exist, it will be a no-op.
	DeleteEntitiesGroup(ctx context.Context, in *DeleteEntitiesGroupRequest, opts ...grpc.CallOption) (*DeleteEntitiesGroupResponse, error)
}

type groupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupsServiceClient(cc grpc.ClientConnInterface) GroupsServiceClient {
	return &groupsServiceClient{cc}
}

func (c *groupsServiceClient) ListEntityGroups(ctx context.Context, in *ListEntityGroupsRequest, opts ...grpc.CallOption) (*ListEntityGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEntityGroupsResponse)
	err := c.cc.Invoke(ctx, GroupsService_ListEntityGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) UpsertEntitiesGroup(ctx context.Context, in *UpsertEntitiesGroupRequest, opts ...grpc.CallOption) (*UpsertEntitiesGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertEntitiesGroupResponse)
	err := c.cc.Invoke(ctx, GroupsService_UpsertEntitiesGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) DeleteEntitiesGroup(ctx context.Context, in *DeleteEntitiesGroupRequest, opts ...grpc.CallOption) (*DeleteEntitiesGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEntitiesGroupResponse)
	err := c.cc.Invoke(ctx, GroupsService_DeleteEntitiesGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupsServiceServer is the server API for GroupsService service.
// All implementations must embed UnimplementedGroupsServiceServer
// for forward compatibility.
//
// It eliminates the need to keep state on client side to remember which assets were already created
// and which should be deleted. The server will keep track of the current state of the group and client
// can always send the intended new state. The server will calculate the diff and entities that are
// no longer present in the group will be removed.
//
// Example:
// 1. group has entities A, B, C at time t1
// 2. client sends group with entities B, C, D at time t2
// 3. server will remove entity A from the system and update the current state of the group to B, C, D
//
// The service is designed to be idempotent and can be called multiple times with the same state without
// causing any side effects.
type GroupsServiceServer interface {
	// ListEntityGroups lists all groups.
	ListEntityGroups(context.Context, *ListEntityGroupsRequest) (*ListEntityGroupsResponse, error)
	// UpsertEntitiesGroup updates current definition of group to the server. As part of the upsert operation
	// the difference of entity ids is calculated between past state and the current state and entities that are
	// no longer part of the group are removed.
	UpsertEntitiesGroup(context.Context, *UpsertEntitiesGroupRequest) (*UpsertEntitiesGroupResponse, error)
	// DeleteEntitiesGroup deletes a group by its identifier. If the group does not exist, it will be a no-op.
	DeleteEntitiesGroup(context.Context, *DeleteEntitiesGroupRequest) (*DeleteEntitiesGroupResponse, error)
	mustEmbedUnimplementedGroupsServiceServer()
}

// UnimplementedGroupsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupsServiceServer struct{}

func (UnimplementedGroupsServiceServer) ListEntityGroups(context.Context, *ListEntityGroupsRequest) (*ListEntityGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntityGroups not implemented")
}
func (UnimplementedGroupsServiceServer) UpsertEntitiesGroup(context.Context, *UpsertEntitiesGroupRequest) (*UpsertEntitiesGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertEntitiesGroup not implemented")
}
func (UnimplementedGroupsServiceServer) DeleteEntitiesGroup(context.Context, *DeleteEntitiesGroupRequest) (*DeleteEntitiesGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntitiesGroup not implemented")
}
func (UnimplementedGroupsServiceServer) mustEmbedUnimplementedGroupsServiceServer() {}
func (UnimplementedGroupsServiceServer) testEmbeddedByValue()                       {}

// UnsafeGroupsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupsServiceServer will
// result in compilation errors.
type UnsafeGroupsServiceServer interface {
	mustEmbedUnimplementedGroupsServiceServer()
}

func RegisterGroupsServiceServer(s grpc.ServiceRegistrar, srv GroupsServiceServer) {
	// If the following call pancis, it indicates UnimplementedGroupsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GroupsService_ServiceDesc, srv)
}

func _GroupsService_ListEntityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntityGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).ListEntityGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsService_ListEntityGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).ListEntityGroups(ctx, req.(*ListEntityGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_UpsertEntitiesGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertEntitiesGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).UpsertEntitiesGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsService_UpsertEntitiesGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).UpsertEntitiesGroup(ctx, req.(*UpsertEntitiesGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_DeleteEntitiesGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntitiesGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).DeleteEntitiesGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsService_DeleteEntitiesGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).DeleteEntitiesGroup(ctx, req.(*DeleteEntitiesGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupsService_ServiceDesc is the grpc.ServiceDesc for GroupsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synq.entities.custom.v1.GroupsService",
	HandlerType: (*GroupsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEntityGroups",
			Handler:    _GroupsService_ListEntityGroups_Handler,
		},
		{
			MethodName: "UpsertEntitiesGroup",
			Handler:    _GroupsService_UpsertEntitiesGroup_Handler,
		},
		{
			MethodName: "DeleteEntitiesGroup",
			Handler:    _GroupsService_DeleteEntitiesGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synq/entities/custom/v1/groups_service.proto",
}
