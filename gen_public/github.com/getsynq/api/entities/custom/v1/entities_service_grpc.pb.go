// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: synq/entities/custom/v1/entities_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EntitiesService_UpsertEntity_FullMethodName = "/synq.entities.custom.v1.EntitiesService/UpsertEntity"
	EntitiesService_DeleteEntity_FullMethodName = "/synq.entities.custom.v1.EntitiesService/DeleteEntity"
	EntitiesService_ListEntities_FullMethodName = "/synq.entities.custom.v1.EntitiesService/ListEntities"
)

// EntitiesServiceClient is the client API for EntitiesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// custom.EntitiesService is a service for managing custom entities. Entities can represent
// various data platform concepts such as services, consumers, applications or data pipelines
// that are not natively available in Synq.
//
// Entities are identified by a unique identifier and can be created, updated, read and deleted.
type EntitiesServiceClient interface {
	// Create or update an entity. If the entity does not exist, it will be created, otherwise it will be updated. Entities are identified and deduplicated by their Identifier in a scope of a given customer workspace.
	UpsertEntity(ctx context.Context, in *UpsertEntityRequest, opts ...grpc.CallOption) (*UpsertEntityResponse, error)
	// Delete an entity by its identifier. If the entity does not exist, it will be a no-op.
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error)
	// List all entities.
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
}

type entitiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntitiesServiceClient(cc grpc.ClientConnInterface) EntitiesServiceClient {
	return &entitiesServiceClient{cc}
}

func (c *entitiesServiceClient) UpsertEntity(ctx context.Context, in *UpsertEntityRequest, opts ...grpc.CallOption) (*UpsertEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertEntityResponse)
	err := c.cc.Invoke(ctx, EntitiesService_UpsertEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesServiceClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEntityResponse)
	err := c.cc.Invoke(ctx, EntitiesService_DeleteEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, EntitiesService_ListEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntitiesServiceServer is the server API for EntitiesService service.
// All implementations must embed UnimplementedEntitiesServiceServer
// for forward compatibility.
//
// custom.EntitiesService is a service for managing custom entities. Entities can represent
// various data platform concepts such as services, consumers, applications or data pipelines
// that are not natively available in Synq.
//
// Entities are identified by a unique identifier and can be created, updated, read and deleted.
type EntitiesServiceServer interface {
	// Create or update an entity. If the entity does not exist, it will be created, otherwise it will be updated. Entities are identified and deduplicated by their Identifier in a scope of a given customer workspace.
	UpsertEntity(context.Context, *UpsertEntityRequest) (*UpsertEntityResponse, error)
	// Delete an entity by its identifier. If the entity does not exist, it will be a no-op.
	DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityResponse, error)
	// List all entities.
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
	mustEmbedUnimplementedEntitiesServiceServer()
}

// UnimplementedEntitiesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEntitiesServiceServer struct{}

func (UnimplementedEntitiesServiceServer) UpsertEntity(context.Context, *UpsertEntityRequest) (*UpsertEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertEntity not implemented")
}
func (UnimplementedEntitiesServiceServer) DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedEntitiesServiceServer) ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (UnimplementedEntitiesServiceServer) mustEmbedUnimplementedEntitiesServiceServer() {}
func (UnimplementedEntitiesServiceServer) testEmbeddedByValue()                         {}

// UnsafeEntitiesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntitiesServiceServer will
// result in compilation errors.
type UnsafeEntitiesServiceServer interface {
	mustEmbedUnimplementedEntitiesServiceServer()
}

func RegisterEntitiesServiceServer(s grpc.ServiceRegistrar, srv EntitiesServiceServer) {
	// If the following call pancis, it indicates UnimplementedEntitiesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EntitiesService_ServiceDesc, srv)
}

func _EntitiesService_UpsertEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServiceServer).UpsertEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntitiesService_UpsertEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServiceServer).UpsertEntity(ctx, req.(*UpsertEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntitiesService_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServiceServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntitiesService_DeleteEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServiceServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntitiesService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntitiesService_ListEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntitiesService_ServiceDesc is the grpc.ServiceDesc for EntitiesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntitiesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synq.entities.custom.v1.EntitiesService",
	HandlerType: (*EntitiesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertEntity",
			Handler:    _EntitiesService_UpsertEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _EntitiesService_DeleteEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _EntitiesService_ListEntities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synq/entities/custom/v1/entities_service.proto",
}
