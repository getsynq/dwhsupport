// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: synq/entities/custom/v1/types_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TypesService_UpsertType_FullMethodName = "/synq.entities.custom.v1.TypesService/UpsertType"
	TypesService_DeleteType_FullMethodName = "/synq.entities.custom.v1.TypesService/DeleteType"
	TypesService_ListTypes_FullMethodName  = "/synq.entities.custom.v1.TypesService/ListTypes"
)

// TypesServiceClient is the client API for TypesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TypesService is a service for managing custom entity types.
type TypesServiceClient interface {
	// Create or update an entity. If the entity does not exist, it will be created, otherwise it will be updated. Entities are identified and deduplicated by their Identifier in a scope of a given customer workspace.
	UpsertType(ctx context.Context, in *UpsertTypeRequest, opts ...grpc.CallOption) (*UpsertTypeResponse, error)
	// Delete an entity by its identifier. If the entity does not exist, it will be a no-op.
	DeleteType(ctx context.Context, in *DeleteTypeRequest, opts ...grpc.CallOption) (*DeleteTypeResponse, error)
	// List all entities.
	ListTypes(ctx context.Context, in *ListTypesRequest, opts ...grpc.CallOption) (*ListTypesResponse, error)
}

type typesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTypesServiceClient(cc grpc.ClientConnInterface) TypesServiceClient {
	return &typesServiceClient{cc}
}

func (c *typesServiceClient) UpsertType(ctx context.Context, in *UpsertTypeRequest, opts ...grpc.CallOption) (*UpsertTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertTypeResponse)
	err := c.cc.Invoke(ctx, TypesService_UpsertType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesServiceClient) DeleteType(ctx context.Context, in *DeleteTypeRequest, opts ...grpc.CallOption) (*DeleteTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTypeResponse)
	err := c.cc.Invoke(ctx, TypesService_DeleteType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesServiceClient) ListTypes(ctx context.Context, in *ListTypesRequest, opts ...grpc.CallOption) (*ListTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTypesResponse)
	err := c.cc.Invoke(ctx, TypesService_ListTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TypesServiceServer is the server API for TypesService service.
// All implementations must embed UnimplementedTypesServiceServer
// for forward compatibility.
//
// TypesService is a service for managing custom entity types.
type TypesServiceServer interface {
	// Create or update an entity. If the entity does not exist, it will be created, otherwise it will be updated. Entities are identified and deduplicated by their Identifier in a scope of a given customer workspace.
	UpsertType(context.Context, *UpsertTypeRequest) (*UpsertTypeResponse, error)
	// Delete an entity by its identifier. If the entity does not exist, it will be a no-op.
	DeleteType(context.Context, *DeleteTypeRequest) (*DeleteTypeResponse, error)
	// List all entities.
	ListTypes(context.Context, *ListTypesRequest) (*ListTypesResponse, error)
	mustEmbedUnimplementedTypesServiceServer()
}

// UnimplementedTypesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTypesServiceServer struct{}

func (UnimplementedTypesServiceServer) UpsertType(context.Context, *UpsertTypeRequest) (*UpsertTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertType not implemented")
}
func (UnimplementedTypesServiceServer) DeleteType(context.Context, *DeleteTypeRequest) (*DeleteTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteType not implemented")
}
func (UnimplementedTypesServiceServer) ListTypes(context.Context, *ListTypesRequest) (*ListTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTypes not implemented")
}
func (UnimplementedTypesServiceServer) mustEmbedUnimplementedTypesServiceServer() {}
func (UnimplementedTypesServiceServer) testEmbeddedByValue()                      {}

// UnsafeTypesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TypesServiceServer will
// result in compilation errors.
type UnsafeTypesServiceServer interface {
	mustEmbedUnimplementedTypesServiceServer()
}

func RegisterTypesServiceServer(s grpc.ServiceRegistrar, srv TypesServiceServer) {
	// If the following call pancis, it indicates UnimplementedTypesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TypesService_ServiceDesc, srv)
}

func _TypesService_UpsertType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesServiceServer).UpsertType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypesService_UpsertType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesServiceServer).UpsertType(ctx, req.(*UpsertTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesService_DeleteType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesServiceServer).DeleteType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypesService_DeleteType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesServiceServer).DeleteType(ctx, req.(*DeleteTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesService_ListTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesServiceServer).ListTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypesService_ListTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesServiceServer).ListTypes(ctx, req.(*ListTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TypesService_ServiceDesc is the grpc.ServiceDesc for TypesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TypesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synq.entities.custom.v1.TypesService",
	HandlerType: (*TypesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertType",
			Handler:    _TypesService_UpsertType_Handler,
		},
		{
			MethodName: "DeleteType",
			Handler:    _TypesService_DeleteType_Handler,
		},
		{
			MethodName: "ListTypes",
			Handler:    _TypesService_ListTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synq/entities/custom/v1/types_service.proto",
}
