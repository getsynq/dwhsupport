// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: synq/entities/status/v1/entity_issues_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EntityIssuesService_GetIssuesStatus_FullMethodName      = "/synq.entities.status.v1.EntityIssuesService/GetIssuesStatus"
	EntityIssuesService_BatchGetIssuesStatus_FullMethodName = "/synq.entities.status.v1.EntityIssuesService/BatchGetIssuesStatus"
)

// EntityIssuesServiceClient is the client API for EntityIssuesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EntityIssuesService is the service which retrieves entity issues status.
type EntityIssuesServiceClient interface {
	// Get specific entity status by its identifier.
	GetIssuesStatus(ctx context.Context, in *GetIssuesStatusRequest, opts ...grpc.CallOption) (*GetIssuesStatusResponse, error)
	// Get multiple entity statuses by their identifiers.
	BatchGetIssuesStatus(ctx context.Context, in *BatchGetIssuesStatusRequest, opts ...grpc.CallOption) (*BatchGetIssuesStatusResponse, error)
}

type entityIssuesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityIssuesServiceClient(cc grpc.ClientConnInterface) EntityIssuesServiceClient {
	return &entityIssuesServiceClient{cc}
}

func (c *entityIssuesServiceClient) GetIssuesStatus(ctx context.Context, in *GetIssuesStatusRequest, opts ...grpc.CallOption) (*GetIssuesStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIssuesStatusResponse)
	err := c.cc.Invoke(ctx, EntityIssuesService_GetIssuesStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityIssuesServiceClient) BatchGetIssuesStatus(ctx context.Context, in *BatchGetIssuesStatusRequest, opts ...grpc.CallOption) (*BatchGetIssuesStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetIssuesStatusResponse)
	err := c.cc.Invoke(ctx, EntityIssuesService_BatchGetIssuesStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityIssuesServiceServer is the server API for EntityIssuesService service.
// All implementations must embed UnimplementedEntityIssuesServiceServer
// for forward compatibility.
//
// EntityIssuesService is the service which retrieves entity issues status.
type EntityIssuesServiceServer interface {
	// Get specific entity status by its identifier.
	GetIssuesStatus(context.Context, *GetIssuesStatusRequest) (*GetIssuesStatusResponse, error)
	// Get multiple entity statuses by their identifiers.
	BatchGetIssuesStatus(context.Context, *BatchGetIssuesStatusRequest) (*BatchGetIssuesStatusResponse, error)
	mustEmbedUnimplementedEntityIssuesServiceServer()
}

// UnimplementedEntityIssuesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEntityIssuesServiceServer struct{}

func (UnimplementedEntityIssuesServiceServer) GetIssuesStatus(context.Context, *GetIssuesStatusRequest) (*GetIssuesStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuesStatus not implemented")
}
func (UnimplementedEntityIssuesServiceServer) BatchGetIssuesStatus(context.Context, *BatchGetIssuesStatusRequest) (*BatchGetIssuesStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetIssuesStatus not implemented")
}
func (UnimplementedEntityIssuesServiceServer) mustEmbedUnimplementedEntityIssuesServiceServer() {}
func (UnimplementedEntityIssuesServiceServer) testEmbeddedByValue()                             {}

// UnsafeEntityIssuesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityIssuesServiceServer will
// result in compilation errors.
type UnsafeEntityIssuesServiceServer interface {
	mustEmbedUnimplementedEntityIssuesServiceServer()
}

func RegisterEntityIssuesServiceServer(s grpc.ServiceRegistrar, srv EntityIssuesServiceServer) {
	// If the following call pancis, it indicates UnimplementedEntityIssuesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EntityIssuesService_ServiceDesc, srv)
}

func _EntityIssuesService_GetIssuesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuesStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityIssuesServiceServer).GetIssuesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityIssuesService_GetIssuesStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityIssuesServiceServer).GetIssuesStatus(ctx, req.(*GetIssuesStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityIssuesService_BatchGetIssuesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetIssuesStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityIssuesServiceServer).BatchGetIssuesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityIssuesService_BatchGetIssuesStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityIssuesServiceServer).BatchGetIssuesStatus(ctx, req.(*BatchGetIssuesStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityIssuesService_ServiceDesc is the grpc.ServiceDesc for EntityIssuesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityIssuesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synq.entities.status.v1.EntityIssuesService",
	HandlerType: (*EntityIssuesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIssuesStatus",
			Handler:    _EntityIssuesService_GetIssuesStatus_Handler,
		},
		{
			MethodName: "BatchGetIssuesStatus",
			Handler:    _EntityIssuesService_BatchGetIssuesStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synq/entities/status/v1/entity_issues_service.proto",
}
