// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: synq/entities/status/v1/entity_incidents_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EntityIncidentsService_GetIncidents_FullMethodName      = "/synq.entities.status.v1.EntityIncidentsService/GetIncidents"
	EntityIncidentsService_BatchGetIncidents_FullMethodName = "/synq.entities.status.v1.EntityIncidentsService/BatchGetIncidents"
)

// EntityIncidentsServiceClient is the client API for EntityIncidentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EntityIncidentsService is the service which retrieves entity status.
type EntityIncidentsServiceClient interface {
	// Get specific entity status by its identifier.
	GetIncidents(ctx context.Context, in *GetIncidentsRequest, opts ...grpc.CallOption) (*GetIncidentsResponse, error)
	// Get multiple entity statuses by their identifiers.
	BatchGetIncidents(ctx context.Context, in *BatchGetIncidentsRequest, opts ...grpc.CallOption) (*BatchGetIncidentsResponse, error)
}

type entityIncidentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityIncidentsServiceClient(cc grpc.ClientConnInterface) EntityIncidentsServiceClient {
	return &entityIncidentsServiceClient{cc}
}

func (c *entityIncidentsServiceClient) GetIncidents(ctx context.Context, in *GetIncidentsRequest, opts ...grpc.CallOption) (*GetIncidentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIncidentsResponse)
	err := c.cc.Invoke(ctx, EntityIncidentsService_GetIncidents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityIncidentsServiceClient) BatchGetIncidents(ctx context.Context, in *BatchGetIncidentsRequest, opts ...grpc.CallOption) (*BatchGetIncidentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetIncidentsResponse)
	err := c.cc.Invoke(ctx, EntityIncidentsService_BatchGetIncidents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityIncidentsServiceServer is the server API for EntityIncidentsService service.
// All implementations must embed UnimplementedEntityIncidentsServiceServer
// for forward compatibility.
//
// EntityIncidentsService is the service which retrieves entity status.
type EntityIncidentsServiceServer interface {
	// Get specific entity status by its identifier.
	GetIncidents(context.Context, *GetIncidentsRequest) (*GetIncidentsResponse, error)
	// Get multiple entity statuses by their identifiers.
	BatchGetIncidents(context.Context, *BatchGetIncidentsRequest) (*BatchGetIncidentsResponse, error)
	mustEmbedUnimplementedEntityIncidentsServiceServer()
}

// UnimplementedEntityIncidentsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEntityIncidentsServiceServer struct{}

func (UnimplementedEntityIncidentsServiceServer) GetIncidents(context.Context, *GetIncidentsRequest) (*GetIncidentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncidents not implemented")
}
func (UnimplementedEntityIncidentsServiceServer) BatchGetIncidents(context.Context, *BatchGetIncidentsRequest) (*BatchGetIncidentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetIncidents not implemented")
}
func (UnimplementedEntityIncidentsServiceServer) mustEmbedUnimplementedEntityIncidentsServiceServer() {
}
func (UnimplementedEntityIncidentsServiceServer) testEmbeddedByValue() {}

// UnsafeEntityIncidentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityIncidentsServiceServer will
// result in compilation errors.
type UnsafeEntityIncidentsServiceServer interface {
	mustEmbedUnimplementedEntityIncidentsServiceServer()
}

func RegisterEntityIncidentsServiceServer(s grpc.ServiceRegistrar, srv EntityIncidentsServiceServer) {
	// If the following call pancis, it indicates UnimplementedEntityIncidentsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EntityIncidentsService_ServiceDesc, srv)
}

func _EntityIncidentsService_GetIncidents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncidentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityIncidentsServiceServer).GetIncidents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityIncidentsService_GetIncidents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityIncidentsServiceServer).GetIncidents(ctx, req.(*GetIncidentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityIncidentsService_BatchGetIncidents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetIncidentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityIncidentsServiceServer).BatchGetIncidents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityIncidentsService_BatchGetIncidents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityIncidentsServiceServer).BatchGetIncidents(ctx, req.(*BatchGetIncidentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityIncidentsService_ServiceDesc is the grpc.ServiceDesc for EntityIncidentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityIncidentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synq.entities.status.v1.EntityIncidentsService",
	HandlerType: (*EntityIncidentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIncidents",
			Handler:    _EntityIncidentsService_GetIncidents_Handler,
		},
		{
			MethodName: "BatchGetIncidents",
			Handler:    _EntityIncidentsService_BatchGetIncidents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synq/entities/status/v1/entity_incidents_service.proto",
}
